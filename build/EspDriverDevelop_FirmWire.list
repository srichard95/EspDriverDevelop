
build/EspDriverDevelop_FirmWire.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4822      	ldr	r0, [pc, #136]	; (80001ec <endfiniloop+0x4>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	2002      	movs	r0, #2
 800016a:	f380 8814 	msr	CONTROL, r0
 800016e:	f3bf 8f6f 	isb	sy
 8000172:	f001 f885 	bl	8001280 <__core_init>
 8000176:	f003 fadb 	bl	8003730 <__early_init>
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <endfiniloop+0x8>)
 800017c:	491d      	ldr	r1, [pc, #116]	; (80001f4 <endfiniloop+0xc>)
 800017e:	4a1e      	ldr	r2, [pc, #120]	; (80001f8 <endfiniloop+0x10>)

08000180 <msloop>:
 8000180:	4291      	cmp	r1, r2
 8000182:	bf3c      	itt	cc
 8000184:	f841 0b04 	strcc.w	r0, [r1], #4
 8000188:	e7fa      	bcc.n	8000180 <msloop>
 800018a:	491c      	ldr	r1, [pc, #112]	; (80001fc <endfiniloop+0x14>)
 800018c:	4a17      	ldr	r2, [pc, #92]	; (80001ec <endfiniloop+0x4>)

0800018e <psloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <psloop>
 8000198:	4919      	ldr	r1, [pc, #100]	; (8000200 <endfiniloop+0x18>)
 800019a:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <endfiniloop+0x1c>)
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <endfiniloop+0x20>)

0800019e <dloop>:
 800019e:	429a      	cmp	r2, r3
 80001a0:	bf3e      	ittt	cc
 80001a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80001aa:	e7f8      	bcc.n	800019e <dloop>
 80001ac:	2000      	movs	r0, #0
 80001ae:	4917      	ldr	r1, [pc, #92]	; (800020c <endfiniloop+0x24>)
 80001b0:	4a17      	ldr	r2, [pc, #92]	; (8000210 <endfiniloop+0x28>)

080001b2 <bloop>:
 80001b2:	4291      	cmp	r1, r2
 80001b4:	bf3c      	itt	cc
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ba:	e7fa      	bcc.n	80001b2 <bloop>
 80001bc:	f001 f828 	bl	8001210 <__init_ram_areas>
 80001c0:	f001 f856 	bl	8001270 <__late_init>
 80001c4:	4c13      	ldr	r4, [pc, #76]	; (8000214 <endfiniloop+0x2c>)
 80001c6:	4d14      	ldr	r5, [pc, #80]	; (8000218 <endfiniloop+0x30>)

080001c8 <initloop>:
 80001c8:	42ac      	cmp	r4, r5
 80001ca:	da03      	bge.n	80001d4 <endinitloop>
 80001cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001d0:	4788      	blx	r1
 80001d2:	e7f9      	b.n	80001c8 <initloop>

080001d4 <endinitloop>:
 80001d4:	f005 fc7c 	bl	8005ad0 <main>
 80001d8:	4c10      	ldr	r4, [pc, #64]	; (800021c <endfiniloop+0x34>)
 80001da:	4d11      	ldr	r5, [pc, #68]	; (8000220 <endfiniloop+0x38>)

080001dc <finiloop>:
 80001dc:	42ac      	cmp	r4, r5
 80001de:	da03      	bge.n	80001e8 <endfiniloop>
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80001e4:	4788      	blx	r1
 80001e6:	e7f9      	b.n	80001dc <finiloop>

080001e8 <endfiniloop>:
 80001e8:	f001 b83a 	b.w	8001260 <__default_exit>
 80001ec:	20000800 	.word	0x20000800
 80001f0:	55555555 	.word	0x55555555
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000400 	.word	0x20000400
 80001fc:	20000400 	.word	0x20000400
 8000200:	080084b8 	.word	0x080084b8
 8000204:	20000800 	.word	0x20000800
 8000208:	20000e54 	.word	0x20000e54
 800020c:	20000e58 	.word	0x20000e58
 8000210:	20003610 	.word	0x20003610
 8000214:	08000160 	.word	0x08000160
 8000218:	08000160 	.word	0x08000160
 800021c:	08000160 	.word	0x08000160
 8000220:	08000160 	.word	0x08000160
	...

08000230 <_port_switch>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000238:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000240 <_port_thread_start>:
 8000240:	2300      	movs	r3, #0
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	4628      	mov	r0, r5
 8000248:	47a0      	blx	r4
 800024a:	2000      	movs	r0, #0
 800024c:	f000 fd90 	bl	8000d70 <chThdExit>

08000250 <_port_switch_from_isr>:
 8000250:	f000 fa16 	bl	8000680 <chSchDoReschedule>

08000254 <_port_exit_from_isr>:
 8000254:	df00      	svc	0
 8000256:	e7fe      	b.n	8000256 <_port_exit_from_isr+0x2>
	...

08000260 <strcmp>:
 8000260:	ea80 0c01 	eor.w	ip, r0, r1
 8000264:	f01c 0f03 	tst.w	ip, #3
 8000268:	d137      	bne.n	80002da <strcmp+0x7a>
 800026a:	f010 0c03 	ands.w	ip, r0, #3
 800026e:	f020 0003 	bic.w	r0, r0, #3
 8000272:	f021 0103 	bic.w	r1, r1, #3
 8000276:	f850 2b04 	ldr.w	r2, [r0], #4
 800027a:	bf08      	it	eq
 800027c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000280:	d00e      	beq.n	80002a0 <strcmp+0x40>
 8000282:	f08c 0c03 	eor.w	ip, ip, #3
 8000286:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800028a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800028e:	fa23 fc0c 	lsr.w	ip, r3, ip
 8000292:	f851 3b04 	ldr.w	r3, [r1], #4
 8000296:	ea42 020c 	orr.w	r2, r2, ip
 800029a:	ea43 030c 	orr.w	r3, r3, ip
 800029e:	bf00      	nop
 80002a0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80002a4:	429a      	cmp	r2, r3
 80002a6:	bf01      	itttt	eq
 80002a8:	ea2c 0c02 	biceq.w	ip, ip, r2
 80002ac:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80002b0:	f850 2b04 	ldreq.w	r2, [r0], #4
 80002b4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80002b8:	d0f2      	beq.n	80002a0 <strcmp+0x40>
 80002ba:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80002be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80002c2:	2801      	cmp	r0, #1
 80002c4:	bf28      	it	cs
 80002c6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80002ca:	bf08      	it	eq
 80002cc:	0a1b      	lsreq	r3, r3, #8
 80002ce:	d0f4      	beq.n	80002ba <strcmp+0x5a>
 80002d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4770      	bx	lr
 80002da:	f010 0f03 	tst.w	r0, #3
 80002de:	d00a      	beq.n	80002f6 <strcmp+0x96>
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f4      	beq.n	80002da <strcmp+0x7a>
 80002f0:	eba2 0003 	sub.w	r0, r2, r3
 80002f4:	4770      	bx	lr
 80002f6:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80002fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80002fe:	f001 0503 	and.w	r5, r1, #3
 8000302:	f021 0103 	bic.w	r1, r1, #3
 8000306:	f851 3b04 	ldr.w	r3, [r1], #4
 800030a:	2d02      	cmp	r5, #2
 800030c:	d026      	beq.n	800035c <strcmp+0xfc>
 800030e:	d84d      	bhi.n	80003ac <strcmp+0x14c>
 8000310:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8000314:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000318:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800031c:	ea2c 0c02 	bic.w	ip, ip, r2
 8000320:	d10d      	bne.n	800033e <strcmp+0xde>
 8000322:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000326:	bf08      	it	eq
 8000328:	f851 3b04 	ldreq.w	r3, [r1], #4
 800032c:	d10a      	bne.n	8000344 <strcmp+0xe4>
 800032e:	ea85 0502 	eor.w	r5, r5, r2
 8000332:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8000336:	d10c      	bne.n	8000352 <strcmp+0xf2>
 8000338:	f850 2b04 	ldr.w	r2, [r0], #4
 800033c:	e7e8      	b.n	8000310 <strcmp+0xb0>
 800033e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000342:	e05b      	b.n	80003fc <strcmp+0x19c>
 8000344:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000348:	d154      	bne.n	80003f4 <strcmp+0x194>
 800034a:	780b      	ldrb	r3, [r1, #0]
 800034c:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000350:	e054      	b.n	80003fc <strcmp+0x19c>
 8000352:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000356:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800035a:	e04f      	b.n	80003fc <strcmp+0x19c>
 800035c:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000360:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000364:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000368:	ea2c 0c02 	bic.w	ip, ip, r2
 800036c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000370:	d118      	bne.n	80003a4 <strcmp+0x144>
 8000372:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8000376:	bf08      	it	eq
 8000378:	f851 3b04 	ldreq.w	r3, [r1], #4
 800037c:	d107      	bne.n	800038e <strcmp+0x12e>
 800037e:	ea85 0502 	eor.w	r5, r5, r2
 8000382:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8000386:	d109      	bne.n	800039c <strcmp+0x13c>
 8000388:	f850 2b04 	ldr.w	r2, [r0], #4
 800038c:	e7e6      	b.n	800035c <strcmp+0xfc>
 800038e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8000392:	d12f      	bne.n	80003f4 <strcmp+0x194>
 8000394:	880b      	ldrh	r3, [r1, #0]
 8000396:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800039a:	e02f      	b.n	80003fc <strcmp+0x19c>
 800039c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80003a0:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80003a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80003a8:	e028      	b.n	80003fc <strcmp+0x19c>
 80003aa:	bf00      	nop
 80003ac:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80003b0:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80003b4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80003b8:	ea2c 0c02 	bic.w	ip, ip, r2
 80003bc:	d10d      	bne.n	80003da <strcmp+0x17a>
 80003be:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80003c2:	bf08      	it	eq
 80003c4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003c8:	d10a      	bne.n	80003e0 <strcmp+0x180>
 80003ca:	ea85 0502 	eor.w	r5, r5, r2
 80003ce:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80003d2:	d10a      	bne.n	80003ea <strcmp+0x18a>
 80003d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80003d8:	e7e8      	b.n	80003ac <strcmp+0x14c>
 80003da:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80003de:	e00d      	b.n	80003fc <strcmp+0x19c>
 80003e0:	f012 0fff 	tst.w	r2, #255	; 0xff
 80003e4:	d006      	beq.n	80003f4 <strcmp+0x194>
 80003e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ea:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80003ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003f2:	e003      	b.n	80003fc <strcmp+0x19c>
 80003f4:	f04f 0000 	mov.w	r0, #0
 80003f8:	bc20      	pop	{r5}
 80003fa:	4770      	bx	lr
 80003fc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8000400:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000404:	2801      	cmp	r0, #1
 8000406:	bf28      	it	cs
 8000408:	4290      	cmpcs	r0, r2
 800040a:	bf04      	itt	eq
 800040c:	0a2d      	lsreq	r5, r5, #8
 800040e:	0a1b      	lsreq	r3, r3, #8
 8000410:	d0f4      	beq.n	80003fc <strcmp+0x19c>
 8000412:	eba2 0000 	sub.w	r0, r2, r0
 8000416:	bc20      	pop	{r5}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	0000      	movs	r0, r0
	...

08000420 <wakeup.lto_priv.82>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000420:	b410      	push	{r4}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000422:	2320      	movs	r3, #32
 8000424:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000428:	7f03      	ldrb	r3, [r0, #28]
 800042a:	2b07      	cmp	r3, #7
 800042c:	d80e      	bhi.n	800044c <wakeup.lto_priv.82+0x2c>
 800042e:	e8df f003 	tbb	[pc, r3]
 8000432:	0d27      	.short	0x0d27
 8000434:	0408230d 	.word	0x0408230d
 8000438:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800043a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800043c:	6893      	ldr	r3, [r2, #8]
 800043e:	3301      	adds	r3, #1
 8000440:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000442:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000446:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000448:	6802      	ldr	r2, [r0, #0]
 800044a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800044c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000450:	2200      	movs	r2, #0
 8000452:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <wakeup.lto_priv.82+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000456:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000458:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800045a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800045c:	689a      	ldr	r2, [r3, #8]
 800045e:	428a      	cmp	r2, r1
 8000460:	d2fb      	bcs.n	800045a <wakeup.lto_priv.82+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000462:	685a      	ldr	r2, [r3, #4]
 8000464:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000466:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8000468:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800046a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800046c:	6058      	str	r0, [r3, #4]
 800046e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000476:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000478:	6a03      	ldr	r3, [r0, #32]
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e7e5      	b.n	800044c <wakeup.lto_priv.82+0x2c>
 8000480:	2300      	movs	r3, #0
 8000482:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	20002e30 	.word	0x20002e30

08000490 <_idle_thread.lto_priv.69>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000490:	e7fe      	b.n	8000490 <_idle_thread.lto_priv.69>
 8000492:	bf00      	nop
	...

080004a0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80004a2:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80004a4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 80004a6:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 80004a8:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80004aa:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 80004ac:	2600      	movs	r6, #0
 80004ae:	68a1      	ldr	r1, [r4, #8]
 80004b0:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 80004b2:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80004b4:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80004b6:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80004b8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80004ba:	7726      	strb	r6, [r4, #28]
 80004bc:	e000      	b.n	80004c0 <chSchDoRescheduleAhead+0x20>
 80004be:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d8fb      	bhi.n	80004be <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80004c6:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80004c8:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80004ca:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 80004cc:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 80004ce:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80004d0:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80004d2:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80004d4:	f7ff beac 	b.w	8000230 <_port_switch>
 80004d8:	20002e30 	.word	0x20002e30
 80004dc:	00000000 	.word	0x00000000

080004e0 <chEvtUnregister>:
 80004e0:	2320      	movs	r3, #32
 80004e2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80004e6:	4602      	mov	r2, r0
 80004e8:	e002      	b.n	80004f0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d007      	beq.n	80004fe <chEvtUnregister+0x1e>
 80004ee:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 80004f0:	6813      	ldr	r3, [r2, #0]
 80004f2:	4283      	cmp	r3, r0
 80004f4:	d1f9      	bne.n	80004ea <chEvtUnregister+0xa>
 80004f6:	2300      	movs	r3, #0
 80004f8:	f383 8811 	msr	BASEPRI, r3
 80004fc:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 80004fe:	680b      	ldr	r3, [r1, #0]
 8000500:	6013      	str	r3, [r2, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	f383 8811 	msr	BASEPRI, r3
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	0000      	movs	r0, r0
	...

08000510 <chMtxTryLock>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @api
 */
bool chMtxTryLock(mutex_t *mp) {
 8000510:	4603      	mov	r3, r0
 8000512:	2220      	movs	r2, #32
 8000514:	f382 8811 	msr	BASEPRI, r2
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8000518:	6882      	ldr	r2, [r0, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 800051a:	2000      	movs	r0, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 800051c:	b11a      	cbz	r2, 8000526 <chMtxTryLock+0x16>
 800051e:	2300      	movs	r3, #0
 8000520:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 8000524:	4770      	bx	lr

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <chMtxTryLock+0x2c>)
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 8000528:	2001      	movs	r0, #1

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800052a:	6992      	ldr	r2, [r2, #24]
  mp->m_next = currp->p_mtxlist;
 800052c:	6b91      	ldr	r1, [r2, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800052e:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 8000530:	60d9      	str	r1, [r3, #12]
  currp->p_mtxlist = mp;
 8000532:	6393      	str	r3, [r2, #56]	; 0x38
 8000534:	2300      	movs	r3, #0
 8000536:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  b = chMtxTryLockS(mp);
  chSysUnlock();

  return b;
}
 800053a:	4770      	bx	lr
 800053c:	20002e30 	.word	0x20002e30

08000540 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8000540:	b430      	push	{r4, r5}
 8000542:	4602      	mov	r2, r0
 8000544:	2120      	movs	r1, #32
 8000546:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 800054a:	7f83      	ldrb	r3, [r0, #30]
 800054c:	2400      	movs	r4, #0
 800054e:	3b01      	subs	r3, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	7783      	strb	r3, [r0, #30]
 8000554:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8000558:	b913      	cbnz	r3, 8000560 <chThdRelease+0x20>
 800055a:	7f04      	ldrb	r4, [r0, #28]
 800055c:	2c0f      	cmp	r4, #15
 800055e:	d001      	beq.n	8000564 <chThdRelease+0x24>
      /* Nothing to do for static threads, those are removed from the
         registry on exit.*/
      break;
    }
  }
}
 8000560:	bc30      	pop	{r4, r5}
 8000562:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8000564:	7f44      	ldrb	r4, [r0, #29]
 8000566:	f004 0403 	and.w	r4, r4, #3
 800056a:	2c01      	cmp	r4, #1
 800056c:	d00f      	beq.n	800058e <chThdRelease+0x4e>
 800056e:	2c02      	cmp	r4, #2
 8000570:	d1f6      	bne.n	8000560 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000572:	6905      	ldr	r5, [r0, #16]
 8000574:	6944      	ldr	r4, [r0, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8000576:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000578:	6125      	str	r5, [r4, #16]
 800057a:	6915      	ldr	r5, [r2, #16]
 800057c:	616c      	str	r4, [r5, #20]
 800057e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8000582:	6801      	ldr	r1, [r0, #0]
 8000584:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8000586:	6002      	str	r2, [r0, #0]
 8000588:	f383 8811 	msr	BASEPRI, r3
 800058c:	e7e8      	b.n	8000560 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 800058e:	6943      	ldr	r3, [r0, #20]
 8000590:	6901      	ldr	r1, [r0, #16]
      /* Nothing to do for static threads, those are removed from the
         registry on exit.*/
      break;
    }
  }
}
 8000592:	bc30      	pop	{r4, r5}
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8000594:	6119      	str	r1, [r3, #16]
 8000596:	6902      	ldr	r2, [r0, #16]
 8000598:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 800059a:	f003 b9d1 	b.w	8003940 <chHeapFree>
 800059e:	bf00      	nop

080005a0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80005a0:	b510      	push	{r4, lr}
 80005a2:	2320      	movs	r3, #32
 80005a4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80005aa:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 80005ac:	429c      	cmp	r4, r3
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80005ae:	bf17      	itett	ne
 80005b0:	7fa3      	ldrbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 80005b2:	2400      	moveq	r4, #0
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 80005b4:	3301      	addne	r3, #1
 80005b6:	77a3      	strbne	r3, [r4, #30]
 80005b8:	2300      	movs	r3, #0
 80005ba:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80005be:	f7ff ffbf 	bl	8000540 <chThdRelease>
#endif

  return ntp;
}
 80005c2:	4620      	mov	r0, r4
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	bf00      	nop
 80005c8:	20002e30 	.word	0x20002e30
 80005cc:	00000000 	.word	0x00000000

080005d0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80005d2:	490f      	ldr	r1, [pc, #60]	; (8000610 <chTMStopMeasurementX+0x40>)
 80005d4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80005d6:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80005d8:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80005da:	1ad3      	subs	r3, r2, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80005dc:	68c2      	ldr	r2, [r0, #12]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80005de:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80005e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80005e4:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80005e6:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80005e8:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80005ea:	18e4      	adds	r4, r4, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80005ec:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80005ee:	6802      	ldr	r2, [r0, #0]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80005f0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80005f4:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80005f6:	bf88      	it	hi
 80005f8:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80005fa:	4293      	cmp	r3, r2
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80005fc:	e9c0 4504 	strd	r4, r5, [r0, #16]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000600:	bc30      	pop	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000602:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8000604:	bf38      	it	cc
 8000606:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e0001000 	.word	0xe0001000
 8000610:	20002e30 	.word	0x20002e30
	...

08000620 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	2320      	movs	r3, #32
 8000624:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <chThdYield+0x54>)
 800062a:	6810      	ldr	r0, [r2, #0]
 800062c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800062e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8000630:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8000632:	428b      	cmp	r3, r1
 8000634:	d203      	bcs.n	800063e <chThdYield+0x1e>
 8000636:	2300      	movs	r3, #0
 8000638:	f383 8811 	msr	BASEPRI, r3
 800063c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800063e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000640:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000642:	2600      	movs	r6, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000644:	606a      	str	r2, [r5, #4]
 8000646:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000648:	7707      	strb	r7, [r0, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800064a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800064c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800064e:	7726      	strb	r6, [r4, #28]
 8000650:	e000      	b.n	8000654 <chThdYield+0x34>
 8000652:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	4291      	cmp	r1, r2
 8000658:	d9fb      	bls.n	8000652 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800065a:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800065c:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800065e:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000660:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000662:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000664:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8000666:	f7ff fde3 	bl	8000230 <_port_switch>
 800066a:	2300      	movs	r3, #0
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000672:	bf00      	nop
 8000674:	20002e30 	.word	0x20002e30
	...

08000680 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000680:	f7ff bf0e 	b.w	80004a0 <chSchDoRescheduleAhead>
	...

08000690 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <chSchRescheduleS+0x14>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000696:	6892      	ldr	r2, [r2, #8]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	429a      	cmp	r2, r3
 800069c:	d800      	bhi.n	80006a0 <chSchRescheduleS+0x10>
 800069e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80006a0:	f7ff befe 	b.w	80004a0 <chSchDoRescheduleAhead>
 80006a4:	20002e30 	.word	0x20002e30
	...

080006b0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2320      	movs	r3, #32
 80006b4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <chThdSetPriority+0x2c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 80006be:	6899      	ldr	r1, [r3, #8]
 80006c0:	428c      	cmp	r4, r1
 80006c2:	d001      	beq.n	80006c8 <chThdSetPriority+0x18>
 80006c4:	4281      	cmp	r1, r0
 80006c6:	d200      	bcs.n	80006ca <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 80006c8:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 80006ca:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 80006cc:	f7ff ffe0 	bl	8000690 <chSchRescheduleS>
 80006d0:	2300      	movs	r3, #0
 80006d2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 80006d6:	4620      	mov	r0, r4
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	20002e30 	.word	0x20002e30

080006e0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80006e2:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006e4:	699e      	ldr	r6, [r3, #24]
 80006e6:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80006e8:	4605      	mov	r5, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80006ea:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80006ec:	68b0      	ldr	r0, [r6, #8]
 80006ee:	4284      	cmp	r4, r0
 80006f0:	d80c      	bhi.n	800070c <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80006f2:	2200      	movs	r2, #0
 80006f4:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80006f6:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	4294      	cmp	r4, r2
 80006fc:	d9fb      	bls.n	80006f6 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80006fe:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000700:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8000702:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = tp;
 8000704:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 8000706:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000708:	bc70      	pop	{r4, r5, r6}
 800070a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 800070c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800070e:	2100      	movs	r1, #0
 8000710:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000712:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000714:	6891      	ldr	r1, [r2, #8]
 8000716:	4288      	cmp	r0, r1
 8000718:	d9fb      	bls.n	8000712 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800071a:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800071c:	2401      	movs	r4, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800071e:	6070      	str	r0, [r6, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000720:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8000722:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 8000724:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000726:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 8000728:	4631      	mov	r1, r6
 800072a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800072c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800072e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000730:	f7ff bd7e 	b.w	8000230 <_port_switch>
 8000734:	20002e30 	.word	0x20002e30
	...

08000740 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000740:	b508      	push	{r3, lr}
 8000742:	2320      	movs	r3, #32
 8000744:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 8000748:	6883      	ldr	r3, [r0, #8]
 800074a:	3301      	adds	r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	6083      	str	r3, [r0, #8]
 8000750:	dd03      	ble.n	800075a <chSemSignal+0x1a>
 8000752:	2300      	movs	r3, #0
 8000754:	f383 8811 	msr	BASEPRI, r3
 8000758:	bd08      	pop	{r3, pc}
 800075a:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800075c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 800075e:	2100      	movs	r1, #0

  tqp->p_next = tp->p_next;
 8000760:	6802      	ldr	r2, [r0, #0]
 8000762:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000764:	6053      	str	r3, [r2, #4]
 8000766:	f7ff ffbb 	bl	80006e0 <chSchWakeupS>
 800076a:	2300      	movs	r3, #0
 800076c:	f383 8811 	msr	BASEPRI, r3
 8000770:	bd08      	pop	{r3, pc}
 8000772:	bf00      	nop
	...

08000780 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8000780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000784:	4690      	mov	r8, r2
 8000786:	4699      	mov	r9, r3
 8000788:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 800078a:	f003 f921 	bl	80039d0 <chHeapAlloc>
  if (wsp == NULL) {
 800078e:	4604      	mov	r4, r0
 8000790:	2800      	cmp	r0, #0
 8000792:	d034      	beq.n	80007fe <chThdCreateFromHeap+0x7e>
 8000794:	2320      	movs	r3, #32
 8000796:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800079a:	4f1a      	ldr	r7, [pc, #104]	; (8000804 <chThdCreateFromHeap+0x84>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800079c:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 80007a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007a2:	eb00 0c01 	add.w	ip, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007a6:	697b      	ldr	r3, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007a8:	f8c0 c00c 	str.w	ip, [r0, #12]
 80007ac:	f840 9001 	str.w	r9, [r0, r1]
 80007b0:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007b4:	f04f 0201 	mov.w	r2, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007b8:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8000808 <chThdCreateFromHeap+0x88>
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80007bc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80007be:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80007c2:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007c6:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80007ca:	f8cc b020 	str.w	fp, [ip, #32]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 80007ce:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80007d0:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007d4:	6107      	str	r7, [r0, #16]
 80007d6:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80007d8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80007dc:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80007e0:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80007e2:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80007e4:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80007e6:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80007e8:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80007ea:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 80007ee:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80007f0:	6286      	str	r6, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80007f2:	62c6      	str	r6, [r0, #44]	; 0x2c
 80007f4:	6178      	str	r0, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 80007f6:	f7ff ff73 	bl	80006e0 <chSchWakeupS>
 80007fa:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80007fe:	4620      	mov	r0, r4
 8000800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000804:	20002e30 	.word	0x20002e30
 8000808:	08000241 	.word	0x08000241
 800080c:	00000000 	.word	0x00000000

08000810 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8000810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000814:	4699      	mov	r9, r3
 8000816:	4604      	mov	r4, r0
 8000818:	2320      	movs	r3, #32
 800081a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800081e:	4e19      	ldr	r6, [pc, #100]	; (8000884 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000820:	3924      	subs	r1, #36	; 0x24
 8000822:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000824:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000826:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000888 <chThdCreateStatic+0x78>
 800082a:	60c7      	str	r7, [r0, #12]
 800082c:	f840 9001 	str.w	r9, [r0, r1]
 8000830:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000832:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8000834:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000838:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800083c:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000840:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000844:	6079      	str	r1, [r7, #4]
 8000846:	f8c7 a020 	str.w	sl, [r7, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800084a:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800084c:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800084e:	6106      	str	r6, [r0, #16]
 8000850:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000852:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000854:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000858:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800085c:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800085e:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000860:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000862:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8000864:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000866:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800086a:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800086e:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8000872:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000874:	f7ff ff34 	bl	80006e0 <chSchWakeupS>
 8000878:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800087c:	4620      	mov	r0, r4
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	bf00      	nop
 8000884:	20002e30 	.word	0x20002e30
 8000888:	08000241 	.word	0x08000241
 800088c:	00000000 	.word	0x00000000

08000890 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000892:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000894:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000896:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8000898:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800089a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800089c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800089e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80008a0:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80008a2:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 80008a4:	4610      	mov	r0, r2
}
 80008a6:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80008a8:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80008aa:	f7ff bcc1 	b.w	8000230 <_port_switch>
 80008ae:	bf00      	nop
 80008b0:	20002e30 	.word	0x20002e30
	...

080008c0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80008c0:	b510      	push	{r4, lr}
 80008c2:	2320      	movs	r3, #32
 80008c4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <chMsgWait+0x38>)
 80008ca:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 80008cc:	4613      	mov	r3, r2
 80008ce:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d008      	beq.n	80008e8 <chMsgWait+0x28>
 80008d6:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80008d8:	240d      	movs	r4, #13
 80008da:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 80008dc:	604b      	str	r3, [r1, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	7704      	strb	r4, [r0, #28]
 80008e2:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return tp;
}
 80008e6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 80008e8:	200e      	movs	r0, #14
 80008ea:	f7ff ffd1 	bl	8000890 <chSchGoSleepS>
 80008ee:	69a2      	ldr	r2, [r4, #24]
 80008f0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80008f2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80008f6:	e7ee      	b.n	80008d6 <chMsgWait+0x16>
 80008f8:	20002e30 	.word	0x20002e30
 80008fc:	00000000 	.word	0x00000000

08000900 <chSemWait>:
 8000900:	2320      	movs	r3, #32
 8000902:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000906:	6883      	ldr	r3, [r0, #8]
 8000908:	3b01      	subs	r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	6083      	str	r3, [r0, #8]
 800090e:	db04      	blt.n	800091a <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8000910:	2000      	movs	r0, #0
 8000912:	2300      	movs	r3, #0
 8000914:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 8000918:	4770      	bx	lr
 800091a:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 800091c:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 800091e:	4c08      	ldr	r4, [pc, #32]	; (8000940 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000920:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 8000922:	69a2      	ldr	r2, [r4, #24]
 8000924:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000926:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8000928:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 800092a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 800092c:	600a      	str	r2, [r1, #0]
  tqp->p_prev = tp;
 800092e:	605a      	str	r2, [r3, #4]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8000930:	f7ff ffae 	bl	8000890 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8000934:	69a3      	ldr	r3, [r4, #24]
 8000936:	6a18      	ldr	r0, [r3, #32]
 8000938:	2300      	movs	r3, #0
 800093a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 800093e:	bd10      	pop	{r4, pc}
 8000940:	20002e30 	.word	0x20002e30
	...

08000950 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4604      	mov	r4, r0
 8000954:	2320      	movs	r3, #32
 8000956:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800095a:	7f03      	ldrb	r3, [r0, #28]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d007      	beq.n	8000970 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8000962:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000964:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8000966:	2009      	movs	r0, #9
 8000968:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 800096a:	6263      	str	r3, [r4, #36]	; 0x24
 800096c:	f7ff ff90 	bl	8000890 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8000970:	6a25      	ldr	r5, [r4, #32]
 8000972:	2300      	movs	r3, #0
 8000974:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8000978:	4620      	mov	r0, r4
 800097a:	f7ff fde1 	bl	8000540 <chThdRelease>
#endif

  return msg;
}
 800097e:	4628      	mov	r0, r5
 8000980:	bd38      	pop	{r3, r4, r5, pc}
 8000982:	bf00      	nop
 8000984:	20002e30 	.word	0x20002e30
	...

08000990 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000990:	b410      	push	{r4}
 8000992:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000994:	2200      	movs	r2, #0
 8000996:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800099a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800099c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	428a      	cmp	r2, r1
 80009a2:	d2fb      	bcs.n	800099c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80009a4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80009a6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80009a8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80009aa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80009ac:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80009ae:	605c      	str	r4, [r3, #4]

  return tp;
}
 80009b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20002e30 	.word	0x20002e30
 80009bc:	00000000 	.word	0x00000000

080009c0 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80009c0:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 80009c2:	4603      	mov	r3, r0
 80009c4:	6980      	ldr	r0, [r0, #24]
 80009c6:	b510      	push	{r4, lr}
 80009c8:	4282      	cmp	r2, r0
 80009ca:	d01d      	beq.n	8000a08 <chIQPutI+0x48>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80009cc:	6898      	ldr	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 80009ce:	1c54      	adds	r4, r2, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80009d0:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 80009d2:	615c      	str	r4, [r3, #20]

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80009d4:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 80009d6:	7011      	strb	r1, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 80009d8:	6959      	ldr	r1, [r3, #20]
 80009da:	691a      	ldr	r2, [r3, #16]
 80009dc:	4291      	cmp	r1, r2
 80009de:	d20c      	bcs.n	80009fa <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80009e0:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00e      	beq.n	8000a04 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80009e6:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80009e8:	2400      	movs	r4, #0
 80009ea:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 80009ec:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009ee:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80009f0:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 80009f2:	f7ff ffcd 	bl	8000990 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80009f6:	4620      	mov	r0, r4
 80009f8:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d1f0      	bne.n	80009e6 <chIQPutI+0x26>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8000a04:	2000      	movs	r0, #0
 8000a06:	bd10      	pop	{r4, pc}
 8000a08:	6898      	ldr	r0, [r3, #8]
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d0de      	beq.n	80009cc <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8000a0e:	f06f 0003 	mvn.w	r0, #3
 8000a12:	bd10      	pop	{r4, pc}
	...

08000a20 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8000a22:	b570      	push	{r4, r5, r6, lr}
 8000a24:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8000a26:	699c      	ldr	r4, [r3, #24]
 8000a28:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8000a2c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8000a30:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8000a32:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000a34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8000a36:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8000a38:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8000a3a:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 8000a3c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000a3e:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 8000a40:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8000a42:	d007      	beq.n	8000a54 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8000a44:	200c      	movs	r0, #12
 8000a46:	f7ff ff23 	bl	8000890 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8000a4a:	6a20      	ldr	r0, [r4, #32]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8000a54:	f7ff ff9c 	bl	8000990 <chSchReadyI>
 8000a58:	e7f4      	b.n	8000a44 <chMsgSend+0x24>
 8000a5a:	bf00      	nop
 8000a5c:	20002e30 	.word	0x20002e30

08000a60 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a60:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a62:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a64:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a66:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000a68:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a6a:	d00a      	beq.n	8000a82 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000a6c:	2a0b      	cmp	r2, #11
 8000a6e:	d000      	beq.n	8000a72 <chEvtSignalI+0x12>
 8000a70:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000a72:	6a03      	ldr	r3, [r0, #32]
 8000a74:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d1fa      	bne.n	8000a70 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000a7e:	f7ff bf87 	b.w	8000990 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000a82:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000a84:	4219      	tst	r1, r3
 8000a86:	d1f8      	bne.n	8000a7a <chEvtSignalI+0x1a>
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a90:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000a92:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a94:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a96:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a98:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a9a:	d00d      	beq.n	8000ab8 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000a9c:	68e3      	ldr	r3, [r4, #12]
 8000a9e:	432b      	orrs	r3, r5
 8000aa0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000aa2:	b115      	cbz	r5, 8000aaa <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000aa4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000aa6:	4213      	tst	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000aaa:	6860      	ldr	r0, [r4, #4]
 8000aac:	68a1      	ldr	r1, [r4, #8]
 8000aae:	f7ff ffd7 	bl	8000a60 <chEvtSignalI>
    }
    elp = elp->el_next;
 8000ab2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000ab4:	42a6      	cmp	r6, r4
 8000ab6:	d1f1      	bne.n	8000a9c <chEvtBroadcastFlagsI+0xc>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	bf00      	nop
 8000abc:	0000      	movs	r0, r0
	...

08000ac0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8000ac2:	b570      	push	{r4, r5, r6, lr}
 8000ac4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8000ac6:	6994      	ldr	r4, [r2, #24]
 8000ac8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 8000acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ace:	b1d3      	cbz	r3, 8000b06 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e00b      	b.n	8000aec <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8000ad4:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000ad6:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8000ad8:	4610      	mov	r0, r2
 8000ada:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000adc:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 8000ade:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8000ae0:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8000ae2:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8000ae4:	f7ff ff54 	bl	8000990 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8000ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aea:	b143      	cbz	r3, 8000afe <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000aec:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8000aee:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8000af0:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8000af2:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8000af4:	d1ee      	bne.n	8000ad4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8000af6:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8000af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f6      	bne.n	8000aec <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 8000afe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b00:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8000b02:	f7ff fdc5 	bl	8000690 <chSchRescheduleS>
 8000b06:	2300      	movs	r3, #0
 8000b08:	f383 8811 	msr	BASEPRI, r3
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	bf00      	nop
 8000b10:	20002e30 	.word	0x20002e30
	...

08000b20 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8000b20:	b430      	push	{r4, r5}
 8000b22:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <chMtxUnlockS+0x4c>)
 8000b26:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b28:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000b2a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b2c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b2e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b30:	d017      	beq.n	8000b62 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8000b32:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b34:	b14b      	cbz	r3, 8000b4a <chMtxUnlockS+0x2a>
 8000b36:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d003      	beq.n	8000b44 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8000b3c:	6892      	ldr	r2, [r2, #8]
 8000b3e:	4291      	cmp	r1, r2
 8000b40:	bf38      	it	cc
 8000b42:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8000b44:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f5      	bne.n	8000b36 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8000b4a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000b4c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8000b4e:	6081      	str	r1, [r0, #8]
 8000b50:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8000b52:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000b54:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8000b56:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8000b58:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8000b5a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000b5c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8000b5e:	f7ff bf17 	b.w	8000990 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000b66:	bc30      	pop	{r4, r5}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20002e30 	.word	0x20002e30

08000b70 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000b72:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000b74:	699d      	ldr	r5, [r3, #24]
 8000b76:	2320      	movs	r3, #32
 8000b78:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000b7c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b7e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b80:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000b82:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000b84:	d01d      	beq.n	8000bc2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8000b86:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b88:	b14b      	cbz	r3, 8000b9e <chMtxUnlock+0x2e>
 8000b8a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d003      	beq.n	8000b98 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8000b90:	6892      	ldr	r2, [r2, #8]
 8000b92:	4291      	cmp	r1, r2
 8000b94:	bf38      	it	cc
 8000b96:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8000b98:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f5      	bne.n	8000b8a <chMtxUnlock+0x1a>
 8000b9e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000ba0:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8000ba2:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000ba4:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8000ba6:	60a9      	str	r1, [r5, #8]
 8000ba8:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000baa:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8000bac:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8000bae:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8000bb0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000bb2:	f7ff feed 	bl	8000990 <chSchReadyI>
      chSchRescheduleS();
 8000bb6:	f7ff fd6b 	bl	8000690 <chSchRescheduleS>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f383 8811 	msr	BASEPRI, r3
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	6083      	str	r3, [r0, #8]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f383 8811 	msr	BASEPRI, r3
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	bf00      	nop
 8000bd0:	20002e30 	.word	0x20002e30
	...

08000be0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8000be2:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <chMtxLockS+0xc4>)
 8000be6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d055      	beq.n	8000c98 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8000bec:	68a1      	ldr	r1, [r4, #8]
 8000bee:	6893      	ldr	r3, [r2, #8]
 8000bf0:	4605      	mov	r5, r0
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d906      	bls.n	8000c04 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8000bf6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8000bf8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d033      	beq.n	8000c66 <chMtxLockS+0x86>
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d01d      	beq.n	8000c3e <chMtxLockS+0x5e>
 8000c02:	b19b      	cbz	r3, 8000c2c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000c04:	462b      	mov	r3, r5
 8000c06:	e003      	b.n	8000c10 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c08:	6899      	ldr	r1, [r3, #8]
 8000c0a:	68a2      	ldr	r2, [r4, #8]
 8000c0c:	4291      	cmp	r1, r2
 8000c0e:	d302      	bcc.n	8000c16 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000c10:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c12:	429d      	cmp	r5, r3
 8000c14:	d1f8      	bne.n	8000c08 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000c16:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000c18:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000c1a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000c1c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000c1e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8000c20:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8000c22:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8000c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8000c28:	f7ff be32 	b.w	8000890 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c2c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8000c30:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8000c32:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	6053      	str	r3, [r2, #4]
 8000c38:	f7ff feaa 	bl	8000990 <chSchReadyI>
 8000c3c:	e7e2      	b.n	8000c04 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c3e:	6817      	ldr	r7, [r2, #0]
 8000c40:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8000c42:	6a16      	ldr	r6, [r2, #32]
 8000c44:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000c46:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000c48:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	e002      	b.n	8000c54 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c4e:	6898      	ldr	r0, [r3, #8]
 8000c50:	4288      	cmp	r0, r1
 8000c52:	d302      	bcc.n	8000c5a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000c54:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d1f9      	bne.n	8000c4e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000c5a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000c5c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8000c5e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8000c60:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	e7ce      	b.n	8000c04 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c66:	6817      	ldr	r7, [r2, #0]
 8000c68:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8000c6a:	6a16      	ldr	r6, [r2, #32]
 8000c6c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000c6e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000c70:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	e002      	b.n	8000c7c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c76:	6898      	ldr	r0, [r3, #8]
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	d302      	bcc.n	8000c82 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8000c7c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	d1f9      	bne.n	8000c76 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000c82:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000c84:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8000c86:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8000c88:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8000c8a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8000c8c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8000c8e:	68a1      	ldr	r1, [r4, #8]
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d3af      	bcc.n	8000bf6 <chMtxLockS+0x16>
 8000c96:	e7b5      	b.n	8000c04 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8000c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8000c9a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8000c9c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8000c9e:	63a0      	str	r0, [r4, #56]	; 0x38
 8000ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20002e30 	.word	0x20002e30
	...

08000cb0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8000cb0:	b508      	push	{r3, lr}
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8000cb8:	f7ff ff92 	bl	8000be0 <chMtxLockS>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f383 8811 	msr	BASEPRI, r3
 8000cc2:	bd08      	pop	{r3, pc}
	...

08000cd0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000cd0:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8000cd2:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	6083      	str	r3, [r0, #8]
 8000cda:	dd00      	ble.n	8000cde <chSemSignalI+0xe>
 8000cdc:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000cde:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8000ce0:	b410      	push	{r4}

  tqp->p_next = tp->p_next;
 8000ce2:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	6011      	str	r1, [r2, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000ce8:	604a      	str	r2, [r1, #4]
 8000cea:	621c      	str	r4, [r3, #32]
    (void) chSchReadyI(tp);
 8000cec:	4618      	mov	r0, r3
  }
}
 8000cee:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8000cf2:	f7ff be4d 	b.w	8000990 <chSchReadyI>
 8000cf6:	bf00      	nop
	...

08000d00 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8000d00:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8000d02:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8000d04:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8000d06:	3501      	adds	r5, #1
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	dc0c      	bgt.n	8000d26 <chSemResetI+0x26>
 8000d0c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000d0e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8000d12:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000d14:	3501      	adds	r5, #1

  tqp->p_prev = tp->p_prev;
 8000d16:	6843      	ldr	r3, [r0, #4]
 8000d18:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 8000d1a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000d1c:	f7ff fe38 	bl	8000990 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000d20:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8000d22:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 8000d24:	d1f5      	bne.n	8000d12 <chSemResetI+0x12>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d30 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8000d30:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <chThdExitS+0x3c>)
 8000d34:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000d38:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8000d3c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8000d3e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000d40:	d007      	beq.n	8000d52 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000d42:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000d44:	4618      	mov	r0, r3
 8000d46:	6262      	str	r2, [r4, #36]	; 0x24
 8000d48:	f7ff fe22 	bl	8000990 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000d4e:	42ab      	cmp	r3, r5
 8000d50:	d1f7      	bne.n	8000d42 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000d52:	7f63      	ldrb	r3, [r4, #29]
 8000d54:	079b      	lsls	r3, r3, #30
 8000d56:	d104      	bne.n	8000d62 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8000d58:	6922      	ldr	r2, [r4, #16]
 8000d5a:	6963      	ldr	r3, [r4, #20]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	6922      	ldr	r2, [r4, #16]
 8000d60:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000d62:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8000d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000d68:	f7ff bd92 	b.w	8000890 <chSchGoSleepS>
 8000d6c:	20002e30 	.word	0x20002e30

08000d70 <chThdExit>:
 8000d70:	2320      	movs	r3, #32
 8000d72:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8000d76:	f7ff bfdb 	b.w	8000d30 <chThdExitS>
 8000d7a:	bf00      	nop
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000d82:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000d84:	69da      	ldr	r2, [r3, #28]
 8000d86:	4282      	cmp	r2, r0
 8000d88:	d00f      	beq.n	8000daa <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000d8a:	6802      	ldr	r2, [r0, #0]
 8000d8c:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000d8e:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000d90:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000d92:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8000d94:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000d96:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000d98:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8000d9a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000d9c:	d003      	beq.n	8000da6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000d9e:	8901      	ldrh	r1, [r0, #8]
 8000da0:	8913      	ldrh	r3, [r2, #8]
 8000da2:	440b      	add	r3, r1
 8000da4:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000da6:	bc70      	pop	{r4, r5, r6}
 8000da8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000daa:	4619      	mov	r1, r3
 8000dac:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000dae:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000db0:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000db4:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000db6:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8000db8:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000dba:	d016      	beq.n	8000dea <chVTDoResetI+0x6a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000dbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dc0:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000dc2:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000dc4:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000dc6:	892a      	ldrh	r2, [r5, #8]
 8000dc8:	b289      	uxth	r1, r1
 8000dca:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000dcc:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000dce:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000dd0:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000dd2:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000dd4:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000dd6:	d9e6      	bls.n	8000da6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000ddc:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000dde:	bf98      	it	ls
 8000de0:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000de2:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	6343      	str	r3, [r0, #52]	; 0x34
 8000de8:	e7dd      	b.n	8000da6 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	60d8      	str	r0, [r3, #12]
 8000df0:	e7d9      	b.n	8000da6 <chVTDoResetI+0x26>
 8000df2:	bf00      	nop
 8000df4:	20002e30 	.word	0x20002e30
	...

08000e00 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000e02:	4e1e      	ldr	r6, [pc, #120]	; (8000e7c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000e04:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000e08:	46b6      	mov	lr, r6
 8000e0a:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 8000e0e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000e10:	2901      	cmp	r1, #1
 8000e12:	bf98      	it	ls
 8000e14:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000e16:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000e18:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 8000e1a:	60c2      	str	r2, [r0, #12]
 8000e1c:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000e1e:	d01d      	beq.n	8000e5c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000e20:	4419      	add	r1, r3
 8000e22:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8000e24:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000e26:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000e28:	1acb      	subs	r3, r1, r3
 8000e2a:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000e2c:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e2e:	bf38      	it	cc
 8000e30:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d905      	bls.n	8000e42 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000e36:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000e38:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000e3a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 8000e3c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3f9      	bcc.n	8000e36 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000e46:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000e48:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000e4a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8000e4c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8000e4e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8000e50:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000e52:	8922      	ldrh	r2, [r4, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000e58:	84b1      	strh	r1, [r6, #36]	; 0x24
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000e5c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e5e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8000e60:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e64:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000e66:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8000e68:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8000e6a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000e6c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000e6e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8000e70:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e72:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000e74:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e78:	60fd      	str	r5, [r7, #12]
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	20002e30 	.word	0x20002e30

08000e80 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000e84:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000e86:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000e88:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000e8a:	d012      	beq.n	8000eb2 <chSchGoSleepTimeoutS+0x32>
 8000e8c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000e8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ec0 <chSchGoSleepTimeoutS+0x40>)
 8000e90:	a801      	add	r0, sp, #4
 8000e92:	69a3      	ldr	r3, [r4, #24]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <chSchGoSleepTimeoutS+0x44>)
 8000e96:	f7ff ffb3 	bl	8000e00 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f7ff fcf8 	bl	8000890 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000ea0:	9b04      	ldr	r3, [sp, #16]
 8000ea2:	b113      	cbz	r3, 8000eaa <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8000ea4:	a801      	add	r0, sp, #4
 8000ea6:	f7ff ff6b 	bl	8000d80 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000eaa:	69a3      	ldr	r3, [r4, #24]
}
 8000eac:	6a18      	ldr	r0, [r3, #32]
 8000eae:	b007      	add	sp, #28
 8000eb0:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000eb2:	f7ff fced 	bl	8000890 <chSchGoSleepS>
 8000eb6:	4c02      	ldr	r4, [pc, #8]	; (8000ec0 <chSchGoSleepTimeoutS+0x40>)
  }

  return currp->p_u.rdymsg;
 8000eb8:	69a3      	ldr	r3, [r4, #24]
}
 8000eba:	6a18      	ldr	r0, [r3, #32]
 8000ebc:	b007      	add	sp, #28
 8000ebe:	bd30      	pop	{r4, r5, pc}
 8000ec0:	20002e30 	.word	0x20002e30
 8000ec4:	08000421 	.word	0x08000421
	...

08000ed0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000ed0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8000ed2:	6880      	ldr	r0, [r0, #8]
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	db01      	blt.n	8000ee0 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8000edc:	2000      	movs	r0, #0
 8000ede:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8000ee0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8000ee2:	b161      	cbz	r1, 8000efe <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000ee6:	2005      	movs	r0, #5
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8000ee8:	6992      	ldr	r2, [r2, #24]
 8000eea:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000eec:	685c      	ldr	r4, [r3, #4]
 8000eee:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8000ef2:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8000ef4:	605a      	str	r2, [r3, #4]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8000efa:	f7ff bfc1 	b.w	8000e80 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8000efe:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f00:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002e30 	.word	0x20002e30

08000f10 <chMBFetch>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	2320      	movs	r3, #32
 8000f14:	4604      	mov	r4, r0
 8000f16:	460e      	mov	r6, r1
 8000f18:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	3010      	adds	r0, #16
 8000f20:	f7ff ffd6 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8000f24:	4605      	mov	r5, r0
 8000f26:	b980      	cbnz	r0, 8000f4a <chMBFetch+0x3a>
    *msgp = *mbp->mb_rdptr++;
 8000f28:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8000f2a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8000f30:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8000f32:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8000f34:	bf28      	it	cs
 8000f36:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8000f38:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 8000f3a:	f104 001c 	add.w	r0, r4, #28

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8000f3e:	bf28      	it	cs
 8000f40:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8000f42:	f7ff fec5 	bl	8000cd0 <chSemSignalI>
    chSchRescheduleS();
 8000f46:	f7ff fba3 	bl	8000690 <chSchRescheduleS>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8000f50:	4628      	mov	r0, r5
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f60 <chMBPost>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	2320      	movs	r3, #32
 8000f64:	4604      	mov	r4, r0
 8000f66:	460e      	mov	r6, r1
 8000f68:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	301c      	adds	r0, #28
 8000f70:	f7ff ffae 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8000f74:	4605      	mov	r5, r0
 8000f76:	b978      	cbnz	r0, 8000f98 <chMBPost+0x38>
    *mbp->mb_wrptr++ = msg;
 8000f78:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8000f7a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8000f7c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8000f7e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8000f80:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8000f82:	bf28      	it	cs
 8000f84:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8000f86:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8000f88:	f104 0010 	add.w	r0, r4, #16

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8000f8c:	bf28      	it	cs
 8000f8e:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8000f90:	f7ff fe9e 	bl	8000cd0 <chSemSignalI>
    chSchRescheduleS();
 8000f94:	f7ff fb7c 	bl	8000690 <chSchRescheduleS>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	bf00      	nop
	...

08000fb0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000fb0:	b169      	cbz	r1, 8000fce <chThdEnqueueTimeoutS+0x1e>
 8000fb2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000fb6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000fb8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000fba:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8000fc2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8000fc4:	6053      	str	r3, [r2, #4]
}
 8000fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000fca:	f7ff bf59 	b.w	8000e80 <chSchGoSleepTimeoutS>
}
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	4770      	bx	lr
 8000fd4:	20002e30 	.word	0x20002e30
	...

08000fe0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	4689      	mov	r9, r1
 8000fea:	4693      	mov	fp, r2
 8000fec:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000fee:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000ff2:	2720      	movs	r7, #32
 8000ff4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	46b2      	mov	sl, r6
 8000ffc:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000ffe:	f1b8 0f00 	cmp.w	r8, #0
 8001002:	d007      	beq.n	8001014 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001004:	4620      	mov	r0, r4
 8001006:	47c0      	blx	r8
 8001008:	e004      	b.n	8001014 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff ffcf 	bl	8000fb0 <chThdEnqueueTimeoutS>
 8001012:	b9d0      	cbnz	r0, 800104a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001014:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001016:	2f00      	cmp	r7, #0
 8001018:	d0f7      	beq.n	800100a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800101a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800101c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800101e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001020:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001022:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001024:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001026:	7813      	ldrb	r3, [r2, #0]
 8001028:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800102c:	6923      	ldr	r3, [r4, #16]
 800102e:	69a2      	ldr	r2, [r4, #24]
 8001030:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001032:	bf24      	itt	cs
 8001034:	68e3      	ldrcs	r3, [r4, #12]
 8001036:	61a3      	strcs	r3, [r4, #24]
 8001038:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800103c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800103e:	45b3      	cmp	fp, r6
 8001040:	d005      	beq.n	800104e <chIQReadTimeout+0x6e>
 8001042:	9b01      	ldr	r3, [sp, #4]
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	e7d9      	b.n	8000ffe <chIQReadTimeout+0x1e>
 800104a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800104e:	4630      	mov	r0, r6
 8001050:	b003      	add	sp, #12
 8001052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001056:	bf00      	nop
	...

08001060 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	2320      	movs	r3, #32
 8001064:	460e      	mov	r6, r1
 8001066:	4604      	mov	r4, r0
 8001068:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800106c:	69c3      	ldr	r3, [r0, #28]
 800106e:	b13b      	cbz	r3, 8001080 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8001070:	4798      	blx	r3
 8001072:	e005      	b.n	8001080 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001074:	4620      	mov	r0, r4
 8001076:	4631      	mov	r1, r6
 8001078:	f7ff ff9a 	bl	8000fb0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800107c:	2800      	cmp	r0, #0
 800107e:	db13      	blt.n	80010a8 <chIQGetTimeout+0x48>
 8001080:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001082:	2d00      	cmp	r5, #0
 8001084:	d0f6      	beq.n	8001074 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001086:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001088:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800108a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800108c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800108e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001090:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001092:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001094:	bf28      	it	cs
 8001096:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001098:	61a2      	str	r2, [r4, #24]
 800109a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800109c:	bf28      	it	cs
 800109e:	61a3      	strcs	r3, [r4, #24]
 80010a0:	2300      	movs	r3, #0
 80010a2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
 80010a8:	f385 8811 	msr	BASEPRI, r5
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	bf00      	nop

080010b0 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 80010b0:	b508      	push	{r3, lr}
 80010b2:	2320      	movs	r3, #32
 80010b4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chSysLock();
  time -= chVTGetSystemTimeX();
 80010be:	1a41      	subs	r1, r0, r1
 80010c0:	b289      	uxth	r1, r1
  if (time > (systime_t)0) {
 80010c2:	b111      	cbz	r1, 80010ca <chThdSleepUntil+0x1a>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80010c4:	2008      	movs	r0, #8
 80010c6:	f7ff fedb 	bl	8000e80 <chSchGoSleepTimeoutS>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	bd08      	pop	{r3, pc}
 80010d2:	bf00      	nop
	...

080010e0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80010e0:	b508      	push	{r3, lr}
 80010e2:	4601      	mov	r1, r0
 80010e4:	2320      	movs	r3, #32
 80010e6:	f383 8811 	msr	BASEPRI, r3
 80010ea:	2008      	movs	r0, #8
 80010ec:	f7ff fec8 	bl	8000e80 <chSchGoSleepTimeoutS>
 80010f0:	2300      	movs	r3, #0
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	bd08      	pop	{r3, pc}
	...

08001100 <chSysRestoreStatusX.part.3.lto_priv.78>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001100:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001102:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001106:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800110a:	b11c      	cbz	r4, 8001114 <chSysRestoreStatusX.part.3.lto_priv.78+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800110c:	2300      	movs	r3, #0
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001114:	f7ff fabc 	bl	8000690 <chSchRescheduleS>
 8001118:	f384 8811 	msr	BASEPRI, r4
 800111c:	bd10      	pop	{r4, pc}
 800111e:	bf00      	nop

08001120 <chSysGetStatusAndLockX.part.2.lto_priv.79>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001120:	f3ef 8305 	mrs	r3, IPSR
 8001124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001128:	b91b      	cbnz	r3, 8001132 <chSysGetStatusAndLockX.part.2.lto_priv.79+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800112a:	2320      	movs	r3, #32
 800112c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8001130:	4770      	bx	lr
 8001132:	2320      	movs	r3, #32
 8001134:	f383 8811 	msr	BASEPRI, r3
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0000      	movs	r0, r0
	...

08001140 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001140:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001142:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001144:	d510      	bpl.n	8001168 <chSysIntegrityCheckI+0x28>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <chSysIntegrityCheckI+0xb0>)
 8001148:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800114a:	4291      	cmp	r1, r2
 800114c:	d03e      	beq.n	80011cc <chSysIntegrityCheckI+0x8c>
 800114e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8001150:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 8001152:	3301      	adds	r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001154:	4291      	cmp	r1, r2
 8001156:	d1fb      	bne.n	8001150 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 8001158:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800115a:	428c      	cmp	r4, r1
 800115c:	d032      	beq.n	80011c4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_prev;
 800115e:	6864      	ldr	r4, [r4, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 8001160:	3b01      	subs	r3, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8001162:	4294      	cmp	r4, r2
 8001164:	d1fb      	bne.n	800115e <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001166:	bb6b      	cbnz	r3, 80011c4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001168:	0783      	lsls	r3, r0, #30
 800116a:	d512      	bpl.n	8001192 <chSysIntegrityCheckI+0x52>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <chSysIntegrityCheckI+0xb0>)
 800116e:	4614      	mov	r4, r2
 8001170:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001174:	42a1      	cmp	r1, r4
 8001176:	d02f      	beq.n	80011d8 <chSysIntegrityCheckI+0x98>
 8001178:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 800117a:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 800117c:	3301      	adds	r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800117e:	42a1      	cmp	r1, r4
 8001180:	d1fb      	bne.n	800117a <chSysIntegrityCheckI+0x3a>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8001182:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001184:	428a      	cmp	r2, r1
 8001186:	d01d      	beq.n	80011c4 <chSysIntegrityCheckI+0x84>
      n--;
      vtp = vtp->vt_prev;
 8001188:	6852      	ldr	r2, [r2, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 800118a:	3b01      	subs	r3, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800118c:	42a2      	cmp	r2, r4
 800118e:	d1fb      	bne.n	8001188 <chSysIntegrityCheckI+0x48>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001190:	b9c3      	cbnz	r3, 80011c4 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001192:	f010 0004 	ands.w	r0, r0, #4
 8001196:	d012      	beq.n	80011be <chSysIntegrityCheckI+0x7e>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <chSysIntegrityCheckI+0xb0>)
 800119a:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800119c:	4293      	cmp	r3, r2
 800119e:	d021      	beq.n	80011e4 <chSysIntegrityCheckI+0xa4>
 80011a0:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 80011a2:	691b      	ldr	r3, [r3, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 80011a4:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d1fb      	bne.n	80011a2 <chSysIntegrityCheckI+0x62>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80011aa:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80011ac:	4299      	cmp	r1, r3
 80011ae:	d009      	beq.n	80011c4 <chSysIntegrityCheckI+0x84>
      n--;
      tp = tp->p_older;
 80011b0:	6949      	ldr	r1, [r1, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 80011b2:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80011b4:	4291      	cmp	r1, r2
 80011b6:	d1fb      	bne.n	80011b0 <chSysIntegrityCheckI+0x70>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80011b8:	3000      	adds	r0, #0
 80011ba:	bf18      	it	ne
 80011bc:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80011be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011c2:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 80011c4:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80011c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ca:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80011cc:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80011ce:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80011d0:	bf18      	it	ne
 80011d2:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80011d4:	d1c3      	bne.n	800115e <chSysIntegrityCheckI+0x1e>
 80011d6:	e7c7      	b.n	8001168 <chSysIntegrityCheckI+0x28>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 80011d8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80011da:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 80011dc:	bf18      	it	ne
 80011de:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80011e0:	d1d2      	bne.n	8001188 <chSysIntegrityCheckI+0x48>
 80011e2:	e7d6      	b.n	8001192 <chSysIntegrityCheckI+0x52>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80011e4:	6959      	ldr	r1, [r3, #20]
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80011e6:	2000      	movs	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80011e8:	4299      	cmp	r1, r3
 80011ea:	d1e1      	bne.n	80011b0 <chSysIntegrityCheckI+0x70>
 80011ec:	e7e7      	b.n	80011be <chSysIntegrityCheckI+0x7e>
 80011ee:	bf00      	nop
 80011f0:	20002e30 	.word	0x20002e30
	...

08001200 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001200:	e7fe      	b.n	8001200 <BusFault_Handler>
 8001202:	bf00      	nop
	...

08001210 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001210:	b4f0      	push	{r4, r5, r6, r7}
  const ram_init_area_t *rap = ram_areas;
 8001212:	4e11      	ldr	r6, [pc, #68]	; (8001258 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001214:	2500      	movs	r5, #0
 8001216:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
  const ram_init_area_t *rap = ram_areas;

#if CRT1_AREAS_NUMBER > 0
  do {
    uint32_t *tp = rap->init_text_area;
 800121a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800121e:	42a3      	cmp	r3, r4
 8001220:	d20d      	bcs.n	800123e <__init_ram_areas+0x2e>
 8001222:	461a      	mov	r2, r3
 8001224:	3904      	subs	r1, #4
      *p = *tp;
 8001226:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800122a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800122e:	42a2      	cmp	r2, r4
 8001230:	d3f9      	bcc.n	8001226 <__init_ram_areas+0x16>
 8001232:	43da      	mvns	r2, r3
 8001234:	4414      	add	r4, r2
 8001236:	f024 0403 	bic.w	r4, r4, #3
 800123a:	3404      	adds	r4, #4
 800123c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800123e:	68f2      	ldr	r2, [r6, #12]
 8001240:	4293      	cmp	r3, r2
 8001242:	d203      	bcs.n	800124c <__init_ram_areas+0x3c>
      *p = 0;
 8001244:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001248:	4293      	cmp	r3, r2
 800124a:	d3fb      	bcc.n	8001244 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800124c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800124e:	42be      	cmp	r6, r7
 8001250:	d3e3      	bcc.n	800121a <__init_ram_areas+0xa>
#endif
}
 8001252:	bcf0      	pop	{r4, r5, r6, r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	080070c0 	.word	0x080070c0
 800125c:	00000000 	.word	0x00000000

08001260 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001260:	e7fe      	b.n	8001260 <__default_exit>
 8001262:	bf00      	nop
	...

08001270 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
	...

08001280 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
	...

08001290 <mtx5_setup.lto_priv.107>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <mtx5_setup.lto_priv.107+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001292:	2200      	movs	r2, #0
 8001294:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001296:	605b      	str	r3, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	4770      	bx	lr
 800129c:	20000964 	.word	0x20000964

080012a0 <mtx4_setup.lto_priv.105>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <mtx4_setup.lto_priv.105+0x14>)
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <mtx4_setup.lto_priv.105+0x18>)
 80012a4:	2100      	movs	r1, #0
 80012a6:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012a8:	6052      	str	r2, [r2, #4]
 80012aa:	6091      	str	r1, [r2, #8]
 80012ac:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012ae:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012b0:	605b      	str	r3, [r3, #4]
 80012b2:	4770      	bx	lr
 80012b4:	20000964 	.word	0x20000964
 80012b8:	20000954 	.word	0x20000954
 80012bc:	00000000 	.word	0x00000000

080012c0 <mtx1_setup.lto_priv.103>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <mtx1_setup.lto_priv.103+0xc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012c6:	605b      	str	r3, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	4770      	bx	lr
 80012cc:	20000964 	.word	0x20000964

080012d0 <sem3_setup.lto_priv.100>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <sem3_setup.lto_priv.100+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80012d2:	2200      	movs	r2, #0
 80012d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012d6:	605b      	str	r3, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	4770      	bx	lr
 80012dc:	20000a14 	.word	0x20000a14

080012e0 <sem2_setup.lto_priv.98>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <sem2_setup.lto_priv.98+0xc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012e6:	605b      	str	r3, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	4770      	bx	lr
 80012ec:	20000a14 	.word	0x20000a14

080012f0 <sem1_setup.lto_priv.96>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <sem1_setup.lto_priv.96+0xc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80012f6:	605b      	str	r3, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	4770      	bx	lr
 80012fc:	20000a14 	.word	0x20000a14

08001300 <mtx4_execute.lto_priv.106>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8001300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001304:	4d84      	ldr	r5, [pc, #528]	; (8001518 <mtx4_execute.lto_priv.106+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <mtx4_execute.lto_priv.106+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001308:	69aa      	ldr	r2, [r5, #24]
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 800130a:	b082      	sub	sp, #8
 800130c:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800130e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8001312:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001314:	463a      	mov	r2, r7
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4881      	ldr	r0, [pc, #516]	; (8001520 <mtx4_execute.lto_priv.106+0x220>)
 800131a:	4b82      	ldr	r3, [pc, #520]	; (8001524 <mtx4_execute.lto_priv.106+0x224>)
 800131c:	f7ff fa78 	bl	8000810 <chThdCreateStatic>
 8001320:	4e81      	ldr	r6, [pc, #516]	; (8001528 <mtx4_execute.lto_priv.106+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8001322:	4b82      	ldr	r3, [pc, #520]	; (800152c <mtx4_execute.lto_priv.106+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8001324:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8001328:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 800132a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800132e:	4642      	mov	r2, r8
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	487f      	ldr	r0, [pc, #508]	; (8001530 <mtx4_execute.lto_priv.106+0x230>)
 8001334:	4b7f      	ldr	r3, [pc, #508]	; (8001534 <mtx4_execute.lto_priv.106+0x234>)
 8001336:	f7ff fa6b 	bl	8000810 <chThdCreateStatic>
 800133a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 800133c:	487e      	ldr	r0, [pc, #504]	; (8001538 <mtx4_execute.lto_priv.106+0x238>)
 800133e:	f7ff fcb7 	bl	8000cb0 <chMtxLock>
 8001342:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8001344:	2001      	movs	r0, #1
 8001346:	6899      	ldr	r1, [r3, #8]
 8001348:	1a61      	subs	r1, r4, r1
 800134a:	fab1 f181 	clz	r1, r1
 800134e:	0949      	lsrs	r1, r1, #5
 8001350:	f001 ffce 	bl	80032f0 <_test_assert>
 8001354:	b110      	cbz	r0, 800135c <mtx4_execute.lto_priv.106+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8001356:	b002      	add	sp, #8
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 800135c:	20c8      	movs	r0, #200	; 0xc8
 800135e:	f7ff febf 	bl	80010e0 <chThdSleep>
 8001362:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8001364:	2002      	movs	r0, #2
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	1a79      	subs	r1, r7, r1
 800136a:	fab1 f181 	clz	r1, r1
 800136e:	0949      	lsrs	r1, r1, #5
 8001370:	f001 ffbe 	bl	80032f0 <_test_assert>
 8001374:	2800      	cmp	r0, #0
 8001376:	d1ee      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chMtxLock(&m1);
 8001378:	4870      	ldr	r0, [pc, #448]	; (800153c <mtx4_execute.lto_priv.106+0x23c>)
 800137a:	f7ff fc99 	bl	8000cb0 <chMtxLock>
 800137e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8001380:	2003      	movs	r0, #3
 8001382:	6899      	ldr	r1, [r3, #8]
 8001384:	1a79      	subs	r1, r7, r1
 8001386:	fab1 f181 	clz	r1, r1
 800138a:	0949      	lsrs	r1, r1, #5
 800138c:	f001 ffb0 	bl	80032f0 <_test_assert>
 8001390:	2800      	cmp	r0, #0
 8001392:	d1e0      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chThdSleepMilliseconds(100);
 8001394:	20c8      	movs	r0, #200	; 0xc8
 8001396:	f7ff fea3 	bl	80010e0 <chThdSleep>
 800139a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800139c:	2004      	movs	r0, #4
 800139e:	6899      	ldr	r1, [r3, #8]
 80013a0:	ebc1 0108 	rsb	r1, r1, r8
 80013a4:	fab1 f181 	clz	r1, r1
 80013a8:	0949      	lsrs	r1, r1, #5
 80013aa:	f001 ffa1 	bl	80032f0 <_test_assert>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d1d1      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chMtxUnlock(&m1);
 80013b2:	4862      	ldr	r0, [pc, #392]	; (800153c <mtx4_execute.lto_priv.106+0x23c>)
 80013b4:	f7ff fbdc 	bl	8000b70 <chMtxUnlock>
 80013b8:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 80013ba:	2005      	movs	r0, #5
 80013bc:	6899      	ldr	r1, [r3, #8]
 80013be:	1a79      	subs	r1, r7, r1
 80013c0:	fab1 f181 	clz	r1, r1
 80013c4:	0949      	lsrs	r1, r1, #5
 80013c6:	f001 ff93 	bl	80032f0 <_test_assert>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d1c3      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chThdSleepMilliseconds(100);
 80013ce:	20c8      	movs	r0, #200	; 0xc8
 80013d0:	f7ff fe86 	bl	80010e0 <chThdSleep>
 80013d4:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80013d6:	2006      	movs	r0, #6
 80013d8:	6899      	ldr	r1, [r3, #8]
 80013da:	1a79      	subs	r1, r7, r1
 80013dc:	fab1 f181 	clz	r1, r1
 80013e0:	0949      	lsrs	r1, r1, #5
 80013e2:	f001 ff85 	bl	80032f0 <_test_assert>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d1b5      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chMtxUnlockAll();
 80013ea:	f7ff fb69 	bl	8000ac0 <chMtxUnlockAll>
 80013ee:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80013f0:	2007      	movs	r0, #7
 80013f2:	6899      	ldr	r1, [r3, #8]
 80013f4:	1a61      	subs	r1, r4, r1
 80013f6:	fab1 f181 	clz	r1, r1
 80013fa:	0949      	lsrs	r1, r1, #5
 80013fc:	f001 ff78 	bl	80032f0 <_test_assert>
 8001400:	2800      	cmp	r0, #0
 8001402:	d1a8      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  test_wait_threads();
 8001404:	f001 fef4 	bl	80031f0 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <mtx4_execute.lto_priv.106+0x240>)
 800140a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	463a      	mov	r2, r7
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <mtx4_execute.lto_priv.106+0x224>)
 8001414:	4842      	ldr	r0, [pc, #264]	; (8001520 <mtx4_execute.lto_priv.106+0x220>)
 8001416:	f7ff f9fb 	bl	8000810 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <mtx4_execute.lto_priv.106+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 800141c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800141e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4642      	mov	r2, r8
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <mtx4_execute.lto_priv.106+0x234>)
 8001428:	4841      	ldr	r0, [pc, #260]	; (8001530 <mtx4_execute.lto_priv.106+0x230>)
 800142a:	f7ff f9f1 	bl	8000810 <chThdCreateStatic>
 800142e:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8001430:	4841      	ldr	r0, [pc, #260]	; (8001538 <mtx4_execute.lto_priv.106+0x238>)
 8001432:	f7ff fc3d 	bl	8000cb0 <chMtxLock>
 8001436:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8001438:	2008      	movs	r0, #8
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	1a61      	subs	r1, r4, r1
 800143e:	fab1 f181 	clz	r1, r1
 8001442:	0949      	lsrs	r1, r1, #5
 8001444:	f001 ff54 	bl	80032f0 <_test_assert>
 8001448:	2800      	cmp	r0, #0
 800144a:	d184      	bne.n	8001356 <mtx4_execute.lto_priv.106+0x56>
  chThdSleepMilliseconds(100);
 800144c:	20c8      	movs	r0, #200	; 0xc8
 800144e:	f7ff fe47 	bl	80010e0 <chThdSleep>
 8001452:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8001454:	2009      	movs	r0, #9
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	1a7b      	subs	r3, r7, r1
 800145a:	4259      	negs	r1, r3
 800145c:	4159      	adcs	r1, r3
 800145e:	f001 ff47 	bl	80032f0 <_test_assert>
 8001462:	2800      	cmp	r0, #0
 8001464:	f47f af77 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
  chMtxLock(&m1);
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <mtx4_execute.lto_priv.106+0x23c>)
 800146a:	f7ff fc21 	bl	8000cb0 <chMtxLock>
 800146e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8001470:	200a      	movs	r0, #10
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	ebc1 0c07 	rsb	ip, r1, r7
 8001478:	f1dc 0100 	rsbs	r1, ip, #0
 800147c:	eb41 010c 	adc.w	r1, r1, ip
 8001480:	f001 ff36 	bl	80032f0 <_test_assert>
 8001484:	2800      	cmp	r0, #0
 8001486:	f47f af66 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
  chThdSleepMilliseconds(100);
 800148a:	20c8      	movs	r0, #200	; 0xc8
 800148c:	f7ff fe28 	bl	80010e0 <chThdSleep>
 8001490:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8001492:	200b      	movs	r0, #11
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	ebc1 0e08 	rsb	lr, r1, r8
 800149a:	f1de 0100 	rsbs	r1, lr, #0
 800149e:	eb41 010e 	adc.w	r1, r1, lr
 80014a2:	f001 ff25 	bl	80032f0 <_test_assert>
 80014a6:	4606      	mov	r6, r0
 80014a8:	2800      	cmp	r0, #0
 80014aa:	f47f af54 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
 80014ae:	2320      	movs	r3, #32
 80014b0:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 80014b4:	4821      	ldr	r0, [pc, #132]	; (800153c <mtx4_execute.lto_priv.106+0x23c>)
 80014b6:	f7ff fb33 	bl	8000b20 <chMtxUnlockS>
  chSchRescheduleS();
 80014ba:	f7ff f8e9 	bl	8000690 <chSchRescheduleS>
 80014be:	f386 8811 	msr	BASEPRI, r6
 80014c2:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 80014c4:	200c      	movs	r0, #12
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	1a7e      	subs	r6, r7, r1
 80014ca:	4271      	negs	r1, r6
 80014cc:	4171      	adcs	r1, r6
 80014ce:	f001 ff0f 	bl	80032f0 <_test_assert>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	f47f af3f 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
  chThdSleepMilliseconds(100);
 80014d8:	20c8      	movs	r0, #200	; 0xc8
 80014da:	f7ff fe01 	bl	80010e0 <chThdSleep>
 80014de:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80014e0:	200d      	movs	r0, #13
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	1a7a      	subs	r2, r7, r1
 80014e6:	4251      	negs	r1, r2
 80014e8:	4151      	adcs	r1, r2
 80014ea:	f001 ff01 	bl	80032f0 <_test_assert>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	f47f af31 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
  chMtxUnlockAll();
 80014f4:	f7ff fae4 	bl	8000ac0 <chMtxUnlockAll>
 80014f8:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 80014fa:	200e      	movs	r0, #14
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	1a63      	subs	r3, r4, r1
 8001500:	4259      	negs	r1, r3
 8001502:	4159      	adcs	r1, r3
 8001504:	f001 fef4 	bl	80032f0 <_test_assert>
 8001508:	2800      	cmp	r0, #0
 800150a:	f47f af24 	bne.w	8001356 <mtx4_execute.lto_priv.106+0x56>
  test_wait_threads();
}
 800150e:	b002      	add	sp, #8
 8001510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8001514:	f001 be6c 	b.w	80031f0 <test_wait_threads>
 8001518:	20002e30 	.word	0x20002e30
 800151c:	08007140 	.word	0x08007140
 8001520:	20002fa8 	.word	0x20002fa8
 8001524:	08001551 	.word	0x08001551
 8001528:	20000ec0 	.word	0x20000ec0
 800152c:	08007144 	.word	0x08007144
 8001530:	200030f0 	.word	0x200030f0
 8001534:	08001571 	.word	0x08001571
 8001538:	20000954 	.word	0x20000954
 800153c:	20000964 	.word	0x20000964
 8001540:	08008308 	.word	0x08008308
 8001544:	080084b0 	.word	0x080084b0
	...

08001550 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8001550:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8001552:	4c06      	ldr	r4, [pc, #24]	; (800156c <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f7ff fdc3 	bl	80010e0 <chThdSleep>
  chMtxLock(&m2);
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fba8 	bl	8000cb0 <chMtxLock>
  chMtxUnlock(&m2);
 8001560:	4620      	mov	r0, r4
}
 8001562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 8001566:	f7ff bb03 	b.w	8000b70 <chMtxUnlock>
 800156a:	bf00      	nop
 800156c:	20000954 	.word	0x20000954

08001570 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8001570:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8001572:	4c06      	ldr	r4, [pc, #24]	; (800158c <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8001574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001578:	f7ff fdb2 	bl	80010e0 <chThdSleep>
  chMtxLock(&m1);
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fb97 	bl	8000cb0 <chMtxLock>
  chMtxUnlock(&m1);
 8001582:	4620      	mov	r0, r4
}
 8001584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8001588:	f7ff baf2 	b.w	8000b70 <chMtxUnlock>
 800158c:	20000964 	.word	0x20000964

08001590 <mtx1_execute.lto_priv.104>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8001590:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001592:	4e29      	ldr	r6, [pc, #164]	; (8001638 <mtx1_execute.lto_priv.104+0xa8>)
 8001594:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001596:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8001598:	4828      	ldr	r0, [pc, #160]	; (800163c <mtx1_execute.lto_priv.104+0xac>)
 800159a:	689c      	ldr	r4, [r3, #8]
 800159c:	f7ff fb88 	bl	8000cb0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <mtx1_execute.lto_priv.104+0xb0>)
 80015a2:	1c62      	adds	r2, r4, #1
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <mtx1_execute.lto_priv.104+0xb4>)
 80015ac:	4826      	ldr	r0, [pc, #152]	; (8001648 <mtx1_execute.lto_priv.104+0xb8>)
 80015ae:	f7ff f92f 	bl	8000810 <chThdCreateStatic>
 80015b2:	4d26      	ldr	r5, [pc, #152]	; (800164c <mtx1_execute.lto_priv.104+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <mtx1_execute.lto_priv.104+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80015b6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80015b8:	1ca2      	adds	r2, r4, #2
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <mtx1_execute.lto_priv.104+0xb4>)
 80015c2:	4824      	ldr	r0, [pc, #144]	; (8001654 <mtx1_execute.lto_priv.104+0xc4>)
 80015c4:	f7ff f924 	bl	8000810 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <mtx1_execute.lto_priv.104+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80015ca:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80015cc:	1ce2      	adds	r2, r4, #3
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <mtx1_execute.lto_priv.104+0xb4>)
 80015d6:	4821      	ldr	r0, [pc, #132]	; (800165c <mtx1_execute.lto_priv.104+0xcc>)
 80015d8:	f7ff f91a 	bl	8000810 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <mtx1_execute.lto_priv.104+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80015de:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80015e0:	1d22      	adds	r2, r4, #4
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <mtx1_execute.lto_priv.104+0xb4>)
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <mtx1_execute.lto_priv.104+0xd4>)
 80015ec:	f7ff f910 	bl	8000810 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <mtx1_execute.lto_priv.104+0xd8>)
 80015f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015f6:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80015f8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <mtx1_execute.lto_priv.104+0xdc>)
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <mtx1_execute.lto_priv.104+0xb4>)
 8001600:	f7ff f906 	bl	8000810 <chThdCreateStatic>
 8001604:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <mtx1_execute.lto_priv.104+0xac>)
 8001608:	f7ff fab2 	bl	8000b70 <chMtxUnlock>
  test_wait_threads();
 800160c:	f001 fdf0 	bl	80031f0 <test_wait_threads>
 8001610:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8001612:	2001      	movs	r0, #1
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	1a61      	subs	r1, r4, r1
 8001618:	fab1 f181 	clz	r1, r1
 800161c:	0949      	lsrs	r1, r1, #5
 800161e:	f001 fe67 	bl	80032f0 <_test_assert>
 8001622:	b108      	cbz	r0, 8001628 <mtx1_execute.lto_priv.104+0x98>
  test_assert_sequence(2, "ABCDE");
}
 8001624:	b002      	add	sp, #8
 8001626:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8001628:	4911      	ldr	r1, [pc, #68]	; (8001670 <mtx1_execute.lto_priv.104+0xe0>)
 800162a:	2002      	movs	r0, #2
}
 800162c:	b002      	add	sp, #8
 800162e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8001632:	f001 be35 	b.w	80032a0 <_test_assert_sequence>
 8001636:	bf00      	nop
 8001638:	20002e30 	.word	0x20002e30
 800163c:	20000964 	.word	0x20000964
 8001640:	0800714c 	.word	0x0800714c
 8001644:	08001751 	.word	0x08001751
 8001648:	20002fa8 	.word	0x20002fa8
 800164c:	20000ec0 	.word	0x20000ec0
 8001650:	08008308 	.word	0x08008308
 8001654:	200030f0 	.word	0x200030f0
 8001658:	080084b0 	.word	0x080084b0
 800165c:	20003238 	.word	0x20003238
 8001660:	08007140 	.word	0x08007140
 8001664:	20003380 	.word	0x20003380
 8001668:	08007144 	.word	0x08007144
 800166c:	200034c8 	.word	0x200034c8
 8001670:	08007148 	.word	0x08007148
	...

08001680 <thd1_execute.lto_priv.92>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001682:	4f27      	ldr	r7, [pc, #156]	; (8001720 <thd1_execute.lto_priv.92+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001684:	4e27      	ldr	r6, [pc, #156]	; (8001724 <thd1_execute.lto_priv.92+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4d27      	ldr	r5, [pc, #156]	; (8001728 <thd1_execute.lto_priv.92+0xa8>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4927      	ldr	r1, [pc, #156]	; (800172c <thd1_execute.lto_priv.92+0xac>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 800168e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001690:	462b      	mov	r3, r5
 8001692:	9100      	str	r1, [sp, #0]
 8001694:	3a05      	subs	r2, #5
 8001696:	4630      	mov	r0, r6
 8001698:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800169c:	f7ff f8b8 	bl	8000810 <chThdCreateStatic>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4c23      	ldr	r4, [pc, #140]	; (8001730 <thd1_execute.lto_priv.92+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	4923      	ldr	r1, [pc, #140]	; (8001734 <thd1_execute.lto_priv.92+0xb4>)
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80016a8:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80016aa:	462b      	mov	r3, r5
 80016ac:	9100      	str	r1, [sp, #0]
 80016ae:	3a04      	subs	r2, #4
 80016b0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80016b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016b8:	f7ff f8aa 	bl	8000810 <chThdCreateStatic>
 80016bc:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80016be:	491e      	ldr	r1, [pc, #120]	; (8001738 <thd1_execute.lto_priv.92+0xb8>)
 80016c0:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80016c2:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80016c4:	462b      	mov	r3, r5
 80016c6:	9100      	str	r1, [sp, #0]
 80016c8:	3a03      	subs	r2, #3
 80016ca:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80016ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016d2:	f7ff f89d 	bl	8000810 <chThdCreateStatic>
 80016d6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80016d8:	4918      	ldr	r1, [pc, #96]	; (800173c <thd1_execute.lto_priv.92+0xbc>)
 80016da:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80016dc:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80016de:	462b      	mov	r3, r5
 80016e0:	9100      	str	r1, [sp, #0]
 80016e2:	3a02      	subs	r2, #2
 80016e4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80016e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016ec:	f7ff f890 	bl	8000810 <chThdCreateStatic>
 80016f0:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <thd1_execute.lto_priv.92+0xc0>)
 80016f4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80016f6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80016f8:	3a01      	subs	r2, #1
 80016fa:	462b      	mov	r3, r5
 80016fc:	9100      	str	r1, [sp, #0]
 80016fe:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8001702:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001706:	f7ff f883 	bl	8000810 <chThdCreateStatic>
 800170a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 800170c:	f001 fd70 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <thd1_execute.lto_priv.92+0xc4>)
 8001712:	2001      	movs	r0, #1
}
 8001714:	b003      	add	sp, #12
 8001716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800171a:	f001 bdc1 	b.w	80032a0 <_test_assert_sequence>
 800171e:	bf00      	nop
 8001720:	20002e30 	.word	0x20002e30
 8001724:	20002fa8 	.word	0x20002fa8
 8001728:	08001771 	.word	0x08001771
 800172c:	0800714c 	.word	0x0800714c
 8001730:	20000ec0 	.word	0x20000ec0
 8001734:	08008308 	.word	0x08008308
 8001738:	080084b0 	.word	0x080084b0
 800173c:	08007140 	.word	0x08007140
 8001740:	08007144 	.word	0x08007144
 8001744:	08007148 	.word	0x08007148
	...

08001750 <thread1.lto_priv.86>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8001754:	4c05      	ldr	r4, [pc, #20]	; (800176c <thread1.lto_priv.86+0x1c>)
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff faaa 	bl	8000cb0 <chMtxLock>
  test_emit_token(*(char *)p);
 800175c:	7828      	ldrb	r0, [r5, #0]
 800175e:	f001 fddf 	bl	8003320 <test_emit_token>
  chMtxUnlock(&m1);
 8001762:	4620      	mov	r0, r4
}
 8001764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8001768:	f7ff ba02 	b.w	8000b70 <chMtxUnlock>
 800176c:	20000964 	.word	0x20000964

08001770 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8001770:	7800      	ldrb	r0, [r0, #0]
 8001772:	f001 bdd5 	b.w	8003320 <test_emit_token>
 8001776:	bf00      	nop
	...

08001780 <thread1.lto_priv.85>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8001780:	b510      	push	{r4, lr}
 8001782:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <thread1.lto_priv.85+0x14>)
 8001786:	f7ff f8bb 	bl	8000900 <chSemWait>
  test_emit_token(*(char *)p);
 800178a:	7820      	ldrb	r0, [r4, #0]
}
 800178c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8001790:	f001 bdc6 	b.w	8003320 <test_emit_token>
 8001794:	20000a14 	.word	0x20000a14
	...

080017a0 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 80017a0:	b508      	push	{r3, lr}
 80017a2:	2220      	movs	r2, #32
 80017a4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80017a8:	6883      	ldr	r3, [r0, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	dd05      	ble.n	80017ba <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80017ae:	f7fe ff6f 	bl	8000690 <chSchRescheduleS>
 80017b2:	2300      	movs	r3, #0
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80017ba:	f7ff fa89 	bl	8000cd0 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80017be:	f7fe ff67 	bl	8000690 <chSchRescheduleS>
 80017c2:	2300      	movs	r3, #0
 80017c4:	f383 8811 	msr	BASEPRI, r3
 80017c8:	bd08      	pop	{r3, pc}
 80017ca:	bf00      	nop
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 80017d0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f7ff fc84 	bl	80010e0 <chThdSleep>
 80017d8:	2320      	movs	r3, #32
 80017da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80017de:	4804      	ldr	r0, [pc, #16]	; (80017f0 <thread2+0x20>)
 80017e0:	f7ff fa76 	bl	8000cd0 <chSemSignalI>
  chSchRescheduleS();
 80017e4:	f7fe ff54 	bl	8000690 <chSchRescheduleS>
 80017e8:	2300      	movs	r3, #0
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	bd08      	pop	{r3, pc}
 80017f0:	20000a14 	.word	0x20000a14
	...

08001800 <sem4_execute.lto_priv.102>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001804:	ad03      	add	r5, sp, #12
 8001806:	2400      	movs	r4, #0
 8001808:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 800180a:	9504      	str	r5, [sp, #16]
 800180c:	9405      	str	r4, [sp, #20]
 800180e:	2620      	movs	r6, #32
 8001810:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8001814:	4628      	mov	r0, r5
 8001816:	4621      	mov	r1, r4
 8001818:	f7ff fa72 	bl	8000d00 <chSemResetI>
  chSchRescheduleS();
 800181c:	f7fe ff38 	bl	8000690 <chSchRescheduleS>
 8001820:	f384 8811 	msr	BASEPRI, r4
 8001824:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8001828:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800182a:	2001      	movs	r0, #1
 800182c:	42a1      	cmp	r1, r4
 800182e:	bfcc      	ite	gt
 8001830:	2100      	movgt	r1, #0
 8001832:	2101      	movle	r1, #1
 8001834:	f001 fd5c 	bl	80032f0 <_test_assert>
 8001838:	4607      	mov	r7, r0
 800183a:	b118      	cbz	r0, 8001844 <sem4_execute.lto_priv.102+0x44>
 800183c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8001840:	b007      	add	sp, #28
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <sem4_execute.lto_priv.102+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800184a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	483e      	ldr	r0, [pc, #248]	; (800194c <sem4_execute.lto_priv.102+0x14c>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <sem4_execute.lto_priv.102+0x150>)
 8001856:	3a01      	subs	r2, #1
 8001858:	9500      	str	r5, [sp, #0]
 800185a:	f7fe ffd9 	bl	8000810 <chThdCreateStatic>
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <sem4_execute.lto_priv.102+0x154>)
 8001860:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8001862:	4628      	mov	r0, r5
 8001864:	f7ff f84c 	bl	8000900 <chSemWait>
 8001868:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 800186c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800186e:	2002      	movs	r0, #2
 8001870:	2900      	cmp	r1, #0
 8001872:	bfcc      	ite	gt
 8001874:	2100      	movgt	r1, #0
 8001876:	2101      	movle	r1, #1
 8001878:	f001 fd3a 	bl	80032f0 <_test_assert>
 800187c:	b118      	cbz	r0, 8001886 <sem4_execute.lto_priv.102+0x86>
 800187e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8001882:	b007      	add	sp, #28
 8001884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001886:	f380 8811 	msr	BASEPRI, r0
 800188a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 800188e:	9b05      	ldr	r3, [sp, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	dd23      	ble.n	80018dc <sem4_execute.lto_priv.102+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8001894:	f7fe fefc 	bl	8000690 <chSchRescheduleS>
 8001898:	2400      	movs	r4, #0
 800189a:	f384 8811 	msr	BASEPRI, r4
 800189e:	2720      	movs	r7, #32
 80018a0:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 80018a4:	9905      	ldr	r1, [sp, #20]
 80018a6:	2003      	movs	r0, #3
 80018a8:	42a1      	cmp	r1, r4
 80018aa:	bfd4      	ite	le
 80018ac:	2100      	movle	r1, #0
 80018ae:	2101      	movgt	r1, #1
 80018b0:	f001 fd1e 	bl	80032f0 <_test_assert>
 80018b4:	4606      	mov	r6, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d1c0      	bne.n	800183c <sem4_execute.lto_priv.102+0x3c>
 80018ba:	f380 8811 	msr	BASEPRI, r0
 80018be:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80018c2:	9905      	ldr	r1, [sp, #20]
 80018c4:	2004      	movs	r0, #4
 80018c6:	f1a1 0101 	sub.w	r1, r1, #1
 80018ca:	fab1 f181 	clz	r1, r1
 80018ce:	0949      	lsrs	r1, r1, #5
 80018d0:	f001 fd0e 	bl	80032f0 <_test_assert>
 80018d4:	b130      	cbz	r0, 80018e4 <sem4_execute.lto_priv.102+0xe4>
 80018d6:	f386 8811 	msr	BASEPRI, r6
 80018da:	e7b1      	b.n	8001840 <sem4_execute.lto_priv.102+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 80018dc:	4628      	mov	r0, r5
 80018de:	f7ff f9f7 	bl	8000cd0 <chSemSignalI>
 80018e2:	e7d7      	b.n	8001894 <sem4_execute.lto_priv.102+0x94>
 80018e4:	f380 8811 	msr	BASEPRI, r0
 80018e8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 80018ec:	9b05      	ldr	r3, [sp, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	dd23      	ble.n	800193a <sem4_execute.lto_priv.102+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80018f2:	f7fe fecd 	bl	8000690 <chSchRescheduleS>
 80018f6:	2400      	movs	r4, #0
 80018f8:	f384 8811 	msr	BASEPRI, r4
 80018fc:	2620      	movs	r6, #32
 80018fe:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8001902:	9905      	ldr	r1, [sp, #20]
 8001904:	2003      	movs	r0, #3
 8001906:	42a1      	cmp	r1, r4
 8001908:	bfd4      	ite	le
 800190a:	2100      	movle	r1, #0
 800190c:	2101      	movgt	r1, #1
 800190e:	f001 fcef 	bl	80032f0 <_test_assert>
 8001912:	4605      	mov	r5, r0
 8001914:	2800      	cmp	r0, #0
 8001916:	d191      	bne.n	800183c <sem4_execute.lto_priv.102+0x3c>
 8001918:	f380 8811 	msr	BASEPRI, r0
 800191c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8001920:	9905      	ldr	r1, [sp, #20]
 8001922:	2005      	movs	r0, #5
 8001924:	f1a1 0101 	sub.w	r1, r1, #1
 8001928:	fab1 f181 	clz	r1, r1
 800192c:	0949      	lsrs	r1, r1, #5
 800192e:	f001 fcdf 	bl	80032f0 <_test_assert>
 8001932:	b130      	cbz	r0, 8001942 <sem4_execute.lto_priv.102+0x142>
 8001934:	f385 8811 	msr	BASEPRI, r5
 8001938:	e782      	b.n	8001840 <sem4_execute.lto_priv.102+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800193a:	4628      	mov	r0, r5
 800193c:	f7ff f9c8 	bl	8000cd0 <chSemSignalI>
 8001940:	e7d7      	b.n	80018f2 <sem4_execute.lto_priv.102+0xf2>
 8001942:	f380 8811 	msr	BASEPRI, r0
 8001946:	e77b      	b.n	8001840 <sem4_execute.lto_priv.102+0x40>
 8001948:	20002e30 	.word	0x20002e30
 800194c:	20002fa8 	.word	0x20002fa8
 8001950:	080017a1 	.word	0x080017a1
 8001954:	20000ec0 	.word	0x20000ec0
	...

08001960 <sem3_execute.lto_priv.101>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8001960:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <sem3_execute.lto_priv.101+0x7c>)
 8001964:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001966:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001968:	2300      	movs	r3, #0
 800196a:	6892      	ldr	r2, [r2, #8]
 800196c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001970:	3201      	adds	r2, #1
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	481a      	ldr	r0, [pc, #104]	; (80019e0 <sem3_execute.lto_priv.101+0x80>)
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <sem3_execute.lto_priv.101+0x84>)
 8001978:	f7fe ff4a 	bl	8000810 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 800197c:	4c1a      	ldr	r4, [pc, #104]	; (80019e8 <sem3_execute.lto_priv.101+0x88>)
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <sem3_execute.lto_priv.101+0x8c>)
 8001980:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8001982:	f005 f885 	bl	8006a90 <chSemSignalWait.constprop.46>
 8001986:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8001988:	2001      	movs	r0, #1
 800198a:	1b09      	subs	r1, r1, r4
 800198c:	fab1 f181 	clz	r1, r1
 8001990:	0949      	lsrs	r1, r1, #5
 8001992:	f001 fcad 	bl	80032f0 <_test_assert>
 8001996:	b108      	cbz	r0, 800199c <sem3_execute.lto_priv.101+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8001998:	b002      	add	sp, #8
 800199a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800199c:	68a1      	ldr	r1, [r4, #8]
 800199e:	2002      	movs	r0, #2
 80019a0:	fab1 f181 	clz	r1, r1
 80019a4:	0949      	lsrs	r1, r1, #5
 80019a6:	f001 fca3 	bl	80032f0 <_test_assert>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d1f4      	bne.n	8001998 <sem3_execute.lto_priv.101+0x38>

  chSemSignalWait(&sem1, &sem1);
 80019ae:	f005 f86f 	bl	8006a90 <chSemSignalWait.constprop.46>
 80019b2:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 80019b4:	2003      	movs	r0, #3
 80019b6:	1b09      	subs	r1, r1, r4
 80019b8:	fab1 f181 	clz	r1, r1
 80019bc:	0949      	lsrs	r1, r1, #5
 80019be:	f001 fc97 	bl	80032f0 <_test_assert>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d1e8      	bne.n	8001998 <sem3_execute.lto_priv.101+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80019c6:	68a1      	ldr	r1, [r4, #8]
 80019c8:	2004      	movs	r0, #4
 80019ca:	fab1 f181 	clz	r1, r1
 80019ce:	0949      	lsrs	r1, r1, #5
}
 80019d0:	b002      	add	sp, #8
 80019d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80019d6:	f001 bc8b 	b.w	80032f0 <_test_assert>
 80019da:	bf00      	nop
 80019dc:	20002e30 	.word	0x20002e30
 80019e0:	20002fa8 	.word	0x20002fa8
 80019e4:	080019f1 	.word	0x080019f1
 80019e8:	20000a14 	.word	0x20000a14
 80019ec:	20000ec0 	.word	0x20000ec0

080019f0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 80019f0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80019f2:	4c04      	ldr	r4, [pc, #16]	; (8001a04 <thread3+0x14>)
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7fe ff83 	bl	8000900 <chSemWait>
  chSemSignal(&sem1);
 80019fa:	4620      	mov	r0, r4
}
 80019fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8001a00:	f7fe be9e 	b.w	8000740 <chSemSignal>
 8001a04:	20000a14 	.word	0x20000a14
	...

08001a10 <sem2_execute.lto_priv.99>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	2520      	movs	r5, #32
 8001a14:	b083      	sub	sp, #12
 8001a16:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8001a1a:	4c55      	ldr	r4, [pc, #340]	; (8001b70 <sem2_execute.lto_priv.99+0x160>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fa56 	bl	8000ed0 <chSemWaitTimeoutS>
 8001a24:	2300      	movs	r3, #0
 8001a26:	4601      	mov	r1, r0
 8001a28:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001a2c:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8001a30:	fab1 f181 	clz	r1, r1
 8001a34:	2001      	movs	r0, #1
 8001a36:	0949      	lsrs	r1, r1, #5
 8001a38:	f001 fc5a 	bl	80032f0 <_test_assert>
 8001a3c:	b108      	cbz	r0, 8001a42 <sem2_execute.lto_priv.99+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8001a3e:	b003      	add	sp, #12
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8001a44:	2002      	movs	r0, #2
 8001a46:	1b09      	subs	r1, r1, r4
 8001a48:	fab1 f181 	clz	r1, r1
 8001a4c:	0949      	lsrs	r1, r1, #5
 8001a4e:	f001 fc4f 	bl	80032f0 <_test_assert>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d1f3      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8001a56:	68a1      	ldr	r1, [r4, #8]
 8001a58:	2003      	movs	r0, #3
 8001a5a:	fab1 f181 	clz	r1, r1
 8001a5e:	0949      	lsrs	r1, r1, #5
 8001a60:	f001 fc46 	bl	80032f0 <_test_assert>
 8001a64:	4606      	mov	r6, r0
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d1e9      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <sem2_execute.lto_priv.99+0x164>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001a6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4841      	ldr	r0, [pc, #260]	; (8001b78 <sem2_execute.lto_priv.99+0x168>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <sem2_execute.lto_priv.99+0x16c>)
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	9600      	str	r6, [sp, #0]
 8001a7c:	f7fe fec8 	bl	8000810 <chThdCreateStatic>
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <sem2_execute.lto_priv.99+0x170>)
 8001a82:	6018      	str	r0, [r3, #0]
 8001a84:	f385 8811 	msr	BASEPRI, r5
 8001a88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fa1f 	bl	8000ed0 <chSemWaitTimeoutS>
 8001a92:	4607      	mov	r7, r0
 8001a94:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8001a98:	f001 fbaa 	bl	80031f0 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8001a9c:	fab7 f187 	clz	r1, r7
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	0949      	lsrs	r1, r1, #5
 8001aa4:	f001 fc24 	bl	80032f0 <_test_assert>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d1c8      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
 8001aac:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8001aae:	2005      	movs	r0, #5
 8001ab0:	1b09      	subs	r1, r1, r4
 8001ab2:	fab1 f181 	clz	r1, r1
 8001ab6:	0949      	lsrs	r1, r1, #5
 8001ab8:	f001 fc1a 	bl	80032f0 <_test_assert>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1be      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8001ac0:	68a1      	ldr	r1, [r4, #8]
 8001ac2:	2006      	movs	r0, #6
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	0949      	lsrs	r1, r1, #5
 8001aca:	f001 fc11 	bl	80032f0 <_test_assert>
 8001ace:	4606      	mov	r6, r0
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d1b4      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8001ad4:	f001 fb7c 	bl	80031d0 <test_wait_tick>
 8001ad8:	f385 8811 	msr	BASEPRI, r5
 8001adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001ae2:	f386 8811 	msr	BASEPRI, r6
 8001ae6:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f001 fc19 	bl	8003320 <test_emit_token>
 8001aee:	f385 8811 	msr	BASEPRI, r5
 8001af2:	2164      	movs	r1, #100	; 0x64
 8001af4:	481e      	ldr	r0, [pc, #120]	; (8001b70 <sem2_execute.lto_priv.99+0x160>)
 8001af6:	f7ff f9eb 	bl	8000ed0 <chSemWaitTimeoutS>
 8001afa:	2300      	movs	r3, #0
 8001afc:	4601      	mov	r1, r0
 8001afe:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001b02:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8001b06:	fab1 f181 	clz	r1, r1
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	0949      	lsrs	r1, r1, #5
 8001b0e:	f001 fbef 	bl	80032f0 <_test_assert>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d193      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
 8001b16:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8001b18:	2008      	movs	r0, #8
 8001b1a:	1b09      	subs	r1, r1, r4
 8001b1c:	fab1 f181 	clz	r1, r1
 8001b20:	0949      	lsrs	r1, r1, #5
 8001b22:	f001 fbe5 	bl	80032f0 <_test_assert>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d189      	bne.n	8001a3e <sem2_execute.lto_priv.99+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8001b2a:	68a1      	ldr	r1, [r4, #8]
 8001b2c:	2009      	movs	r0, #9
 8001b2e:	fab1 f181 	clz	r1, r1
 8001b32:	0949      	lsrs	r1, r1, #5
 8001b34:	f001 fbdc 	bl	80032f0 <_test_assert>
 8001b38:	3601      	adds	r6, #1
 8001b3a:	b2f6      	uxtb	r6, r6
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	f47f af7e 	bne.w	8001a3e <sem2_execute.lto_priv.99+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8001b42:	2e46      	cmp	r6, #70	; 0x46
 8001b44:	d1d0      	bne.n	8001ae8 <sem2_execute.lto_priv.99+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8001b46:	200a      	movs	r0, #10
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <sem2_execute.lto_priv.99+0x174>)
 8001b4a:	f001 fba9 	bl	80032a0 <_test_assert_sequence>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	f47f af75 	bne.w	8001a3e <sem2_execute.lto_priv.99+0x2e>
 8001b54:	b2bf      	uxth	r7, r7

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8001b56:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001b5a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001b5e:	b289      	uxth	r1, r1
 8001b60:	b292      	uxth	r2, r2
 8001b62:	200b      	movs	r0, #11
}
 8001b64:	b003      	add	sp, #12
 8001b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001b6a:	f001 bb71 	b.w	8003250 <_test_assert_time_window>
 8001b6e:	bf00      	nop
 8001b70:	20000a14 	.word	0x20000a14
 8001b74:	20002e30 	.word	0x20002e30
 8001b78:	20002fa8 	.word	0x20002fa8
 8001b7c:	080017d1 	.word	0x080017d1
 8001b80:	20000ec0 	.word	0x20000ec0
 8001b84:	08007148 	.word	0x08007148
	...

08001b90 <sem1_execute.lto_priv.97>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001b92:	4d4b      	ldr	r5, [pc, #300]	; (8001cc0 <sem1_execute.lto_priv.97+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001b94:	4f4b      	ldr	r7, [pc, #300]	; (8001cc4 <sem1_execute.lto_priv.97+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001b96:	69ab      	ldr	r3, [r5, #24]

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8001b98:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001ba0:	3205      	adds	r2, #5
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001ba4:	4849      	ldr	r0, [pc, #292]	; (8001ccc <sem1_execute.lto_priv.97+0x13c>)
 8001ba6:	9700      	str	r7, [sp, #0]
 8001ba8:	f7fe fe32 	bl	8000810 <chThdCreateStatic>
 8001bac:	69ab      	ldr	r3, [r5, #24]
 8001bae:	4c48      	ldr	r4, [pc, #288]	; (8001cd0 <sem1_execute.lto_priv.97+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <sem1_execute.lto_priv.97+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001bb4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001bc0:	4845      	ldr	r0, [pc, #276]	; (8001cd8 <sem1_execute.lto_priv.97+0x148>)
 8001bc2:	f7fe fe25 	bl	8000810 <chThdCreateStatic>
 8001bc6:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <sem1_execute.lto_priv.97+0x14c>)
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8001bd0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001bd2:	3203      	adds	r2, #3
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4842      	ldr	r0, [pc, #264]	; (8001ce0 <sem1_execute.lto_priv.97+0x150>)
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001bda:	f7fe fe19 	bl	8000810 <chThdCreateStatic>
 8001bde:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001be0:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <sem1_execute.lto_priv.97+0x154>)
 8001be2:	6892      	ldr	r2, [r2, #8]
 8001be4:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8001be8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001bea:	3204      	adds	r2, #4
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	483e      	ldr	r0, [pc, #248]	; (8001ce8 <sem1_execute.lto_priv.97+0x158>)
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001bf2:	f7fe fe0d 	bl	8000810 <chThdCreateStatic>
 8001bf6:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <sem1_execute.lto_priv.97+0x15c>)
 8001bfa:	6892      	ldr	r2, [r2, #8]
 8001bfc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001c00:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8001c02:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	483a      	ldr	r0, [pc, #232]	; (8001cf0 <sem1_execute.lto_priv.97+0x160>)
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001c0a:	f7fe fe01 	bl	8000810 <chThdCreateStatic>
 8001c0e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8001c10:	4838      	ldr	r0, [pc, #224]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c12:	f7fe fd95 	bl	8000740 <chSemSignal>
  chSemSignal(&sem1);
 8001c16:	4837      	ldr	r0, [pc, #220]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c18:	f7fe fd92 	bl	8000740 <chSemSignal>
  chSemSignal(&sem1);
 8001c1c:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c1e:	f7fe fd8f 	bl	8000740 <chSemSignal>
  chSemSignal(&sem1);
 8001c22:	4834      	ldr	r0, [pc, #208]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c24:	f7fe fd8c 	bl	8000740 <chSemSignal>
  chSemSignal(&sem1);
 8001c28:	4832      	ldr	r0, [pc, #200]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c2a:	f7fe fd89 	bl	8000740 <chSemSignal>
  test_wait_threads();
 8001c2e:	f001 fadf 	bl	80031f0 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8001c32:	2001      	movs	r0, #1
 8001c34:	4930      	ldr	r1, [pc, #192]	; (8001cf8 <sem1_execute.lto_priv.97+0x168>)
 8001c36:	f001 fb33 	bl	80032a0 <_test_assert_sequence>
 8001c3a:	4606      	mov	r6, r0
 8001c3c:	b108      	cbz	r0, 8001c42 <sem1_execute.lto_priv.97+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8001c3e:	b003      	add	sp, #12
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8001c44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	4820      	ldr	r0, [pc, #128]	; (8001ccc <sem1_execute.lto_priv.97+0x13c>)
 8001c4c:	3205      	adds	r2, #5
 8001c4e:	9700      	str	r7, [sp, #0]
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <sem1_execute.lto_priv.97+0x138>)
 8001c52:	f7fe fddd 	bl	8000810 <chThdCreateStatic>
 8001c56:	2320      	movs	r3, #32
 8001c58:	6020      	str	r0, [r4, #0]
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	4c25      	ldr	r4, [pc, #148]	; (8001cf4 <sem1_execute.lto_priv.97+0x164>)
 8001c60:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8001c62:	4627      	mov	r7, r4
 8001c64:	e002      	b.n	8001c6c <sem1_execute.lto_priv.97+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001c66:	2d01      	cmp	r5, #1
 8001c68:	d00e      	beq.n	8001c88 <sem1_execute.lto_priv.97+0xf8>
 8001c6a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 8001c6c:	68a3      	ldr	r3, [r4, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	60a3      	str	r3, [r4, #8]
 8001c74:	dcf7      	bgt.n	8001c66 <sem1_execute.lto_priv.97+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001c76:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 8001c78:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001c7a:	605f      	str	r7, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001c7c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001c7e:	f7fe fe87 	bl	8000990 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001c82:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8001c84:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8001c86:	d1f0      	bne.n	8001c6a <sem1_execute.lto_priv.97+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8001c88:	f7fe fd02 	bl	8000690 <chSchRescheduleS>
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8001c92:	f001 faad 	bl	80031f0 <test_wait_threads>
 8001c96:	2320      	movs	r3, #32
 8001c98:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8001c9c:	68a1      	ldr	r1, [r4, #8]
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f1a1 0101 	sub.w	r1, r1, #1
 8001ca4:	fab1 f181 	clz	r1, r1
 8001ca8:	0949      	lsrs	r1, r1, #5
 8001caa:	f001 fb21 	bl	80032f0 <_test_assert>
 8001cae:	b918      	cbnz	r0, 8001cb8 <sem1_execute.lto_priv.97+0x128>
 8001cb0:	f380 8811 	msr	BASEPRI, r0
}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb8:	f385 8811 	msr	BASEPRI, r5
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	20002e30 	.word	0x20002e30
 8001cc4:	08007144 	.word	0x08007144
 8001cc8:	08001781 	.word	0x08001781
 8001ccc:	20002fa8 	.word	0x20002fa8
 8001cd0:	20000ec0 	.word	0x20000ec0
 8001cd4:	08007140 	.word	0x08007140
 8001cd8:	200030f0 	.word	0x200030f0
 8001cdc:	080084b0 	.word	0x080084b0
 8001ce0:	20003238 	.word	0x20003238
 8001ce4:	08008308 	.word	0x08008308
 8001ce8:	20003380 	.word	0x20003380
 8001cec:	0800714c 	.word	0x0800714c
 8001cf0:	200034c8 	.word	0x200034c8
 8001cf4:	20000a14 	.word	0x20000a14
 8001cf8:	08007148 	.word	0x08007148
 8001cfc:	00000000 	.word	0x00000000

08001d00 <thd2_execute.lto_priv.93>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d04:	4e47      	ldr	r6, [pc, #284]	; (8001e24 <thd2_execute.lto_priv.93+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001d06:	4d48      	ldr	r5, [pc, #288]	; (8001e28 <thd2_execute.lto_priv.93+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001d08:	69b3      	ldr	r3, [r6, #24]
 8001d0a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001e40 <thd2_execute.lto_priv.93+0x140>
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4946      	ldr	r1, [pc, #280]	; (8001e2c <thd2_execute.lto_priv.93+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8001d12:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001d14:	464b      	mov	r3, r9
 8001d16:	9100      	str	r1, [sp, #0]
 8001d18:	3a04      	subs	r2, #4
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d20:	f7fe fd76 	bl	8000810 <chThdCreateStatic>
 8001d24:	69b3      	ldr	r3, [r6, #24]
 8001d26:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8001e44 <thd2_execute.lto_priv.93+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4940      	ldr	r1, [pc, #256]	; (8001e30 <thd2_execute.lto_priv.93+0x130>)
 8001d2e:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001d32:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001d36:	464b      	mov	r3, r9
 8001d38:	9100      	str	r1, [sp, #0]
 8001d3a:	3a05      	subs	r2, #5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d42:	f7fe fd65 	bl	8000810 <chThdCreateStatic>
 8001d46:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001d48:	493a      	ldr	r1, [pc, #232]	; (8001e34 <thd2_execute.lto_priv.93+0x134>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001d4c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001d50:	464b      	mov	r3, r9
 8001d52:	9100      	str	r1, [sp, #0]
 8001d54:	3a01      	subs	r2, #1
 8001d56:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8001d5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d5e:	f7fe fd57 	bl	8000810 <chThdCreateStatic>
 8001d62:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001d64:	4934      	ldr	r1, [pc, #208]	; (8001e38 <thd2_execute.lto_priv.93+0x138>)
 8001d66:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001d68:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001d6c:	9100      	str	r1, [sp, #0]
 8001d6e:	3a02      	subs	r2, #2
 8001d70:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8001d74:	464b      	mov	r3, r9
 8001d76:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d7a:	f7fe fd49 	bl	8000810 <chThdCreateStatic>
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f8c8 000c 	str.w	r0, [r8, #12]
 8001d84:	f382 8811 	msr	BASEPRI, r2
 8001d88:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d8a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001d8c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d8e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001e48 <thd2_execute.lto_priv.93+0x148>
 8001d92:	f1a3 0a03 	sub.w	sl, r3, #3
 8001d96:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8001e4c <thd2_execute.lto_priv.93+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d9a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001d9e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001da0:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001da4:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001da8:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001dac:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001db0:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001db2:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001db6:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001dba:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001dbe:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001dc2:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8001dc6:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 8001dca:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001dce:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001dd2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001dd6:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001dda:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001dde:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001de2:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001de6:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001dea:	610b      	str	r3, [r1, #16]
 8001dec:	6173      	str	r3, [r6, #20]
 8001dee:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001df2:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001df6:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 8001dfa:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8001dfe:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8001e02:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001e06:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8001e0a:	f7fe fdc1 	bl	8000990 <chSchReadyI>
 8001e0e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8001e12:	f001 f9ed 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8001e16:	4650      	mov	r0, sl
 8001e18:	4908      	ldr	r1, [pc, #32]	; (8001e3c <thd2_execute.lto_priv.93+0x13c>)
}
 8001e1a:	b003      	add	sp, #12
 8001e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8001e20:	f001 ba3e 	b.w	80032a0 <_test_assert_sequence>
 8001e24:	20002e30 	.word	0x20002e30
 8001e28:	200030f0 	.word	0x200030f0
 8001e2c:	08008308 	.word	0x08008308
 8001e30:	0800714c 	.word	0x0800714c
 8001e34:	08007144 	.word	0x08007144
 8001e38:	08007140 	.word	0x08007140
 8001e3c:	08007148 	.word	0x08007148
 8001e40:	08001771 	.word	0x08001771
 8001e44:	20000ec0 	.word	0x20000ec0
 8001e48:	080084b0 	.word	0x080084b0
 8001e4c:	08000241 	.word	0x08000241

08001e50 <thd4_execute.lto_priv.95>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8001e50:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  test_wait_tick();
 8001e52:	f001 f9bd 	bl	80031d0 <test_wait_tick>
 8001e56:	2620      	movs	r6, #32
 8001e58:	f386 8811 	msr	BASEPRI, r6
 8001e5c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8001e60:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001e62:	2300      	movs	r3, #0
 8001e64:	b2a4      	uxth	r4, r4
 8001e66:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8001e6a:	20c8      	movs	r0, #200	; 0xc8
 8001e6c:	f7ff f938 	bl	80010e0 <chThdSleep>
  test_assert_time_window(1,
 8001e70:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8001e74:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8001e78:	b289      	uxth	r1, r1
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f001 f9e7 	bl	8003250 <_test_assert_time_window>
 8001e82:	b100      	cbz	r0, 8001e86 <thd4_execute.lto_priv.95+0x36>
 8001e84:	bd70      	pop	{r4, r5, r6, pc}
 8001e86:	f386 8811 	msr	BASEPRI, r6
 8001e8a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001e8c:	b2a4      	uxth	r4, r4
 8001e8e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8001e92:	20c8      	movs	r0, #200	; 0xc8
 8001e94:	f7ff f924 	bl	80010e0 <chThdSleep>
  test_assert_time_window(2,
 8001e98:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8001e9c:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8001ea0:	b289      	uxth	r1, r1
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f001 f9d3 	bl	8003250 <_test_assert_time_window>
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d1ea      	bne.n	8001e84 <thd4_execute.lto_priv.95+0x34>
 8001eae:	f386 8811 	msr	BASEPRI, r6
 8001eb2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001eb4:	b2a4      	uxth	r4, r4
 8001eb6:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8001eba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ebe:	f7ff f90f 	bl	80010e0 <chThdSleep>
  test_assert_time_window(3,
 8001ec2:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8001ec6:	f204 72d3 	addw	r2, r4, #2003	; 0x7d3
 8001eca:	b289      	uxth	r1, r1
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f001 f9be 	bl	8003250 <_test_assert_time_window>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d1d5      	bne.n	8001e84 <thd4_execute.lto_priv.95+0x34>
 8001ed8:	f386 8811 	msr	BASEPRI, r6
 8001edc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001ede:	b2a4      	uxth	r4, r4
 8001ee0:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8001ee4:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 8001ee8:	b2ad      	uxth	r5, r5
  chThdSleepUntil(time);
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7ff f8e0 	bl	80010b0 <chThdSleepUntil>
  test_assert_time_window(4,
 8001ef0:	f104 02cb 	add.w	r2, r4, #203	; 0xcb
 8001ef4:	4629      	mov	r1, r5
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8001ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8001efa:	b292      	uxth	r2, r2
 8001efc:	2004      	movs	r0, #4
 8001efe:	f001 b9a7 	b.w	8003250 <_test_assert_time_window>
 8001f02:	bf00      	nop
	...

08001f10 <thd3_execute.lto_priv.94>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001f12:	4e49      	ldr	r6, [pc, #292]	; (8002038 <thd3_execute.lto_priv.94+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001f14:	69b3      	ldr	r3, [r6, #24]
 8001f16:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001f18:	1c65      	adds	r5, r4, #1
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f7fe fbc8 	bl	80006b0 <chThdSetPriority>
 8001f20:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8001f22:	1b39      	subs	r1, r7, r4
 8001f24:	fab1 f181 	clz	r1, r1
 8001f28:	2001      	movs	r0, #1
 8001f2a:	0949      	lsrs	r1, r1, #5
 8001f2c:	f001 f9e0 	bl	80032f0 <_test_assert>
 8001f30:	b100      	cbz	r0, 8001f34 <thd3_execute.lto_priv.94+0x24>
 8001f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f34:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8001f36:	2002      	movs	r0, #2
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	1a69      	subs	r1, r5, r1
 8001f3c:	fab1 f181 	clz	r1, r1
 8001f40:	0949      	lsrs	r1, r1, #5
 8001f42:	f001 f9d5 	bl	80032f0 <_test_assert>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d1f3      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	f7fe fbb0 	bl	80006b0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8001f50:	1a29      	subs	r1, r5, r0
 8001f52:	fab1 f181 	clz	r1, r1
 8001f56:	2003      	movs	r0, #3
 8001f58:	0949      	lsrs	r1, r1, #5
 8001f5a:	f001 f9c9 	bl	80032f0 <_test_assert>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d1e7      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
 8001f62:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8001f64:	2004      	movs	r0, #4
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	1a61      	subs	r1, r4, r1
 8001f6a:	fab1 f181 	clz	r1, r1
 8001f6e:	0949      	lsrs	r1, r1, #5
 8001f70:	f001 f9be 	bl	80032f0 <_test_assert>
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d1dc      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
 8001f78:	2320      	movs	r3, #32
 8001f7a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001f7e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8001f80:	6893      	ldr	r3, [r2, #8]
 8001f82:	3302      	adds	r3, #2
 8001f84:	6093      	str	r3, [r2, #8]
 8001f86:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001f8a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8001f8c:	1ca7      	adds	r7, r4, #2
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	2005      	movs	r0, #5
 8001f92:	1a79      	subs	r1, r7, r1
 8001f94:	fab1 f181 	clz	r1, r1
 8001f98:	0949      	lsrs	r1, r1, #5
 8001f9a:	f001 f9a9 	bl	80032f0 <_test_assert>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d1c7      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f7fe fb84 	bl	80006b0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8001fa8:	1b01      	subs	r1, r0, r4
 8001faa:	fab1 f181 	clz	r1, r1
 8001fae:	2006      	movs	r0, #6
 8001fb0:	0949      	lsrs	r1, r1, #5
 8001fb2:	f001 f99d 	bl	80032f0 <_test_assert>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d1bb      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8001fba:	69b3      	ldr	r3, [r6, #24]
 8001fbc:	2007      	movs	r0, #7
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	1a79      	subs	r1, r7, r1
 8001fc2:	fab1 f181 	clz	r1, r1
 8001fc6:	0949      	lsrs	r1, r1, #5
 8001fc8:	f001 f992 	bl	80032f0 <_test_assert>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d1b0      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8001fd0:	69b3      	ldr	r3, [r6, #24]
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001fd6:	1a69      	subs	r1, r5, r1
 8001fd8:	fab1 f181 	clz	r1, r1
 8001fdc:	0949      	lsrs	r1, r1, #5
 8001fde:	f001 f987 	bl	80032f0 <_test_assert>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d1a5      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8001fe6:	1ce7      	adds	r7, r4, #3
 8001fe8:	4638      	mov	r0, r7
 8001fea:	f7fe fb61 	bl	80006b0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8001fee:	1a28      	subs	r0, r5, r0
 8001ff0:	4241      	negs	r1, r0
 8001ff2:	4141      	adcs	r1, r0
 8001ff4:	2009      	movs	r0, #9
 8001ff6:	f001 f97b 	bl	80032f0 <_test_assert>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d199      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8001ffe:	69b3      	ldr	r3, [r6, #24]
 8002000:	200a      	movs	r0, #10
 8002002:	6899      	ldr	r1, [r3, #8]
 8002004:	1a7a      	subs	r2, r7, r1
 8002006:	4251      	negs	r1, r2
 8002008:	4151      	adcs	r1, r2
 800200a:	f001 f971 	bl	80032f0 <_test_assert>
 800200e:	2800      	cmp	r0, #0
 8002010:	d18f      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8002012:	69b3      	ldr	r3, [r6, #24]
 8002014:	200b      	movs	r0, #11
 8002016:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002018:	1a7b      	subs	r3, r7, r1
 800201a:	4259      	negs	r1, r3
 800201c:	4159      	adcs	r1, r3
 800201e:	f001 f967 	bl	80032f0 <_test_assert>
 8002022:	2800      	cmp	r0, #0
 8002024:	d185      	bne.n	8001f32 <thd3_execute.lto_priv.94+0x22>
 8002026:	2320      	movs	r3, #32
 8002028:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800202c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 800202e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8002030:	63dc      	str	r4, [r3, #60]	; 0x3c
 8002032:	f380 8811 	msr	BASEPRI, r0
 8002036:	e77c      	b.n	8001f32 <thd3_execute.lto_priv.94+0x22>
 8002038:	20002e30 	.word	0x20002e30
 800203c:	00000000 	.word	0x00000000

08002040 <CheckCRC>:
        crc = crctmb[crc ^ ((char *)s)[i]];
    }
    return crc;
}

uint8_t CheckCRC(volatile uint8_t *s){
 8002040:	b410      	push	{r4}
 8002042:	4c07      	ldr	r4, [pc, #28]	; (8002060 <CheckCRC+0x20>)
 8002044:	4602      	mov	r2, r0
 8002046:	f100 010f 	add.w	r1, r0, #15
    uint8_t crc = 0;
 800204a:	2000      	movs	r0, #0
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE; ++i) {
        crc = crctmb[crc ^ s[i]];
 800204c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002050:	4043      	eors	r3, r0
}

uint8_t CheckCRC(volatile uint8_t *s){
    uint8_t crc = 0;
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE; ++i) {
 8002052:	428a      	cmp	r2, r1
        crc = crctmb[crc ^ s[i]];
 8002054:	5ce0      	ldrb	r0, [r4, r3]
}

uint8_t CheckCRC(volatile uint8_t *s){
    uint8_t crc = 0;
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE; ++i) {
 8002056:	d1f9      	bne.n	800204c <CheckCRC+0xc>
        crc = crctmb[crc ^ s[i]];
    }
    return crc;
}
 8002058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000800 	.word	0x20000800
	...

08002070 <CreateCRC>:
                  247, 34, 136, 93, 214, 3, 169, 124, 40, 253,
                  87, 130, 255, 42, 128, 85, 1, 212, 126, 171,
                  132, 81, 251, 46, 122, 175, 5, 208, 173, 120,
                  210, 7, 83, 134, 44, 249};

uint8_t CreateCRC(volatile FrameStruct *s){
 8002070:	b410      	push	{r4}
 8002072:	4c07      	ldr	r4, [pc, #28]	; (8002090 <CreateCRC+0x20>)
 8002074:	1e42      	subs	r2, r0, #1
 8002076:	f100 010d 	add.w	r1, r0, #13
    uint8_t crc = 0;
 800207a:	2000      	movs	r0, #0
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE-1; ++i) {
        crc = crctmb[crc ^ ((char *)s)[i]];
 800207c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002080:	4058      	eors	r0, r3
                  210, 7, 83, 134, 44, 249};

uint8_t CreateCRC(volatile FrameStruct *s){
    uint8_t crc = 0;
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE-1; ++i) {
 8002082:	428a      	cmp	r2, r1
        crc = crctmb[crc ^ ((char *)s)[i]];
 8002084:	5c20      	ldrb	r0, [r4, r0]
                  210, 7, 83, 134, 44, 249};

uint8_t CreateCRC(volatile FrameStruct *s){
    uint8_t crc = 0;
    int i=0;
    for (i = 0; i < FRAME_SIZE_BYTE-1; ++i) {
 8002086:	d1f9      	bne.n	800207c <CreateCRC+0xc>
        crc = crctmb[crc ^ ((char *)s)[i]];
    }
    return crc;
}
 8002088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000800 	.word	0x20000800
	...

080020a0 <bmk12_setup.lto_priv.151>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <bmk12_setup.lto_priv.151+0xc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80020a6:	605b      	str	r3, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	4770      	bx	lr
 80020ac:	20000e80 	.word	0x20000e80

080020b0 <bmk11_setup.lto_priv.149>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <bmk11_setup.lto_priv.149+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80020b2:	2201      	movs	r2, #1
 80020b4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80020b6:	605b      	str	r3, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	4770      	bx	lr
 80020bc:	20000eb4 	.word	0x20000eb4

080020c0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
	...

080020d0 <bmk7_setup.lto_priv.144>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <bmk7_setup.lto_priv.144+0xc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80020d6:	605b      	str	r3, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	4770      	bx	lr
 80020dc:	20000eb4 	.word	0x20000eb4

080020e0 <sys2_execute.lto_priv.90>:
 80020e0:	2320      	movs	r3, #32
 80020e2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80020e6:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80020ea:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80020ee:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80020f0:	2300      	movs	r3, #0
 80020f2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80020f6:	b662      	cpsie	i
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	0000      	movs	r0, r0
	...

08002100 <DLLSendSyncFrame>:

/**
 * @brief   Send a single SYNC Frame via serial.
 *
 */
void DLLSendSyncFrame(DLLDriver *driver){
 8002100:	4601      	mov	r1, r0
  driver->DLLStats.SyncFrameSentCounter++;
  sdWrite(driver->config->SDriver, driver->DLLSyncFrame, FRAME_SIZE_BYTE);
 8002102:	6842      	ldr	r2, [r0, #4]
/**
 * @brief   Send a single SYNC Frame via serial.
 *
 */
void DLLSendSyncFrame(DLLDriver *driver){
  driver->DLLStats.SyncFrameSentCounter++;
 8002104:	69c3      	ldr	r3, [r0, #28]
  sdWrite(driver->config->SDriver, driver->DLLSyncFrame, FRAME_SIZE_BYTE);
 8002106:	6810      	ldr	r0, [r2, #0]
/**
 * @brief   Send a single SYNC Frame via serial.
 *
 */
void DLLSendSyncFrame(DLLDriver *driver){
  driver->DLLStats.SyncFrameSentCounter++;
 8002108:	3301      	adds	r3, #1
 800210a:	61cb      	str	r3, [r1, #28]
  sdWrite(driver->config->SDriver, driver->DLLSyncFrame, FRAME_SIZE_BYTE);
 800210c:	3030      	adds	r0, #48	; 0x30
 800210e:	3137      	adds	r1, #55	; 0x37
 8002110:	220f      	movs	r2, #15
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	f001 bca3 	b.w	8003a60 <chOQWriteTimeout>
 800211a:	bf00      	nop
 800211c:	0000      	movs	r0, r0
	...

08002120 <SDSending.lto_priv.65>:
 * @brief   Continuous serial sending thread.
 * @details The SDSending thread responsible for the continuous frame sending
 *          via serial. It receives the frames from the application through a
 *          mailbox.
 */
static THD_FUNCTION(SDSending, arg) {
 8002120:	4604      	mov	r4, r0
 8002122:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <SDSending.lto_priv.65+0x88>)
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <SDSending.lto_priv.65+0x8c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 */
bool DLLSendSingleFrameSerial(DLLDriver *driver, FrameStruct *Frame){
  bool IsLocked = chMtxTryLock(&driver->DLLSerialSendMutex);
  if(IsLocked){
    sdWrite(driver->config->SDriver, Frame, FRAME_SIZE_BYTE);
    palTogglePad(GPIOB, GPIOB_LED1);
 800212a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80021b0 <SDSending.lto_priv.65+0x90>
 * @brief   Continuous serial sending thread.
 * @details The SDSending thread responsible for the continuous frame sending
 *          via serial. It receives the frames from the application through a
 *          mailbox.
 */
static THD_FUNCTION(SDSending, arg) {
 800212e:	b082      	sub	sp, #8
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	f600 1538 	addw	r5, r0, #2360	; 0x938
 8002136:	f200 778c 	addw	r7, r0, #1932	; 0x78c
 800213a:	f100 0648 	add.w	r6, r0, #72	; 0x48
  DLLDriver *dllp = arg;
  void *pbuf;
  FrameStruct *Temp;
  while(true)
  {
      dllp->DLLStats.FreeFilledBuffer = chMBGetFreeCountI(&dllp->DLLBuffers.DLLFilledOutputBuffer);
 800213e:	f8d4 295c 	ldr.w	r2, [r4, #2396]	; 0x95c
      dllp->DLLStats.FreeFreeBuffer = chMBGetFreeCountI(&dllp->DLLBuffers.DLLFreeOutputBuffer);
 8002142:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
  DLLDriver *dllp = arg;
  void *pbuf;
  FrameStruct *Temp;
  while(true)
  {
      dllp->DLLStats.FreeFilledBuffer = chMBGetFreeCountI(&dllp->DLLBuffers.DLLFilledOutputBuffer);
 8002146:	6222      	str	r2, [r4, #32]
      dllp->DLLStats.FreeFreeBuffer = chMBGetFreeCountI(&dllp->DLLBuffers.DLLFreeOutputBuffer);
 8002148:	6263      	str	r3, [r4, #36]	; 0x24
      msg_t msg = chMBFetch(&dllp->DLLBuffers.DLLFilledOutputBuffer, (msg_t *)&pbuf, TIME_INFINITE);
 800214a:	4628      	mov	r0, r5
 800214c:	a901      	add	r1, sp, #4
 800214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002152:	f7fe fedd 	bl	8000f10 <chMBFetch>

      if(msg == MSG_OK)
 8002156:	2800      	cmp	r0, #0
 8002158:	d1f1      	bne.n	800213e <SDSending.lto_priv.65+0x1e>
 * @param[in] driver    DataLinkLayer driver structure
 * @param[in] frame     The frame which need to be sent
 *
 */
bool DLLSendSingleFrameSerial(DLLDriver *driver, FrameStruct *Frame){
  bool IsLocked = chMtxTryLock(&driver->DLLSerialSendMutex);
 800215a:	4630      	mov	r0, r6
      dllp->DLLStats.FreeFreeBuffer = chMBGetFreeCountI(&dllp->DLLBuffers.DLLFreeOutputBuffer);
      msg_t msg = chMBFetch(&dllp->DLLBuffers.DLLFilledOutputBuffer, (msg_t *)&pbuf, TIME_INFINITE);

      if(msg == MSG_OK)
      {
        Temp = pbuf;
 800215c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 * @param[in] driver    DataLinkLayer driver structure
 * @param[in] frame     The frame which need to be sent
 *
 */
bool DLLSendSingleFrameSerial(DLLDriver *driver, FrameStruct *Frame){
  bool IsLocked = chMtxTryLock(&driver->DLLSerialSendMutex);
 8002160:	f7fe f9d6 	bl	8000510 <chMtxTryLock>
  if(IsLocked){
 8002164:	b948      	cbnz	r0, 800217a <SDSending.lto_priv.65+0x5a>
      {
        Temp = pbuf;
        if(DLLSendSingleFrameSerial(dllp, Temp))
          dllp->DLLStats.SentFrames++;
        else
          dllp->DLLStats.LostFrames++;
 8002166:	6923      	ldr	r3, [r4, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	6123      	str	r3, [r4, #16]
        (void)chMBPost(&dllp->DLLBuffers.DLLFreeOutputBuffer, (msg_t)pbuf, TIME_INFINITE);
 800216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002170:	4638      	mov	r0, r7
 8002172:	9901      	ldr	r1, [sp, #4]
 8002174:	f7fe fef4 	bl	8000f60 <chMBPost>
 8002178:	e7e1      	b.n	800213e <SDSending.lto_priv.65+0x1e>
 *
 */
bool DLLSendSingleFrameSerial(DLLDriver *driver, FrameStruct *Frame){
  bool IsLocked = chMtxTryLock(&driver->DLLSerialSendMutex);
  if(IsLocked){
    sdWrite(driver->config->SDriver, Frame, FRAME_SIZE_BYTE);
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	4649      	mov	r1, r9
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	220f      	movs	r2, #15
 8002182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002186:	3030      	adds	r0, #48	; 0x30
 8002188:	f001 fc6a 	bl	8003a60 <chOQWriteTimeout>
    palTogglePad(GPIOB, GPIOB_LED1);
 800218c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    chMtxUnlock(&driver->DLLSerialSendMutex);
 8002190:	4630      	mov	r0, r6
 */
bool DLLSendSingleFrameSerial(DLLDriver *driver, FrameStruct *Frame){
  bool IsLocked = chMtxTryLock(&driver->DLLSerialSendMutex);
  if(IsLocked){
    sdWrite(driver->config->SDriver, Frame, FRAME_SIZE_BYTE);
    palTogglePad(GPIOB, GPIOB_LED1);
 8002192:	f083 0320 	eor.w	r3, r3, #32
 8002196:	f8c8 300c 	str.w	r3, [r8, #12]
    chMtxUnlock(&driver->DLLSerialSendMutex);
 800219a:	f7fe fce9 	bl	8000b70 <chMtxUnlock>

      if(msg == MSG_OK)
      {
        Temp = pbuf;
        if(DLLSendSingleFrameSerial(dllp, Temp))
          dllp->DLLStats.SentFrames++;
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	e7e2      	b.n	800216c <SDSending.lto_priv.65+0x4c>
 80021a6:	bf00      	nop
 80021a8:	20002e30 	.word	0x20002e30
 80021ac:	08007170 	.word	0x08007170
 80021b0:	40010c00 	.word	0x40010c00
	...

080021c0 <SDReceiving.lto_priv.66>:
/**
 * @brief   The Main receiving function.
 * @details The SDReceiving thread responsible for receiving frames
 *          continuously from the serial.
 */
static THD_FUNCTION(SDReceiving, arg) {
 80021c0:	4605      	mov	r5, r0
 80021c2:	b580      	push	{r7, lr}
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <SDReceiving.lto_priv.66+0xa8>)
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <SDReceiving.lto_priv.66+0xac>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	b082      	sub	sp, #8
 80021cc:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	f100 0637 	add.w	r6, r0, #55	; 0x37
 80021d6:	f100 0948 	add.w	r9, r0, #72	; 0x48
 *
 * @param[in] driver  pointer to the DataLinkLayer driver object
 */
void DLLSyncProcedure(DLLDriver *driver)
{
  int FFs = 0;
 80021da:	f04f 0800 	mov.w	r8, #0
 80021de:	463c      	mov	r4, r7
  DLLDriver *driver = arg;
  while(true)
  {
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
      sdRead(driver->config->SDriver, &driver->DLLTempBuffer[i], 1);
 80021e0:	686b      	ldr	r3, [r5, #4]
 80021e2:	4621      	mov	r1, r4
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	3401      	adds	r4, #1
 80021e8:	300c      	adds	r0, #12
 80021ea:	2201      	movs	r2, #1
 80021ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f0:	f7fe fef6 	bl	8000fe0 <chIQReadTimeout>
  chRegSetThreadName("Main Receiving Func");
  DLLDriver *driver = arg;
  while(true)
  {
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
 80021f4:	42b4      	cmp	r4, r6
 80021f6:	d1f3      	bne.n	80021e0 <SDReceiving.lto_priv.66+0x20>
      sdRead(driver->config->SDriver, &driver->DLLTempBuffer[i], 1);

    if(CheckCRC(&driver->DLLTempBuffer) == 0)
 80021f8:	4638      	mov	r0, r7
 80021fa:	f7ff ff21 	bl	8002040 <CheckCRC>
 80021fe:	b918      	cbnz	r0, 8002208 <SDReceiving.lto_priv.66+0x48>
    {
      driver->DLLStats.ReceivedFrames++;
 8002200:	68eb      	ldr	r3, [r5, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60eb      	str	r3, [r5, #12]
 8002206:	e7ea      	b.n	80021de <SDReceiving.lto_priv.66+0x1e>
    }else
    {
      chMtxLock(&driver->DLLSerialSendMutex);
 8002208:	4648      	mov	r0, r9
 800220a:	f7fe fd51 	bl	8000cb0 <chMtxLock>
 */
void DLLSyncProcedure(DLLDriver *driver)
{
  int FFs = 0;
  char c;
  DLLSendSyncFrame(driver);
 800220e:	4628      	mov	r0, r5
 8002210:	f7ff ff76 	bl	8002100 <DLLSendSyncFrame>
  driver->DLLStats.SyncCounter++;
 8002214:	69ab      	ldr	r3, [r5, #24]
 *
 * @param[in] driver  pointer to the DataLinkLayer driver object
 */
void DLLSyncProcedure(DLLDriver *driver)
{
  int FFs = 0;
 8002216:	2400      	movs	r4, #0
  char c;
  DLLSendSyncFrame(driver);
  driver->DLLStats.SyncCounter++;
 8002218:	3301      	adds	r3, #1
 800221a:	61ab      	str	r3, [r5, #24]
 800221c:	e001      	b.n	8002222 <SDReceiving.lto_priv.66+0x62>

  while(FFs != FRAME_SIZE_BYTE)
 800221e:	2c0f      	cmp	r4, #15
 8002220:	d01c      	beq.n	800225c <SDReceiving.lto_priv.66+0x9c>
  {
    driver->DLLStats.SyncTimeout++;
    sdReadTimeout(driver->config->SDriver, &c, 1, US2ST(1000));
 8002222:	686a      	ldr	r2, [r5, #4]
  DLLSendSyncFrame(driver);
  driver->DLLStats.SyncCounter++;

  while(FFs != FRAME_SIZE_BYTE)
  {
    driver->DLLStats.SyncTimeout++;
 8002224:	696b      	ldr	r3, [r5, #20]
    sdReadTimeout(driver->config->SDriver, &c, 1, US2ST(1000));
 8002226:	6810      	ldr	r0, [r2, #0]
  DLLSendSyncFrame(driver);
  driver->DLLStats.SyncCounter++;

  while(FFs != FRAME_SIZE_BYTE)
  {
    driver->DLLStats.SyncTimeout++;
 8002228:	3301      	adds	r3, #1
 800222a:	616b      	str	r3, [r5, #20]
    sdReadTimeout(driver->config->SDriver, &c, 1, US2ST(1000));
 800222c:	300c      	adds	r0, #12
 800222e:	2302      	movs	r3, #2
 8002230:	f10d 0107 	add.w	r1, sp, #7
 8002234:	2201      	movs	r2, #1
 8002236:	f7fe fed3 	bl	8000fe0 <chIQReadTimeout>
    if(c == 0xFF)
 800223a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800223e:	2bff      	cmp	r3, #255	; 0xff
    {
      FFs++;
      c = 0x00;
    }
    if(driver->DLLStats.SyncTimeout >= SYNC_TIMEOUT_THRS){
 8002240:	696b      	ldr	r3, [r5, #20]
  {
    driver->DLLStats.SyncTimeout++;
    sdReadTimeout(driver->config->SDriver, &c, 1, US2ST(1000));
    if(c == 0xFF)
    {
      FFs++;
 8002242:	bf04      	itt	eq
 8002244:	3401      	addeq	r4, #1
      c = 0x00;
 8002246:	f88d 8007 	strbeq.w	r8, [sp, #7]
    }
    if(driver->DLLStats.SyncTimeout >= SYNC_TIMEOUT_THRS){
 800224a:	2b63      	cmp	r3, #99	; 0x63
 800224c:	dde7      	ble.n	800221e <SDReceiving.lto_priv.66+0x5e>
      DLLSendSyncFrame(driver);
 800224e:	4628      	mov	r0, r5
 8002250:	f7ff ff56 	bl	8002100 <DLLSendSyncFrame>
  int FFs = 0;
  char c;
  DLLSendSyncFrame(driver);
  driver->DLLStats.SyncCounter++;

  while(FFs != FRAME_SIZE_BYTE)
 8002254:	2c0f      	cmp	r4, #15
      FFs++;
      c = 0x00;
    }
    if(driver->DLLStats.SyncTimeout >= SYNC_TIMEOUT_THRS){
      DLLSendSyncFrame(driver);
      driver->DLLStats.SyncTimeout = 0;
 8002256:	f8c5 8014 	str.w	r8, [r5, #20]
  int FFs = 0;
  char c;
  DLLSendSyncFrame(driver);
  driver->DLLStats.SyncCounter++;

  while(FFs != FRAME_SIZE_BYTE)
 800225a:	d1e2      	bne.n	8002222 <SDReceiving.lto_priv.66+0x62>
    if(driver->DLLStats.SyncTimeout >= SYNC_TIMEOUT_THRS){
      DLLSendSyncFrame(driver);
      driver->DLLStats.SyncTimeout = 0;
    }
  }
  driver->DLLStats.SyncTimeout = 0;
 800225c:	f8c5 8014 	str.w	r8, [r5, #20]
      driver->DLLStats.ReceivedFrames++;
    }else
    {
      chMtxLock(&driver->DLLSerialSendMutex);
      DLLSyncProcedure(driver);
      chMtxUnlock(&driver->DLLSerialSendMutex);
 8002260:	4648      	mov	r0, r9
 8002262:	f7fe fc85 	bl	8000b70 <chMtxUnlock>
 8002266:	e7ba      	b.n	80021de <SDReceiving.lto_priv.66+0x1e>
 8002268:	20002e30 	.word	0x20002e30
 800226c:	08007180 	.word	0x08007180

08002270 <bmk13_execute.lto_priv.153>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8002270:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8002272:	482f      	ldr	r0, [pc, #188]	; (8002330 <bmk13_execute.lto_priv.153+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8002274:	4c2f      	ldr	r4, [pc, #188]	; (8002334 <bmk13_execute.lto_priv.153+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8002276:	f001 f88b 	bl	8003390 <test_print>
  test_printn(sizeof(ch_system_t));
 800227a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800227e:	f001 f897 	bl	80033b0 <test_printn>
  test_println(" bytes");
 8002282:	4620      	mov	r0, r4
 8002284:	f001 f864 	bl	8003350 <test_println>
  test_print("--- Thread: ");
 8002288:	482b      	ldr	r0, [pc, #172]	; (8002338 <bmk13_execute.lto_priv.153+0xc8>)
 800228a:	f001 f881 	bl	8003390 <test_print>
  test_printn(sizeof(thread_t));
 800228e:	2044      	movs	r0, #68	; 0x44
 8002290:	f001 f88e 	bl	80033b0 <test_printn>
  test_println(" bytes");
 8002294:	4620      	mov	r0, r4
 8002296:	f001 f85b 	bl	8003350 <test_println>
  test_print("--- Timer : ");
 800229a:	4828      	ldr	r0, [pc, #160]	; (800233c <bmk13_execute.lto_priv.153+0xcc>)
 800229c:	f001 f878 	bl	8003390 <test_print>
  test_printn(sizeof(virtual_timer_t));
 80022a0:	2014      	movs	r0, #20
 80022a2:	f001 f885 	bl	80033b0 <test_printn>
  test_println(" bytes");
 80022a6:	4620      	mov	r0, r4
 80022a8:	f001 f852 	bl	8003350 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 80022ac:	4824      	ldr	r0, [pc, #144]	; (8002340 <bmk13_execute.lto_priv.153+0xd0>)
 80022ae:	f001 f86f 	bl	8003390 <test_print>
  test_printn(sizeof(semaphore_t));
 80022b2:	200c      	movs	r0, #12
 80022b4:	f001 f87c 	bl	80033b0 <test_printn>
  test_println(" bytes");
 80022b8:	4620      	mov	r0, r4
 80022ba:	f001 f849 	bl	8003350 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 80022be:	4821      	ldr	r0, [pc, #132]	; (8002344 <bmk13_execute.lto_priv.153+0xd4>)
 80022c0:	f001 f866 	bl	8003390 <test_print>
  test_printn(sizeof(event_source_t));
 80022c4:	2004      	movs	r0, #4
 80022c6:	f001 f873 	bl	80033b0 <test_printn>
  test_println(" bytes");
 80022ca:	4620      	mov	r0, r4
 80022cc:	f001 f840 	bl	8003350 <test_println>
  test_print("--- EventL: ");
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <bmk13_execute.lto_priv.153+0xd8>)
 80022d2:	f001 f85d 	bl	8003390 <test_print>
  test_printn(sizeof(event_listener_t));
 80022d6:	2014      	movs	r0, #20
 80022d8:	f001 f86a 	bl	80033b0 <test_printn>
  test_println(" bytes");
 80022dc:	4620      	mov	r0, r4
 80022de:	f001 f837 	bl	8003350 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 80022e2:	481a      	ldr	r0, [pc, #104]	; (800234c <bmk13_execute.lto_priv.153+0xdc>)
 80022e4:	f001 f854 	bl	8003390 <test_print>
  test_printn(sizeof(mutex_t));
 80022e8:	2010      	movs	r0, #16
 80022ea:	f001 f861 	bl	80033b0 <test_printn>
  test_println(" bytes");
 80022ee:	4620      	mov	r0, r4
 80022f0:	f001 f82e 	bl	8003350 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <bmk13_execute.lto_priv.153+0xe0>)
 80022f6:	f001 f84b 	bl	8003390 <test_print>
  test_printn(sizeof(condition_variable_t));
 80022fa:	2008      	movs	r0, #8
 80022fc:	f001 f858 	bl	80033b0 <test_printn>
  test_println(" bytes");
 8002300:	4620      	mov	r0, r4
 8002302:	f001 f825 	bl	8003350 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <bmk13_execute.lto_priv.153+0xe4>)
 8002308:	f001 f842 	bl	8003390 <test_print>
  test_printn(sizeof(io_queue_t));
 800230c:	2024      	movs	r0, #36	; 0x24
 800230e:	f001 f84f 	bl	80033b0 <test_printn>
  test_println(" bytes");
 8002312:	4620      	mov	r0, r4
 8002314:	f001 f81c 	bl	8003350 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8002318:	480f      	ldr	r0, [pc, #60]	; (8002358 <bmk13_execute.lto_priv.153+0xe8>)
 800231a:	f001 f839 	bl	8003390 <test_print>
  test_printn(sizeof(mailbox_t));
 800231e:	2028      	movs	r0, #40	; 0x28
 8002320:	f001 f846 	bl	80033b0 <test_printn>
  test_println(" bytes");
 8002324:	4620      	mov	r0, r4
#endif
}
 8002326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800232a:	f001 b811 	b.w	8003350 <test_println>
 800232e:	bf00      	nop
 8002330:	08007194 	.word	0x08007194
 8002334:	080071a4 	.word	0x080071a4
 8002338:	080071ac 	.word	0x080071ac
 800233c:	080071bc 	.word	0x080071bc
 8002340:	080071cc 	.word	0x080071cc
 8002344:	080071dc 	.word	0x080071dc
 8002348:	080071ec 	.word	0x080071ec
 800234c:	080071fc 	.word	0x080071fc
 8002350:	0800720c 	.word	0x0800720c
 8002354:	0800721c 	.word	0x0800721c
 8002358:	0800722c 	.word	0x0800722c
 800235c:	00000000 	.word	0x00000000

08002360 <bmk12_execute.lto_priv.152>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8002360:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002362:	f000 ff35 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 8002366:	f004 fd03 	bl	8006d70 <test_start_timer.constprop.11>
 800236a:	4d14      	ldr	r5, [pc, #80]	; (80023bc <bmk12_execute.lto_priv.152+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800236c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800236e:	4814      	ldr	r0, [pc, #80]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 8002370:	f7fe fc9e 	bl	8000cb0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002374:	4812      	ldr	r0, [pc, #72]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 8002376:	f7fe fbfb 	bl	8000b70 <chMtxUnlock>
    chMtxLock(&mtx1);
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 800237c:	f7fe fc98 	bl	8000cb0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002380:	480f      	ldr	r0, [pc, #60]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 8002382:	f7fe fbf5 	bl	8000b70 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 8002388:	f7fe fc92 	bl	8000cb0 <chMtxLock>
    chMtxUnlock(&mtx1);
 800238c:	480c      	ldr	r0, [pc, #48]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 800238e:	f7fe fbef 	bl	8000b70 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 8002394:	f7fe fc8c 	bl	8000cb0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <bmk12_execute.lto_priv.152+0x60>)
 800239a:	f7fe fbe9 	bl	8000b70 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800239e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 80023a0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0e3      	beq.n	800236e <bmk12_execute.lto_priv.152+0xe>
  test_print("--- Score : ");
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <bmk12_execute.lto_priv.152+0x64>)
 80023a8:	f000 fff2 	bl	8003390 <test_print>
  test_printn(n * 4);
 80023ac:	00a0      	lsls	r0, r4, #2
 80023ae:	f000 ffff 	bl	80033b0 <test_printn>
  test_println(" lock+unlock/S");
}
 80023b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <bmk12_execute.lto_priv.152+0x68>)
 80023b8:	f000 bfca 	b.w	8003350 <test_println>
 80023bc:	20002e2c 	.word	0x20002e2c
 80023c0:	20000e80 	.word	0x20000e80
 80023c4:	0800723c 	.word	0x0800723c
 80023c8:	0800724c 	.word	0x0800724c
 80023cc:	00000000 	.word	0x00000000

080023d0 <bmk11_execute.lto_priv.150>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80023d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80023d2:	f000 fefd 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 80023d6:	f004 fccb 	bl	8006d70 <test_start_timer.constprop.11>
 80023da:	4d14      	ldr	r5, [pc, #80]	; (800242c <bmk11_execute.lto_priv.150+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80023dc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023e0:	f7fe fa8e 	bl	8000900 <chSemWait>
    chSemSignal(&sem1);
 80023e4:	4812      	ldr	r0, [pc, #72]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023e6:	f7fe f9ab 	bl	8000740 <chSemSignal>
    chSemWait(&sem1);
 80023ea:	4811      	ldr	r0, [pc, #68]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023ec:	f7fe fa88 	bl	8000900 <chSemWait>
    chSemSignal(&sem1);
 80023f0:	480f      	ldr	r0, [pc, #60]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023f2:	f7fe f9a5 	bl	8000740 <chSemSignal>
    chSemWait(&sem1);
 80023f6:	480e      	ldr	r0, [pc, #56]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023f8:	f7fe fa82 	bl	8000900 <chSemWait>
    chSemSignal(&sem1);
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 80023fe:	f7fe f99f 	bl	8000740 <chSemSignal>
    chSemWait(&sem1);
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 8002404:	f7fe fa7c 	bl	8000900 <chSemWait>
    chSemSignal(&sem1);
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <bmk11_execute.lto_priv.150+0x60>)
 800240a:	f7fe f999 	bl	8000740 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800240e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8002410:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0e3      	beq.n	80023de <bmk11_execute.lto_priv.150+0xe>
  test_print("--- Score : ");
 8002416:	4807      	ldr	r0, [pc, #28]	; (8002434 <bmk11_execute.lto_priv.150+0x64>)
 8002418:	f000 ffba 	bl	8003390 <test_print>
  test_printn(n * 4);
 800241c:	00a0      	lsls	r0, r4, #2
 800241e:	f000 ffc7 	bl	80033b0 <test_printn>
  test_println(" wait+signal/S");
}
 8002422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8002426:	4804      	ldr	r0, [pc, #16]	; (8002438 <bmk11_execute.lto_priv.150+0x68>)
 8002428:	f000 bf92 	b.w	8003350 <test_println>
 800242c:	20002e2c 	.word	0x20002e2c
 8002430:	20000eb4 	.word	0x20000eb4
 8002434:	0800723c 	.word	0x0800723c
 8002438:	0800725c 	.word	0x0800725c
 800243c:	00000000 	.word	0x00000000

08002440 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8002440:	b510      	push	{r4, lr}
 8002442:	4c06      	ldr	r4, [pc, #24]	; (800245c <thread3+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002444:	69a3      	ldr	r3, [r4, #24]
 8002446:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8002448:	075a      	lsls	r2, r3, #29
 800244a:	d406      	bmi.n	800245a <thread3+0x1a>
    chSemWait(&sem1);
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <thread3+0x20>)
 800244e:	f7fe fa57 	bl	8000900 <chSemWait>
 8002452:	69a3      	ldr	r3, [r4, #24]
 8002454:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8002456:	075b      	lsls	r3, r3, #29
 8002458:	d5f8      	bpl.n	800244c <thread3+0xc>
 800245a:	bd10      	pop	{r4, pc}
 800245c:	20002e30 	.word	0x20002e30
 8002460:	20000eb4 	.word	0x20000eb4
	...

08002470 <bmk10_execute.lto_priv.148>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8002470:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8002472:	f000 fead 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 8002476:	f004 fc7b 	bl	8006d70 <test_start_timer.constprop.11>
 800247a:	4d15      	ldr	r5, [pc, #84]	; (80024d0 <bmk10_execute.lto_priv.148+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800247c:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800247e:	2320      	movs	r3, #32
 8002480:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <bmk10_execute.lto_priv.148+0x64>)
 8002486:	2101      	movs	r1, #1
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <bmk10_execute.lto_priv.148+0x68>)
 800248a:	2300      	movs	r3, #0
 800248c:	f7fe fcb8 	bl	8000e00 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002490:	f242 7110 	movw	r1, #10000	; 0x2710
 8002494:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <bmk10_execute.lto_priv.148+0x68>)
 8002496:	2300      	movs	r3, #0
 8002498:	4810      	ldr	r0, [pc, #64]	; (80024dc <bmk10_execute.lto_priv.148+0x6c>)
 800249a:	f7fe fcb1 	bl	8000e00 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800249e:	480d      	ldr	r0, [pc, #52]	; (80024d4 <bmk10_execute.lto_priv.148+0x64>)
 80024a0:	f7fe fc6e 	bl	8000d80 <chVTDoResetI>
    chVTDoResetI(&vt2);
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <bmk10_execute.lto_priv.148+0x6c>)
 80024a6:	f7fe fc6b 	bl	8000d80 <chVTDoResetI>
 80024aa:	2300      	movs	r3, #0
 80024ac:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80024b0:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 80024b2:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0e2      	beq.n	800247e <bmk10_execute.lto_priv.148+0xe>
  test_print("--- Score : ");
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <bmk10_execute.lto_priv.148+0x70>)
 80024ba:	f000 ff69 	bl	8003390 <test_print>
  test_printn(n * 2);
 80024be:	0060      	lsls	r0, r4, #1
 80024c0:	f000 ff76 	bl	80033b0 <test_printn>
  test_println(" timers/S");
}
 80024c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 80024c8:	4806      	ldr	r0, [pc, #24]	; (80024e4 <bmk10_execute.lto_priv.148+0x74>)
 80024ca:	f000 bf41 	b.w	8003350 <test_println>
 80024ce:	bf00      	nop
 80024d0:	20002e2c 	.word	0x20002e2c
 80024d4:	20000e6c 	.word	0x20000e6c
 80024d8:	080020c1 	.word	0x080020c1
 80024dc:	20000e58 	.word	0x20000e58
 80024e0:	0800723c 	.word	0x0800723c
 80024e4:	0800726c 	.word	0x0800726c
	...

080024f0 <bmk9_execute.lto_priv.147>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80024f2:	4926      	ldr	r1, [pc, #152]	; (800258c <bmk9_execute.lto_priv.147+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80024f6:	2200      	movs	r2, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80024f8:	f101 0010 	add.w	r0, r1, #16
 80024fc:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80024fe:	605b      	str	r3, [r3, #4]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 8002500:	4614      	mov	r4, r2
 8002502:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002504:	60d9      	str	r1, [r3, #12]
  iqp->q_rdptr   = bp;
 8002506:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8002508:	6159      	str	r1, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800250a:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800250c:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 800250e:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8002510:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8002512:	f000 fe5d 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 8002516:	f004 fc2b 	bl	8006d70 <test_start_timer.constprop.11>
 800251a:	4e1e      	ldr	r6, [pc, #120]	; (8002594 <bmk9_execute.lto_priv.147+0xa4>)
 800251c:	2520      	movs	r5, #32
 800251e:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8002522:	2100      	movs	r1, #0
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 8002526:	f7fe fa4b 	bl	80009c0 <chIQPutI>
    chIQPutI(&iq, 1);
 800252a:	2101      	movs	r1, #1
 800252c:	4818      	ldr	r0, [pc, #96]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 800252e:	f7fe fa47 	bl	80009c0 <chIQPutI>
    chIQPutI(&iq, 2);
 8002532:	2102      	movs	r1, #2
 8002534:	4816      	ldr	r0, [pc, #88]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 8002536:	f7fe fa43 	bl	80009c0 <chIQPutI>
    chIQPutI(&iq, 3);
 800253a:	2103      	movs	r1, #3
 800253c:	4814      	ldr	r0, [pc, #80]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 800253e:	f7fe fa3f 	bl	80009c0 <chIQPutI>
 8002542:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002546:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800254a:	4811      	ldr	r0, [pc, #68]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 800254c:	f7fe fd88 	bl	8001060 <chIQGetTimeout>
 8002550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002554:	480e      	ldr	r0, [pc, #56]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 8002556:	f7fe fd83 	bl	8001060 <chIQGetTimeout>
 800255a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800255e:	480c      	ldr	r0, [pc, #48]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 8002560:	f7fe fd7e 	bl	8001060 <chIQGetTimeout>
 8002564:	480a      	ldr	r0, [pc, #40]	; (8002590 <bmk9_execute.lto_priv.147+0xa0>)
 8002566:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800256a:	f7fe fd79 	bl	8001060 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800256e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8002570:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0d3      	beq.n	800251e <bmk9_execute.lto_priv.147+0x2e>
  test_print("--- Score : ");
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <bmk9_execute.lto_priv.147+0xa8>)
 8002578:	f000 ff0a 	bl	8003390 <test_print>
  test_printn(n * 4);
 800257c:	00a0      	lsls	r0, r4, #2
 800257e:	f000 ff17 	bl	80033b0 <test_printn>
  test_println(" bytes/S");
}
 8002582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <bmk9_execute.lto_priv.147+0xac>)
 8002588:	f000 bee2 	b.w	8003350 <test_println>
 800258c:	20000ed4 	.word	0x20000ed4
 8002590:	20000e90 	.word	0x20000e90
 8002594:	20002e2c 	.word	0x20002e2c
 8002598:	0800723c 	.word	0x0800723c
 800259c:	08007278 	.word	0x08007278

080025a0 <bmk8_execute.lto_priv.146>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 80025a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80025a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002678 <bmk8_execute.lto_priv.146+0xd8>
 80025a8:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 80025aa:	ac04      	add	r4, sp, #16
 80025ac:	2300      	movs	r3, #0
 80025ae:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 80025b2:	f000 fe0d 	bl	80031d0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80025b6:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80025ba:	4f2a      	ldr	r7, [pc, #168]	; (8002664 <bmk8_execute.lto_priv.146+0xc4>)
 80025bc:	4e2a      	ldr	r6, [pc, #168]	; (8002668 <bmk8_execute.lto_priv.146+0xc8>)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	4638      	mov	r0, r7
 80025c2:	4633      	mov	r3, r6
 80025c4:	3a01      	subs	r2, #1
 80025c6:	9400      	str	r4, [sp, #0]
 80025c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025cc:	f7fe f920 	bl	8000810 <chThdCreateStatic>
 80025d0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80025d4:	4d25      	ldr	r5, [pc, #148]	; (800266c <bmk8_execute.lto_priv.146+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80025dc:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80025de:	4633      	mov	r3, r6
 80025e0:	3a01      	subs	r2, #1
 80025e2:	9400      	str	r4, [sp, #0]
 80025e4:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80025e8:	f7fe f912 	bl	8000810 <chThdCreateStatic>
 80025ec:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80025f0:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	f507 7024 	add.w	r0, r7, #656	; 0x290
 80025f8:	4633      	mov	r3, r6
 80025fa:	3a01      	subs	r2, #1
 80025fc:	9400      	str	r4, [sp, #0]
 80025fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002602:	f7fe f905 	bl	8000810 <chThdCreateStatic>
 8002606:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800260a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8002612:	4633      	mov	r3, r6
 8002614:	3a01      	subs	r2, #1
 8002616:	9400      	str	r4, [sp, #0]
 8002618:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800261c:	f7fe f8f8 	bl	8000810 <chThdCreateStatic>
 8002620:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002624:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002628:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800262a:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800262c:	3a01      	subs	r2, #1
 800262e:	4633      	mov	r3, r6
 8002630:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	f7fe f8eb 	bl	8000810 <chThdCreateStatic>
 800263a:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 800263c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002640:	f7fe fd4e 	bl	80010e0 <chThdSleep>
  test_terminate_threads();
 8002644:	f000 fdec 	bl	8003220 <test_terminate_threads>
  test_wait_threads();
 8002648:	f000 fdd2 	bl	80031f0 <test_wait_threads>

  test_print("--- Score : ");
 800264c:	4808      	ldr	r0, [pc, #32]	; (8002670 <bmk8_execute.lto_priv.146+0xd0>)
 800264e:	f000 fe9f 	bl	8003390 <test_print>
  test_printn(n);
 8002652:	9803      	ldr	r0, [sp, #12]
 8002654:	f000 feac 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <bmk8_execute.lto_priv.146+0xd4>)
 800265a:	f000 fe79 	bl	8003350 <test_println>
}
 800265e:	b004      	add	sp, #16
 8002660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002664:	20002fa8 	.word	0x20002fa8
 8002668:	080026f1 	.word	0x080026f1
 800266c:	20000ec0 	.word	0x20000ec0
 8002670:	0800723c 	.word	0x0800723c
 8002674:	08007284 	.word	0x08007284
 8002678:	20002e30 	.word	0x20002e30
 800267c:	00000000 	.word	0x00000000

08002680 <bmk6_execute.lto_priv.143>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <bmk6_execute.lto_priv.143+0x4c>)
 8002684:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002686:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8002688:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800268a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800268c:	4627      	mov	r7, r4
 800268e:	4e10      	ldr	r6, [pc, #64]	; (80026d0 <bmk6_execute.lto_priv.143+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8002690:	3501      	adds	r5, #1
  test_wait_tick();
 8002692:	f000 fd9d 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 8002696:	f004 fb6b 	bl	8006d70 <test_start_timer.constprop.11>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <bmk6_execute.lto_priv.143+0x54>)
 800269c:	9700      	str	r7, [sp, #0]
 800269e:	480e      	ldr	r0, [pc, #56]	; (80026d8 <bmk6_execute.lto_priv.143+0x58>)
 80026a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026a4:	462a      	mov	r2, r5
 80026a6:	f7fe f8b3 	bl	8000810 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80026aa:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 80026ac:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f3      	beq.n	800269a <bmk6_execute.lto_priv.143+0x1a>
  test_print("--- Score : ");
 80026b2:	480a      	ldr	r0, [pc, #40]	; (80026dc <bmk6_execute.lto_priv.143+0x5c>)
 80026b4:	f000 fe6c 	bl	8003390 <test_print>
  test_printn(n);
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 fe79 	bl	80033b0 <test_printn>
  test_println(" threads/S");
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <bmk6_execute.lto_priv.143+0x60>)
}
 80026c0:	b003      	add	sp, #12
 80026c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80026c6:	f000 be43 	b.w	8003350 <test_println>
 80026ca:	bf00      	nop
 80026cc:	20002e30 	.word	0x20002e30
 80026d0:	20002e2c 	.word	0x20002e2c
 80026d4:	08002fc1 	.word	0x08002fc1
 80026d8:	20002fa8 	.word	0x20002fa8
 80026dc:	0800723c 	.word	0x0800723c
 80026e0:	08007290 	.word	0x08007290
	...

080026f0 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	4d08      	ldr	r5, [pc, #32]	; (8002718 <thread8+0x28>)

  do {
    chThdYield();
 80026f6:	f7fd ff93 	bl	8000620 <chThdYield>
    chThdYield();
 80026fa:	f7fd ff91 	bl	8000620 <chThdYield>
    chThdYield();
 80026fe:	f7fd ff8f 	bl	8000620 <chThdYield>
    chThdYield();
 8002702:	f7fd ff8d 	bl	8000620 <chThdYield>
    (*(uint32_t *)p) += 4;
 8002706:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002708:	69aa      	ldr	r2, [r5, #24]
 800270a:	3304      	adds	r3, #4
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8002710:	075b      	lsls	r3, r3, #29
 8002712:	d5f0      	bpl.n	80026f6 <thread8+0x6>
}
 8002714:	bd38      	pop	{r3, r4, r5, pc}
 8002716:	bf00      	nop
 8002718:	20002e30 	.word	0x20002e30
 800271c:	00000000 	.word	0x00000000

08002720 <bmk7_execute.lto_priv.145>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002724:	4e3a      	ldr	r6, [pc, #232]	; (8002810 <bmk7_execute.lto_priv.145+0xf0>)
 8002726:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002728:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 800272a:	2400      	movs	r4, #0
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002732:	3205      	adds	r2, #5
 8002734:	4b37      	ldr	r3, [pc, #220]	; (8002814 <bmk7_execute.lto_priv.145+0xf4>)
 8002736:	4838      	ldr	r0, [pc, #224]	; (8002818 <bmk7_execute.lto_priv.145+0xf8>)
 8002738:	9400      	str	r4, [sp, #0]
 800273a:	f7fe f869 	bl	8000810 <chThdCreateStatic>
 800273e:	69b3      	ldr	r3, [r6, #24]
 8002740:	4d36      	ldr	r5, [pc, #216]	; (800281c <bmk7_execute.lto_priv.145+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8002748:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 800274a:	3204      	adds	r2, #4
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <bmk7_execute.lto_priv.145+0xf4>)
 800274e:	9400      	str	r4, [sp, #0]
 8002750:	4833      	ldr	r0, [pc, #204]	; (8002820 <bmk7_execute.lto_priv.145+0x100>)
 8002752:	f7fe f85d 	bl	8000810 <chThdCreateStatic>
 8002756:	69b3      	ldr	r3, [r6, #24]
 8002758:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002760:	3203      	adds	r2, #3
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <bmk7_execute.lto_priv.145+0xf4>)
 8002764:	482f      	ldr	r0, [pc, #188]	; (8002824 <bmk7_execute.lto_priv.145+0x104>)
 8002766:	9400      	str	r4, [sp, #0]
 8002768:	f7fe f852 	bl	8000810 <chThdCreateStatic>
 800276c:	69b3      	ldr	r3, [r6, #24]
 800276e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002776:	3202      	adds	r2, #2
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <bmk7_execute.lto_priv.145+0xf4>)
 800277a:	482b      	ldr	r0, [pc, #172]	; (8002828 <bmk7_execute.lto_priv.145+0x108>)
 800277c:	9400      	str	r4, [sp, #0]
 800277e:	f7fe f847 	bl	8000810 <chThdCreateStatic>
 8002782:	69b3      	ldr	r3, [r6, #24]
 8002784:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800278c:	3201      	adds	r2, #1
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <bmk7_execute.lto_priv.145+0xf4>)
 8002790:	4826      	ldr	r0, [pc, #152]	; (800282c <bmk7_execute.lto_priv.145+0x10c>)
 8002792:	9400      	str	r4, [sp, #0]
 8002794:	f7fe f83c 	bl	8000810 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002798:	46a1      	mov	r9, r4
 800279a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800279c:	f000 fd18 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 80027a0:	f004 fae6 	bl	8006d70 <test_start_timer.constprop.11>
 80027a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002840 <bmk7_execute.lto_priv.145+0x120>
 80027a8:	2720      	movs	r7, #32
 80027aa:	2620      	movs	r6, #32
 80027ac:	f387 8811 	msr	BASEPRI, r7
 80027b0:	481f      	ldr	r0, [pc, #124]	; (8002830 <bmk7_execute.lto_priv.145+0x110>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	f7fe faa4 	bl	8000d00 <chSemResetI>
 80027b8:	2500      	movs	r5, #0
  chSchRescheduleS();
 80027ba:	f7fd ff69 	bl	8000690 <chSchRescheduleS>
 80027be:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80027c2:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 80027c6:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <bmk7_execute.lto_priv.145+0x8a>
  test_terminate_threads();
 80027cc:	f000 fd28 	bl	8003220 <test_terminate_threads>
 80027d0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80027d4:	4816      	ldr	r0, [pc, #88]	; (8002830 <bmk7_execute.lto_priv.145+0x110>)
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fe fa92 	bl	8000d00 <chSemResetI>
  chSchRescheduleS();
 80027dc:	f7fd ff58 	bl	8000690 <chSchRescheduleS>
 80027e0:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 80027e4:	f000 fd04 	bl	80031f0 <test_wait_threads>

  test_print("--- Score : ");
 80027e8:	4812      	ldr	r0, [pc, #72]	; (8002834 <bmk7_execute.lto_priv.145+0x114>)
 80027ea:	f000 fdd1 	bl	8003390 <test_print>
  test_printn(n);
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 fdde 	bl	80033b0 <test_printn>
  test_print(" reschedules/S, ");
 80027f4:	4810      	ldr	r0, [pc, #64]	; (8002838 <bmk7_execute.lto_priv.145+0x118>)
 80027f6:	f000 fdcb 	bl	8003390 <test_print>
  test_printn(n * 6);
 80027fa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80027fe:	0040      	lsls	r0, r0, #1
 8002800:	f000 fdd6 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <bmk7_execute.lto_priv.145+0x11c>)
}
 8002806:	b003      	add	sp, #12
 8002808:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 800280c:	f000 bda0 	b.w	8003350 <test_println>
 8002810:	20002e30 	.word	0x20002e30
 8002814:	08002441 	.word	0x08002441
 8002818:	20002fa8 	.word	0x20002fa8
 800281c:	20000ec0 	.word	0x20000ec0
 8002820:	200030f0 	.word	0x200030f0
 8002824:	20003238 	.word	0x20003238
 8002828:	20003380 	.word	0x20003380
 800282c:	200034c8 	.word	0x200034c8
 8002830:	20000eb4 	.word	0x20000eb4
 8002834:	0800723c 	.word	0x0800723c
 8002838:	0800729c 	.word	0x0800729c
 800283c:	08007284 	.word	0x08007284
 8002840:	20002e2c 	.word	0x20002e2c
	...

08002850 <bmk5_execute.lto_priv.142>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <bmk5_execute.lto_priv.142+0x50>)
 8002854:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002856:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8002858:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800285a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800285c:	4627      	mov	r7, r4
 800285e:	4e11      	ldr	r6, [pc, #68]	; (80028a4 <bmk5_execute.lto_priv.142+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8002860:	3d01      	subs	r5, #1
  test_wait_tick();
 8002862:	f000 fcb5 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 8002866:	f004 fa83 	bl	8006d70 <test_start_timer.constprop.11>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <bmk5_execute.lto_priv.142+0x58>)
 800286c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002870:	462a      	mov	r2, r5
 8002872:	9700      	str	r7, [sp, #0]
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <bmk5_execute.lto_priv.142+0x5c>)
 8002876:	f7fd ffcb 	bl	8000810 <chThdCreateStatic>
 800287a:	f7fe f869 	bl	8000950 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800287e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8002880:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f1      	beq.n	800286a <bmk5_execute.lto_priv.142+0x1a>
  test_print("--- Score : ");
 8002886:	480a      	ldr	r0, [pc, #40]	; (80028b0 <bmk5_execute.lto_priv.142+0x60>)
 8002888:	f000 fd82 	bl	8003390 <test_print>
  test_printn(n);
 800288c:	4620      	mov	r0, r4
 800288e:	f000 fd8f 	bl	80033b0 <test_printn>
  test_println(" threads/S");
 8002892:	4808      	ldr	r0, [pc, #32]	; (80028b4 <bmk5_execute.lto_priv.142+0x64>)
}
 8002894:	b003      	add	sp, #12
 8002896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800289a:	f000 bd59 	b.w	8003350 <test_println>
 800289e:	bf00      	nop
 80028a0:	20002e30 	.word	0x20002e30
 80028a4:	20002e2c 	.word	0x20002e2c
 80028a8:	08002fc1 	.word	0x08002fc1
 80028ac:	20002fa8 	.word	0x20002fa8
 80028b0:	0800723c 	.word	0x0800723c
 80028b4:	08007290 	.word	0x08007290
	...

080028c0 <bmk4_execute.lto_priv.141>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 80028c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <bmk4_execute.lto_priv.141+0x9c>)
 80028c6:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80028c8:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80028ca:	2500      	movs	r5, #0
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80028d2:	3201      	adds	r2, #1
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <bmk4_execute.lto_priv.141+0xa0>)
 80028d6:	4823      	ldr	r0, [pc, #140]	; (8002964 <bmk4_execute.lto_priv.141+0xa4>)
 80028d8:	9500      	str	r5, [sp, #0]
 80028da:	f7fd ff99 	bl	8000810 <chThdCreateStatic>
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <bmk4_execute.lto_priv.141+0xa8>)
 80028e0:	4604      	mov	r4, r0
 80028e2:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80028e4:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 80028e6:	f000 fc73 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 80028ea:	f004 fa41 	bl	8006d70 <test_start_timer.constprop.11>
 80028ee:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002974 <bmk4_execute.lto_priv.141+0xb4>
 80028f2:	f04f 0820 	mov.w	r8, #32
 80028f6:	2720      	movs	r7, #32
 80028f8:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 80028fc:	2100      	movs	r1, #0
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fd feee 	bl	80006e0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8002904:	4620      	mov	r0, r4
 8002906:	2100      	movs	r1, #0
 8002908:	f7fd feea 	bl	80006e0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 800290c:	4620      	mov	r0, r4
 800290e:	2100      	movs	r1, #0
 8002910:	f7fd fee6 	bl	80006e0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8002914:	4620      	mov	r0, r4
 8002916:	2100      	movs	r1, #0
 8002918:	f7fd fee2 	bl	80006e0 <chSchWakeupS>
 800291c:	2600      	movs	r6, #0
 800291e:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002922:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8002926:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0e4      	beq.n	80028f6 <bmk4_execute.lto_priv.141+0x36>
 800292c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	4620      	mov	r0, r4
 8002936:	f7fd fed3 	bl	80006e0 <chSchWakeupS>
 800293a:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 800293e:	f000 fc57 	bl	80031f0 <test_wait_threads>
  test_print("--- Score : ");
 8002942:	480a      	ldr	r0, [pc, #40]	; (800296c <bmk4_execute.lto_priv.141+0xac>)
 8002944:	f000 fd24 	bl	8003390 <test_print>
  test_printn(n * 2);
 8002948:	0068      	lsls	r0, r5, #1
 800294a:	f000 fd31 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 800294e:	4808      	ldr	r0, [pc, #32]	; (8002970 <bmk4_execute.lto_priv.141+0xb0>)
}
 8002950:	b002      	add	sp, #8
 8002952:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8002956:	f000 bcfb 	b.w	8003350 <test_println>
 800295a:	bf00      	nop
 800295c:	20002e30 	.word	0x20002e30
 8002960:	08002981 	.word	0x08002981
 8002964:	20002fa8 	.word	0x20002fa8
 8002968:	20000ec0 	.word	0x20000ec0
 800296c:	0800723c 	.word	0x0800723c
 8002970:	08007284 	.word	0x08007284
 8002974:	20002e2c 	.word	0x20002e2c
	...

08002980 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8002982:	b510      	push	{r4, lr}
 8002984:	2320      	movs	r3, #32
 8002986:	6994      	ldr	r4, [r2, #24]
 8002988:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800298c:	2003      	movs	r0, #3
 800298e:	f7fd ff7f 	bl	8000890 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8002992:	6a23      	ldr	r3, [r4, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f9      	beq.n	800298c <thread4+0xc>
 8002998:	2300      	movs	r3, #0
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	bd10      	pop	{r4, pc}
 80029a0:	20002e30 	.word	0x20002e30
	...

080029b0 <thread2>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2620      	movs	r6, #32
 80029b4:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80029b6:	f7fd ff83 	bl	80008c0 <chMsgWait>
 80029ba:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80029bc:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80029c0:	4621      	mov	r1, r4
 80029c2:	f7fd fe8d 	bl	80006e0 <chSchWakeupS>
 80029c6:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	d1f3      	bne.n	80029b6 <thread2+0x6>
}
 80029ce:	bd70      	pop	{r4, r5, r6, pc}

080029d0 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 80029d4:	f000 fbfc 	bl	80031d0 <test_wait_tick>
  test_start_timer(1000);
 80029d8:	f004 f9ca 	bl	8006d70 <test_start_timer.constprop.11>
 80029dc:	4e07      	ldr	r6, [pc, #28]	; (80029fc <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 80029de:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 80029e0:	4628      	mov	r0, r5
 80029e2:	2101      	movs	r1, #1
 80029e4:	f7fe f81c 	bl	8000a20 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80029e8:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 80029ea:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f7      	beq.n	80029e0 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 80029f0:	4628      	mov	r0, r5
 80029f2:	2100      	movs	r1, #0
 80029f4:	f7fe f814 	bl	8000a20 <chMsgSend>
  return n;
}
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	20002e2c 	.word	0x20002e2c

08002a00 <bmk3_execute.lto_priv.140>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8002a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a04:	4f2c      	ldr	r7, [pc, #176]	; (8002ab8 <bmk3_execute.lto_priv.140+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002a06:	4e2d      	ldr	r6, [pc, #180]	; (8002abc <bmk3_execute.lto_priv.140+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8002a0a:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	2500      	movs	r5, #0
 8002a10:	4630      	mov	r0, r6
 8002a12:	3201      	adds	r2, #1
 8002a14:	9500      	str	r5, [sp, #0]
 8002a16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <bmk3_execute.lto_priv.140+0xc0>)
 8002a1c:	f7fd fef8 	bl	8000810 <chThdCreateStatic>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4c28      	ldr	r4, [pc, #160]	; (8002ac4 <bmk3_execute.lto_priv.140+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002ad4 <bmk3_execute.lto_priv.140+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002a2a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	3a02      	subs	r2, #2
 8002a30:	9500      	str	r5, [sp, #0]
 8002a32:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8002a36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a3a:	f7fd fee9 	bl	8000810 <chThdCreateStatic>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8002a48:	4643      	mov	r3, r8
 8002a4a:	3a03      	subs	r2, #3
 8002a4c:	9500      	str	r5, [sp, #0]
 8002a4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a52:	f7fd fedd 	bl	8000810 <chThdCreateStatic>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8002a60:	4643      	mov	r3, r8
 8002a62:	3a04      	subs	r2, #4
 8002a64:	9500      	str	r5, [sp, #0]
 8002a66:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a6a:	f7fd fed1 	bl	8000810 <chThdCreateStatic>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8002a70:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a74:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8002a76:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8002a78:	3a05      	subs	r2, #5
 8002a7a:	4643      	mov	r3, r8
 8002a7c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8002a80:	9500      	str	r5, [sp, #0]
 8002a82:	f7fd fec5 	bl	8000810 <chThdCreateStatic>
 8002a86:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8002a88:	6820      	ldr	r0, [r4, #0]
 8002a8a:	f7ff ffa1 	bl	80029d0 <msg_loop_test>
 8002a8e:	4604      	mov	r4, r0
  test_wait_threads();
 8002a90:	f000 fbae 	bl	80031f0 <test_wait_threads>
  test_print("--- Score : ");
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <bmk3_execute.lto_priv.140+0xc8>)
 8002a96:	f000 fc7b 	bl	8003390 <test_print>
  test_printn(n);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 fc88 	bl	80033b0 <test_printn>
  test_print(" msgs/S, ");
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <bmk3_execute.lto_priv.140+0xcc>)
 8002aa2:	f000 fc75 	bl	8003390 <test_print>
  test_printn(n << 1);
 8002aa6:	0060      	lsls	r0, r4, #1
 8002aa8:	f000 fc82 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <bmk3_execute.lto_priv.140+0xd0>)
}
 8002aae:	b002      	add	sp, #8
 8002ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002ab4:	f000 bc4c 	b.w	8003350 <test_println>
 8002ab8:	20002e30 	.word	0x20002e30
 8002abc:	20002fa8 	.word	0x20002fa8
 8002ac0:	080029b1 	.word	0x080029b1
 8002ac4:	20000ec0 	.word	0x20000ec0
 8002ac8:	0800723c 	.word	0x0800723c
 8002acc:	080072b0 	.word	0x080072b0
 8002ad0:	08007284 	.word	0x08007284
 8002ad4:	08002fc1 	.word	0x08002fc1
	...

08002ae0 <bmk2_execute.lto_priv.139>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8002ae0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <bmk2_execute.lto_priv.139+0x50>)
 8002ae4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002ae6:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002af0:	3201      	adds	r2, #1
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	480f      	ldr	r0, [pc, #60]	; (8002b34 <bmk2_execute.lto_priv.139+0x54>)
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <bmk2_execute.lto_priv.139+0x58>)
 8002af8:	f7fd fe8a 	bl	8000810 <chThdCreateStatic>
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <bmk2_execute.lto_priv.139+0x5c>)
 8002afe:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8002b00:	f7ff ff66 	bl	80029d0 <msg_loop_test>
 8002b04:	4604      	mov	r4, r0
  test_wait_threads();
 8002b06:	f000 fb73 	bl	80031f0 <test_wait_threads>
  test_print("--- Score : ");
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <bmk2_execute.lto_priv.139+0x60>)
 8002b0c:	f000 fc40 	bl	8003390 <test_print>
  test_printn(n);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f000 fc4d 	bl	80033b0 <test_printn>
  test_print(" msgs/S, ");
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <bmk2_execute.lto_priv.139+0x64>)
 8002b18:	f000 fc3a 	bl	8003390 <test_print>
  test_printn(n << 1);
 8002b1c:	0060      	lsls	r0, r4, #1
 8002b1e:	f000 fc47 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 8002b22:	4809      	ldr	r0, [pc, #36]	; (8002b48 <bmk2_execute.lto_priv.139+0x68>)
}
 8002b24:	b002      	add	sp, #8
 8002b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002b2a:	f000 bc11 	b.w	8003350 <test_println>
 8002b2e:	bf00      	nop
 8002b30:	20002e30 	.word	0x20002e30
 8002b34:	20002fa8 	.word	0x20002fa8
 8002b38:	080029b1 	.word	0x080029b1
 8002b3c:	20000ec0 	.word	0x20000ec0
 8002b40:	0800723c 	.word	0x0800723c
 8002b44:	080072b0 	.word	0x080072b0
 8002b48:	08007284 	.word	0x08007284
 8002b4c:	00000000 	.word	0x00000000

08002b50 <bmk1_execute.lto_priv.138>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8002b50:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <bmk1_execute.lto_priv.138+0x50>)
 8002b54:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002b56:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b60:	3a01      	subs	r2, #1
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <bmk1_execute.lto_priv.138+0x54>)
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <bmk1_execute.lto_priv.138+0x58>)
 8002b68:	f7fd fe52 	bl	8000810 <chThdCreateStatic>
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <bmk1_execute.lto_priv.138+0x5c>)
 8002b6e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8002b70:	f7ff ff2e 	bl	80029d0 <msg_loop_test>
 8002b74:	4604      	mov	r4, r0
  test_wait_threads();
 8002b76:	f000 fb3b 	bl	80031f0 <test_wait_threads>
  test_print("--- Score : ");
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <bmk1_execute.lto_priv.138+0x60>)
 8002b7c:	f000 fc08 	bl	8003390 <test_print>
  test_printn(n);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 fc15 	bl	80033b0 <test_printn>
  test_print(" msgs/S, ");
 8002b86:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <bmk1_execute.lto_priv.138+0x64>)
 8002b88:	f000 fc02 	bl	8003390 <test_print>
  test_printn(n << 1);
 8002b8c:	0060      	lsls	r0, r4, #1
 8002b8e:	f000 fc0f 	bl	80033b0 <test_printn>
  test_println(" ctxswc/S");
 8002b92:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <bmk1_execute.lto_priv.138+0x68>)
}
 8002b94:	b002      	add	sp, #8
 8002b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002b9a:	f000 bbd9 	b.w	8003350 <test_println>
 8002b9e:	bf00      	nop
 8002ba0:	20002e30 	.word	0x20002e30
 8002ba4:	20002fa8 	.word	0x20002fa8
 8002ba8:	080029b1 	.word	0x080029b1
 8002bac:	20000ec0 	.word	0x20000ec0
 8002bb0:	0800723c 	.word	0x0800723c
 8002bb4:	080072b0 	.word	0x080072b0
 8002bb8:	08007284 	.word	0x08007284
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <sys3_execute.lto_priv.91>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	2420      	movs	r4, #32
 8002bc4:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7fe fab9 	bl	8001140 <chSysIntegrityCheckI>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8002bd4:	f080 0101 	eor.w	r1, r0, #1
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 fb88 	bl	80032f0 <_test_assert>
 8002be0:	4605      	mov	r5, r0
 8002be2:	b100      	cbz	r0, 8002be6 <sys3_execute.lto_priv.91+0x26>
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
 8002be6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8002bea:	2002      	movs	r0, #2
 8002bec:	f7fe faa8 	bl	8001140 <chSysIntegrityCheckI>
 8002bf0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 8002bf4:	f080 0101 	eor.w	r1, r0, #1
 8002bf8:	b2c9      	uxtb	r1, r1
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	f000 fb78 	bl	80032f0 <_test_assert>
 8002c00:	4605      	mov	r5, r0
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d1ee      	bne.n	8002be4 <sys3_execute.lto_priv.91+0x24>
 8002c06:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8002c0a:	2004      	movs	r0, #4
 8002c0c:	f7fe fa98 	bl	8001140 <chSysIntegrityCheckI>
 8002c10:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8002c14:	f080 0101 	eor.w	r1, r0, #1
 8002c18:	b2c9      	uxtb	r1, r1
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f000 fb68 	bl	80032f0 <_test_assert>
 8002c20:	4605      	mov	r5, r0
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d1de      	bne.n	8002be4 <sys3_execute.lto_priv.91+0x24>
 8002c26:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f7fe fa88 	bl	8001140 <chSysIntegrityCheckI>
 8002c30:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
}
 8002c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8002c38:	f080 0101 	eor.w	r1, r0, #1
 8002c3c:	b2c9      	uxtb	r1, r1
 8002c3e:	2004      	movs	r0, #4
 8002c40:	f000 bb56 	b.w	80032f0 <_test_assert>
	...

08002c50 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002c50:	b40e      	push	{r1, r2, r3}
 8002c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c5a:	f852 9b04 	ldr.w	r9, [r2], #4
 8002c5e:	4682      	mov	sl, r0
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002c60:	46cb      	mov	fp, r9
 8002c62:	4615      	mov	r5, r2
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002c64:	9202      	str	r2, [sp, #8]
 8002c66:	f10d 030d 	add.w	r3, sp, #13
 8002c6a:	aa03      	add	r2, sp, #12
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002c70:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002c74:	f89b 1000 	ldrb.w	r1, [fp]
 8002c78:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002c7c:	b179      	cbz	r1, 8002c9e <chprintf+0x4e>
      return n;
    if (c != '%') {
 8002c7e:	2925      	cmp	r1, #37	; 0x25
 8002c80:	d013      	beq.n	8002caa <chprintf+0x5a>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002c82:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002c84:	f8da 2000 	ldr.w	r2, [sl]
 8002c88:	4650      	mov	r0, sl
 8002c8a:	6892      	ldr	r2, [r2, #8]
 8002c8c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002c8e:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8002c92:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002c96:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002c9a:	2900      	cmp	r1, #0
 8002c9c:	d1ef      	bne.n	8002c7e <chprintf+0x2e>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	b006      	add	sp, #24
 8002ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca6:	b003      	add	sp, #12
 8002ca8:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002caa:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8002cae:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002cb0:	2a2d      	cmp	r2, #45	; 0x2d
 8002cb2:	bf03      	ittte	eq
 8002cb4:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8002cb8:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8002cbc:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002cc0:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002cc4:	2a30      	cmp	r2, #48	; 0x30
 8002cc6:	bf03      	ittte	eq
 8002cc8:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8002cca:	3301      	addeq	r3, #1
      filler = '0';
 8002ccc:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002cce:	2720      	movne	r7, #32
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	e006      	b.n	8002ce2 <chprintf+0x92>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8002cd4:	782b      	ldrb	r3, [r5, #0]
 8002cd6:	3504      	adds	r5, #4
 8002cd8:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8002cdc:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8002ce0:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002ce2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8002cea:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8002cec:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002cf0:	d9f2      	bls.n	8002cd8 <chprintf+0x88>
        c -= '0';
      else if (c == '*')
 8002cf2:	2a2a      	cmp	r2, #42	; 0x2a
 8002cf4:	d0ee      	beq.n	8002cd4 <chprintf+0x84>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8002cf6:	2a2e      	cmp	r2, #46	; 0x2e
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	d043      	beq.n	8002d86 <chprintf+0x136>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002cfe:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002d02:	2b4c      	cmp	r3, #76	; 0x4c
 8002d04:	d04e      	beq.n	8002da4 <chprintf+0x154>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002d06:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8002d0a:	2834      	cmp	r0, #52	; 0x34
 8002d0c:	f200 80f6 	bhi.w	8002efc <chprintf+0x2ac>
 8002d10:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002d14:	00f400ea 	.word	0x00f400ea
 8002d18:	00f400f4 	.word	0x00f400f4
 8002d1c:	00ea00f4 	.word	0x00ea00f4
 8002d20:	00f400f4 	.word	0x00f400f4
 8002d24:	00f400f4 	.word	0x00f400f4
 8002d28:	00e800f4 	.word	0x00e800f4
 8002d2c:	00f400f4 	.word	0x00f400f4
 8002d30:	00f400f4 	.word	0x00f400f4
 8002d34:	00dd00f4 	.word	0x00dd00f4
 8002d38:	00f400f4 	.word	0x00f400f4
 8002d3c:	00f400f1 	.word	0x00f400f1
 8002d40:	00f400f4 	.word	0x00f400f4
 8002d44:	00f400f4 	.word	0x00f400f4
 8002d48:	00f400f4 	.word	0x00f400f4
 8002d4c:	00f400f4 	.word	0x00f400f4
 8002d50:	00a100f4 	.word	0x00a100f4
 8002d54:	00f400ea 	.word	0x00f400ea
 8002d58:	00f400f4 	.word	0x00f400f4
 8002d5c:	00ea00f4 	.word	0x00ea00f4
 8002d60:	00f400f4 	.word	0x00f400f4
 8002d64:	00f400f4 	.word	0x00f400f4
 8002d68:	00e800f4 	.word	0x00e800f4
 8002d6c:	00f400f4 	.word	0x00f400f4
 8002d70:	007100f4 	.word	0x007100f4
 8002d74:	00dd00f4 	.word	0x00dd00f4
 8002d78:	00f400f4 	.word	0x00f400f4
 8002d7c:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8002d7e:	782b      	ldrb	r3, [r5, #0]
 8002d80:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8002d82:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8002d86:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8002d8a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8002d8e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d9f4      	bls.n	8002d82 <chprintf+0x132>
          c -= '0';
        else if (c == '*')
 8002d98:	2a2a      	cmp	r2, #42	; 0x2a
 8002d9a:	d0f0      	beq.n	8002d7e <chprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002d9c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002da0:	2b4c      	cmp	r3, #76	; 0x4c
 8002da2:	d1b0      	bne.n	8002d06 <chprintf+0xb6>
      is_long = TRUE;
      if (*fmt)
 8002da4:	f89b 3000 	ldrb.w	r3, [fp]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a7 	beq.w	8002efc <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002dae:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002db2:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002db6:	2a34      	cmp	r2, #52	; 0x34
 8002db8:	f200 809f 	bhi.w	8002efa <chprintf+0x2aa>
 8002dbc:	e8df f002 	tbb	[pc, r2]
 8002dc0:	9d9d9d94 	.word	0x9d9d9d94
 8002dc4:	9d9d949d 	.word	0x9d9d949d
 8002dc8:	929d9d9d 	.word	0x929d9d9d
 8002dcc:	9d9d9d9d 	.word	0x9d9d9d9d
 8002dd0:	9d9d879d 	.word	0x9d9d879d
 8002dd4:	9d9d9d9b 	.word	0x9d9d9d9b
 8002dd8:	9d9d9d9d 	.word	0x9d9d9d9d
 8002ddc:	4b9d9d9d 	.word	0x4b9d9d9d
 8002de0:	9d9d9d94 	.word	0x9d9d9d94
 8002de4:	9d9d949d 	.word	0x9d9d949d
 8002de8:	929d9d9d 	.word	0x929d9d9d
 8002dec:	1b9d9d9d 	.word	0x1b9d9d9d
 8002df0:	9d9d879d 	.word	0x9d9d879d
 8002df4:	9b          	.byte	0x9b
 8002df5:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002df6:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <chprintf+0x310>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002dfa:	3504      	adds	r5, #4
        s = "(null)";
 8002dfc:	2c00      	cmp	r4, #0
 8002dfe:	bf08      	it	eq
 8002e00:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002e02:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002e04:	2900      	cmp	r1, #0
 8002e06:	f000 8093 	beq.w	8002f30 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8095 	beq.w	8002f3a <chprintf+0x2ea>
 8002e10:	3901      	subs	r1, #1
 8002e12:	4620      	mov	r0, r4
 8002e14:	e001      	b.n	8002e1a <chprintf+0x1ca>
 8002e16:	3901      	subs	r1, #1
 8002e18:	d403      	bmi.n	8002e22 <chprintf+0x1d2>
 8002e1a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f9      	bne.n	8002e16 <chprintf+0x1c6>
 8002e22:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002e24:	1a36      	subs	r6, r6, r0
 8002e26:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002e28:	2720      	movs	r7, #32
 8002e2a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002e2e:	f1b9 0f00 	cmp.w	r9, #0
 8002e32:	d01f      	beq.n	8002e74 <chprintf+0x224>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	da34      	bge.n	8002ea4 <chprintf+0x254>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002e3a:	2e00      	cmp	r6, #0
 8002e3c:	f43f af1a 	beq.w	8002c74 <chprintf+0x24>
 8002e40:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8002e42:	f8da 3000 	ldr.w	r3, [sl]
 8002e46:	4650      	mov	r0, sl
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4639      	mov	r1, r7
 8002e4c:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002e4e:	3c01      	subs	r4, #1
 8002e50:	d1f7      	bne.n	8002e42 <chprintf+0x1f2>
 8002e52:	44b0      	add	r8, r6
 8002e54:	e70e      	b.n	8002c74 <chprintf+0x24>
 8002e56:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002e60:	3504      	adds	r5, #4
 8002e62:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8002e64:	2720      	movs	r7, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002e66:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002e68:	1a36      	subs	r6, r6, r0
 8002e6a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8002e6e:	f1b9 0f00 	cmp.w	r9, #0
 8002e72:	d1df      	bne.n	8002e34 <chprintf+0x1e4>
 8002e74:	9300      	str	r3, [sp, #0]
      width = -width;
 8002e76:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 8002e7a:	f1b9 0f00 	cmp.w	r9, #0
 8002e7e:	d044      	beq.n	8002f0a <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 8002e80:	7821      	ldrb	r1, [r4, #0]
 8002e82:	292d      	cmp	r1, #45	; 0x2d
 8002e84:	d046      	beq.n	8002f14 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8002e86:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8002e88:	f8da 3000 	ldr.w	r3, [sl]
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4639      	mov	r1, r7
 8002e92:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002e94:	3601      	adds	r6, #1
 8002e96:	d1f7      	bne.n	8002e88 <chprintf+0x238>
    }
    while (--i >= 0) {
 8002e98:	9b00      	ldr	r3, [sp, #0]
 8002e9a:	ebc9 0808 	rsb	r8, r9, r8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f6ff aee8 	blt.w	8002c74 <chprintf+0x24>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002ea4:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8002ea8:	f8da 3000 	ldr.w	r3, [sl]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002eac:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb8:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002eba:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ebe:	d1f3      	bne.n	8002ea8 <chprintf+0x258>
 8002ec0:	9b00      	ldr	r3, [sp, #0]
 8002ec2:	f108 0801 	add.w	r8, r8, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bfa8      	it	ge
 8002eca:	4498      	addge	r8, r3
 8002ecc:	e7b5      	b.n	8002e3a <chprintf+0x1ea>
 8002ece:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ed0:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ed2:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002ed4:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ed6:	f003 ffb3 	bl	8006e40 <long_to_string_with_divisor.constprop.4>
 8002eda:	ab03      	add	r3, sp, #12
 8002edc:	1ac0      	subs	r0, r0, r3
 8002ede:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002ee0:	ac03      	add	r4, sp, #12
 8002ee2:	e7c1      	b.n	8002e68 <chprintf+0x218>
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	e7f3      	b.n	8002ed0 <chprintf+0x280>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002ee8:	6829      	ldr	r1, [r5, #0]
 8002eea:	3504      	adds	r5, #4
      if (l < 0) {
 8002eec:	2900      	cmp	r1, #0
 8002eee:	db2e      	blt.n	8002f4e <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002ef0:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002ef2:	220a      	movs	r2, #10
 8002ef4:	e7ef      	b.n	8002ed6 <chprintf+0x286>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	e7ea      	b.n	8002ed0 <chprintf+0x280>
 8002efa:	461a      	mov	r2, r3
 8002efc:	9b01      	ldr	r3, [sp, #4]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002efe:	ac03      	add	r4, sp, #12
 8002f00:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002f02:	f88d 200c 	strb.w	r2, [sp, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	e7ae      	b.n	8002e68 <chprintf+0x218>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002f0a:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002f0c:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dac8      	bge.n	8002ea4 <chprintf+0x254>
 8002f12:	e6af      	b.n	8002c74 <chprintf+0x24>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002f14:	2f30      	cmp	r7, #48	; 0x30
 8002f16:	d1b6      	bne.n	8002e86 <chprintf+0x236>
        streamPut(chp, (uint8_t)*s++);
 8002f18:	f8da 3000 	ldr.w	r3, [sl]
 8002f1c:	4650      	mov	r0, sl
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4798      	blx	r3
 8002f22:	9b00      	ldr	r3, [sp, #0]
 8002f24:	3401      	adds	r4, #1
 8002f26:	3b01      	subs	r3, #1
        n++;
 8002f28:	f108 0801 	add.w	r8, r8, #1
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	e7aa      	b.n	8002e86 <chprintf+0x236>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002f30:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f af6c 	bne.w	8002e12 <chprintf+0x1c2>
 8002f3a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002f3e:	f1b9 0f00 	cmp.w	r9, #0
 8002f42:	d10b      	bne.n	8002f5c <chprintf+0x30c>
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2720      	movs	r7, #32
 8002f4c:	e793      	b.n	8002e76 <chprintf+0x226>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002f4e:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002f50:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8002f52:	f88d 300c 	strb.w	r3, [sp, #12]
 8002f56:	f10d 000d 	add.w	r0, sp, #13
 8002f5a:	e7ca      	b.n	8002ef2 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002f5c:	2720      	movs	r7, #32
 8002f5e:	e76c      	b.n	8002e3a <chprintf+0x1ea>
 8002f60:	080072bc 	.word	0x080072bc
	...

08002f70 <DLLPutFrameInQueue>:
 *
 * @param[in] driver    DataLinkLayer driver structure
 * @param[in] frame     The frame which need to be put into the mailbox
 *
 */
msg_t DLLPutFrameInQueue(DLLDriver *dllp, FrameStruct *Frame){
 8002f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	4606      	mov	r6, r0
 8002f76:	460c      	mov	r4, r1
  void *pbuf;
  msg_t ReturnValue = chMBFetch(&dllp->DLLBuffers.DLLFreeOutputBuffer, (msg_t *)&pbuf, TIME_INFINITE);
 8002f78:	f200 708c 	addw	r0, r0, #1932	; 0x78c
 8002f7c:	a901      	add	r1, sp, #4
 8002f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f82:	f7fd ffc5 	bl	8000f10 <chMBFetch>
  if (ReturnValue == MSG_OK) {
 8002f86:	4605      	mov	r5, r0
 8002f88:	b9a8      	cbnz	r0, 8002fb6 <DLLPutFrameInQueue+0x46>
    FrameStruct *Temp = pbuf;
 8002f8a:	9f01      	ldr	r7, [sp, #4]
 8002f8c:	1e63      	subs	r3, r4, #1
 8002f8e:	1e7a      	subs	r2, r7, #1
 8002f90:	f104 010e 	add.w	r1, r4, #14
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
      ((char *)Temp)[i] = ((char *)Frame)[i];
 8002f94:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  void *pbuf;
  msg_t ReturnValue = chMBFetch(&dllp->DLLBuffers.DLLFreeOutputBuffer, (msg_t *)&pbuf, TIME_INFINITE);
  if (ReturnValue == MSG_OK) {
    FrameStruct *Temp = pbuf;
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
 8002f98:	428b      	cmp	r3, r1
      ((char *)Temp)[i] = ((char *)Frame)[i];
 8002f9a:	f802 0f01 	strb.w	r0, [r2, #1]!
  void *pbuf;
  msg_t ReturnValue = chMBFetch(&dllp->DLLBuffers.DLLFreeOutputBuffer, (msg_t *)&pbuf, TIME_INFINITE);
  if (ReturnValue == MSG_OK) {
    FrameStruct *Temp = pbuf;
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
 8002f9e:	d1f9      	bne.n	8002f94 <DLLPutFrameInQueue+0x24>
      ((char *)Temp)[i] = ((char *)Frame)[i];

    Temp->CrcHex = CreateCRC(Temp);
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	f7ff f865 	bl	8002070 <CreateCRC>

    (void)chMBPost(&dllp->DLLBuffers.DLLFilledOutputBuffer, (msg_t)pbuf, TIME_INFINITE);
 8002fa6:	9901      	ldr	r1, [sp, #4]
    FrameStruct *Temp = pbuf;
    int i;
    for(i = 0; i < FRAME_SIZE_BYTE; i++)
      ((char *)Temp)[i] = ((char *)Frame)[i];

    Temp->CrcHex = CreateCRC(Temp);
 8002fa8:	73b8      	strb	r0, [r7, #14]

    (void)chMBPost(&dllp->DLLBuffers.DLLFilledOutputBuffer, (msg_t)pbuf, TIME_INFINITE);
 8002faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fae:	f606 1038 	addw	r0, r6, #2360	; 0x938
 8002fb2:	f7fd ffd5 	bl	8000f60 <chMBPost>
  }
  return ReturnValue;
}
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	b003      	add	sp, #12
 8002fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <thread1>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8002fc0:	f7fd bed6 	b.w	8000d70 <chThdExit>
	...

08002fd0 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4e09      	ldr	r6, [pc, #36]	; (8002ff8 <print_line+0x28>)
 8002fd4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8002fd6:	6830      	ldr	r0, [r6, #0]
 8002fd8:	212d      	movs	r1, #45	; 0x2d
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	4d06      	ldr	r5, [pc, #24]	; (8002ff8 <print_line+0x28>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8002fe2:	3c01      	subs	r4, #1
 8002fe4:	d1f7      	bne.n	8002fd6 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002fe6:	6828      	ldr	r0, [r5, #0]
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <print_line+0x2c>)
 8002fea:	6803      	ldr	r3, [r0, #0]
 8002fec:	2202      	movs	r2, #2
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8002ff4:	4718      	bx	r3
 8002ff6:	bf00      	nop
 8002ff8:	20000eec 	.word	0x20000eec
 8002ffc:	08007e84 	.word	0x08007e84

08003000 <tmr.lto_priv.56>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <tmr.lto_priv.56+0x8>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	4770      	bx	lr
 8003008:	20002e2c 	.word	0x20002e2c
 800300c:	00000000 	.word	0x00000000

08003010 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8003010:	4a02      	ldr	r2, [pc, #8]	; (800301c <notify1+0xc>)
 8003012:	68d3      	ldr	r3, [r2, #12]
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	60d3      	str	r3, [r2, #12]
 800301a:	4770      	bx	lr
 800301c:	40013800 	.word	0x40013800

08003020 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8003020:	4a02      	ldr	r2, [pc, #8]	; (800302c <notify2+0xc>)
 8003022:	68d3      	ldr	r3, [r2, #12]
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	60d3      	str	r3, [r2, #12]
 800302a:	4770      	bx	lr
 800302c:	40004400 	.word	0x40004400

08003030 <_port_irq_epilogue>:
 8003030:	2320      	movs	r3, #32
 8003032:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <_port_irq_epilogue+0x44>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800303e:	d102      	bne.n	8003046 <_port_irq_epilogue+0x16>
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003046:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800304a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800304e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8003052:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003056:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <_port_irq_epilogue+0x48>)
 800305c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800305e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003060:	6889      	ldr	r1, [r1, #8]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003066:	bf8c      	ite	hi
 8003068:	4a04      	ldrhi	r2, [pc, #16]	; (800307c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800306a:	4a05      	ldrls	r2, [pc, #20]	; (8003080 <_port_irq_epilogue+0x50>)
 800306c:	f843 2c08 	str.w	r2, [r3, #-8]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	20002e30 	.word	0x20002e30
 800307c:	08000251 	.word	0x08000251
 8003080:	08000254 	.word	0x08000254
	...

08003090 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003094:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003098:	6923      	ldr	r3, [r4, #16]
 800309a:	079b      	lsls	r3, r3, #30
 800309c:	d403      	bmi.n	80030a6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800309e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80030a2:	f7ff bfc5 	b.w	8003030 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80030a6:	2700      	movs	r7, #0
 80030a8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80030aa:	2520      	movs	r5, #32
 80030ac:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80030b0:	4e1e      	ldr	r6, [pc, #120]	; (800312c <VectorB0+0x9c>)
 80030b2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80030b4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80030b8:	69f3      	ldr	r3, [r6, #28]
 80030ba:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80030bc:	ebce 0100 	rsb	r1, lr, r0
 80030c0:	891a      	ldrh	r2, [r3, #8]
 80030c2:	b289      	uxth	r1, r1
 80030c4:	4291      	cmp	r1, r2
 80030c6:	f106 081c 	add.w	r8, r6, #28
 80030ca:	d31b      	bcc.n	8003104 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80030cc:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80030ce:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80030d0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80030d2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80030d4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80030d6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80030da:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80030dc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80030de:	bf08      	it	eq
 80030e0:	60e7      	streq	r7, [r4, #12]
 80030e2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80030e6:	6918      	ldr	r0, [r3, #16]
 80030e8:	4790      	blx	r2
 80030ea:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80030ee:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80030f0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80030f4:	69f3      	ldr	r3, [r6, #28]
 80030f6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80030f8:	ebce 0100 	rsb	r1, lr, r0
 80030fc:	891a      	ldrh	r2, [r3, #8]
 80030fe:	b289      	uxth	r1, r1
 8003100:	428a      	cmp	r2, r1
 8003102:	d9e3      	bls.n	80030cc <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003104:	4543      	cmp	r3, r8
 8003106:	d00a      	beq.n	800311e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8003108:	4472      	add	r2, lr
 800310a:	1a12      	subs	r2, r2, r0
 800310c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800310e:	2a01      	cmp	r2, #1
 8003110:	bf98      	it	ls
 8003112:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8003114:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003116:	b292      	uxth	r2, r2
 8003118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
 800311e:	2300      	movs	r3, #0
 8003120:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8003124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003128:	f7ff bf82 	b.w	8003030 <_port_irq_epilogue>
 800312c:	20002e30 	.word	0x20002e30

08003130 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003130:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8003134:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003136:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800313a:	2300      	movs	r3, #0
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
	...

08003150 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8003150:	b410      	push	{r4}
 8003152:	2320      	movs	r3, #32
 8003154:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003158:	4c09      	ldr	r4, [pc, #36]	; (8003180 <chCoreAlloc+0x30>)
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <chCoreAlloc+0x34>)
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8003160:	1dc3      	adds	r3, r0, #7
 8003162:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003166:	1a89      	subs	r1, r1, r2
 8003168:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800316a:	bf9d      	ittte	ls
 800316c:	189b      	addls	r3, r3, r2
 800316e:	6023      	strls	r3, [r4, #0]

  return p;
 8003170:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8003172:	2000      	movhi	r0, #0
 8003174:	2300      	movs	r3, #0
 8003176:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800317a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20002fa0 	.word	0x20002fa0
 8003184:	20002fa4 	.word	0x20002fa4
	...

08003190 <readt.lto_priv.64>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003190:	300c      	adds	r0, #12
 8003192:	f7fd bf25 	b.w	8000fe0 <chIQReadTimeout>
 8003196:	bf00      	nop
	...

080031a0 <read.lto_priv.58>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80031a0:	300c      	adds	r0, #12
 80031a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a6:	f7fd bf1b 	b.w	8000fe0 <chIQReadTimeout>
 80031aa:	bf00      	nop
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <gett.lto_priv.62>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80031b0:	300c      	adds	r0, #12
 80031b2:	f7fd bf55 	b.w	8001060 <chIQGetTimeout>
 80031b6:	bf00      	nop
	...

080031c0 <get.lto_priv.60>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80031c0:	300c      	adds	r0, #12
 80031c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031c6:	f7fd bf4b 	b.w	8001060 <chIQGetTimeout>
 80031ca:	bf00      	nop
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 80031d0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fd ff84 	bl	80010e0 <chThdSleep>
 80031d8:	2320      	movs	r3, #32
 80031da:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80031de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80031e4:	2300      	movs	r3, #0
 80031e6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80031ea:	b280      	uxth	r0, r0
 80031ec:	bd08      	pop	{r3, pc}
 80031ee:	bf00      	nop

080031f0 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4c07      	ldr	r4, [pc, #28]	; (8003210 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 80031f4:	2600      	movs	r6, #0
 80031f6:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80031fa:	f854 0b04 	ldr.w	r0, [r4], #4
 80031fe:	b118      	cbz	r0, 8003208 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8003200:	f7fd fba6 	bl	8000950 <chThdWait>
      threads[i] = NULL;
 8003204:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003208:	42ac      	cmp	r4, r5
 800320a:	d1f6      	bne.n	80031fa <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	bf00      	nop
 8003210:	20000ec0 	.word	0x20000ec0
	...

08003220 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <test_terminate_threads+0x2c>)
 8003222:	b430      	push	{r4, r5}
 8003224:	f103 0014 	add.w	r0, r3, #20
 8003228:	2520      	movs	r5, #32
 800322a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800322c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003230:	b13a      	cbz	r2, 8003242 <test_terminate_threads+0x22>
 8003232:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8003236:	7f51      	ldrb	r1, [r2, #29]
 8003238:	f041 0104 	orr.w	r1, r1, #4
 800323c:	7751      	strb	r1, [r2, #29]
 800323e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003242:	4283      	cmp	r3, r0
 8003244:	d1f2      	bne.n	800322c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8003246:	bc30      	pop	{r4, r5}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000ec0 	.word	0x20000ec0

08003250 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8003250:	b410      	push	{r4}
 8003252:	2320      	movs	r3, #32
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800325c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800325e:	2300      	movs	r3, #0
 8003260:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8003264:	1a52      	subs	r2, r2, r1
 8003266:	1a64      	subs	r4, r4, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8003268:	b2a1      	uxth	r1, r4
 800326a:	b292      	uxth	r2, r2
 800326c:	4291      	cmp	r1, r2
 800326e:	d306      	bcc.n	800327e <_test_assert_time_window+0x2e>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003270:	4c05      	ldr	r4, [pc, #20]	; (8003288 <_test_assert_time_window+0x38>)
  local_fail = TRUE;
 8003272:	4906      	ldr	r1, [pc, #24]	; (800328c <_test_assert_time_window+0x3c>)
  failpoint = point;
 8003274:	4a06      	ldr	r2, [pc, #24]	; (8003290 <_test_assert_time_window+0x40>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003276:	2301      	movs	r3, #1
 8003278:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 800327a:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800327c:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800327e:	4618      	mov	r0, r3
 8003280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000ee8 	.word	0x20000ee8
 800328c:	20000ee9 	.word	0x20000ee9
 8003290:	20000f00 	.word	0x20000f00
	...

080032a0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 80032a0:	b4f0      	push	{r4, r5, r6, r7}
 80032a2:	4e0e      	ldr	r6, [pc, #56]	; (80032dc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80032a4:	4f0e      	ldr	r7, [pc, #56]	; (80032e0 <_test_assert_sequence+0x40>)
 80032a6:	6835      	ldr	r5, [r6, #0]
 80032a8:	463b      	mov	r3, r7
 80032aa:	e005      	b.n	80032b8 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 80032ac:	f813 4b01 	ldrb.w	r4, [r3], #1
 80032b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032b4:	4294      	cmp	r4, r2
 80032b6:	d107      	bne.n	80032c8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	d3f7      	bcc.n	80032ac <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80032bc:	780b      	ldrb	r3, [r1, #0]
 80032be:	b91b      	cbnz	r3, 80032c8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80032c0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	bcf0      	pop	{r4, r5, r6, r7}
 80032c6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032c8:	4c06      	ldr	r4, [pc, #24]	; (80032e4 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 80032ca:	4907      	ldr	r1, [pc, #28]	; (80032e8 <_test_assert_sequence+0x48>)
  failpoint = point;
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80032d2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80032d4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bcf0      	pop	{r4, r5, r6, r7}
 80032da:	4770      	bx	lr
 80032dc:	20000ee4 	.word	0x20000ee4
 80032e0:	20000ef0 	.word	0x20000ef0
 80032e4:	20000ee8 	.word	0x20000ee8
 80032e8:	20000ee9 	.word	0x20000ee9
 80032ec:	20000f00 	.word	0x20000f00

080032f0 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80032f0:	b959      	cbnz	r1, 800330a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 80032f2:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 80032f4:	4906      	ldr	r1, [pc, #24]	; (8003310 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032f6:	4c07      	ldr	r4, [pc, #28]	; (8003314 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 80032fe:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003300:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8003302:	4618      	mov	r0, r3
 8003304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003308:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	4770      	bx	lr
 8003310:	20000ee9 	.word	0x20000ee9
 8003314:	20000ee8 	.word	0x20000ee8
 8003318:	20000f00 	.word	0x20000f00
 800331c:	00000000 	.word	0x00000000

08003320 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8003320:	b410      	push	{r4}
 8003322:	2320      	movs	r3, #32
 8003324:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <test_emit_token+0x20>)
 800332a:	2100      	movs	r1, #0
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	1c54      	adds	r4, r2, #1
 8003330:	7010      	strb	r0, [r2, #0]
 8003332:	601c      	str	r4, [r3, #0]
 8003334:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8003338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000ee4 	.word	0x20000ee4
	...

08003350 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003350:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003352:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003354:	4604      	mov	r4, r0
 8003356:	4d09      	ldr	r5, [pc, #36]	; (800337c <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003358:	b139      	cbz	r1, 800336a <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 800335a:	6828      	ldr	r0, [r5, #0]
 800335c:	6803      	ldr	r3, [r0, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003362:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003366:	2900      	cmp	r1, #0
 8003368:	d1f7      	bne.n	800335a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800336a:	6828      	ldr	r0, [r5, #0]
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <test_println+0x30>)
 800336e:	6803      	ldr	r3, [r0, #0]
 8003370:	2202      	movs	r2, #2
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8003378:	4718      	bx	r3
 800337a:	bf00      	nop
 800337c:	20000eec 	.word	0x20000eec
 8003380:	08007e84 	.word	0x08007e84
	...

08003390 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8003390:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8003392:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8003394:	4604      	mov	r4, r0

  while (*msgp)
 8003396:	b141      	cbz	r1, 80033aa <test_print+0x1a>
 8003398:	4d04      	ldr	r5, [pc, #16]	; (80033ac <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 800339a:	6828      	ldr	r0, [r5, #0]
 800339c:	6803      	ldr	r3, [r0, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80033a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80033a6:	2900      	cmp	r1, #0
 80033a8:	d1f7      	bne.n	800339a <test_print+0xa>
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	20000eec 	.word	0x20000eec

080033b0 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 80033b0:	b310      	cbz	r0, 80033f8 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 80033b6:	466d      	mov	r5, sp
 80033b8:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <test_printn+0x54>)
 80033bc:	fba2 1300 	umull	r1, r3, r2, r0
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80033c6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80033ca:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80033ce:	b2c9      	uxtb	r1, r1
 80033d0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80033d4:	4618      	mov	r0, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80033da:	42ac      	cmp	r4, r5
 80033dc:	d90a      	bls.n	80033f4 <test_printn+0x44>
 80033de:	4e0a      	ldr	r6, [pc, #40]	; (8003408 <test_printn+0x58>)
 80033e0:	3c01      	subs	r4, #1
 80033e2:	e001      	b.n	80033e8 <test_printn+0x38>
 80033e4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 80033e8:	6830      	ldr	r0, [r6, #0]
 80033ea:	6803      	ldr	r3, [r0, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80033f0:	42ac      	cmp	r4, r5
 80033f2:	d1f7      	bne.n	80033e4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 80033f4:	b004      	add	sp, #16
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <test_printn+0x58>)
 80033fa:	2130      	movs	r1, #48	; 0x30
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	6803      	ldr	r3, [r0, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4718      	bx	r3
 8003404:	cccccccd 	.word	0xcccccccd
 8003408:	20000eec 	.word	0x20000eec
 800340c:	00000000 	.word	0x00000000

08003410 <TestThread>:
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8003414:	4c9f      	ldr	r4, [pc, #636]	; (8003694 <TestThread+0x284>)
/**
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
 8003416:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8003418:	6020      	str	r0, [r4, #0]
  test_println("");
 800341a:	489f      	ldr	r0, [pc, #636]	; (8003698 <TestThread+0x288>)
 800341c:	f7ff ff98 	bl	8003350 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8003420:	489e      	ldr	r0, [pc, #632]	; (800369c <TestThread+0x28c>)
 8003422:	f7ff ff95 	bl	8003350 <test_println>
  test_println("***");
 8003426:	4d9e      	ldr	r5, [pc, #632]	; (80036a0 <TestThread+0x290>)
 8003428:	489e      	ldr	r0, [pc, #632]	; (80036a4 <TestThread+0x294>)
 800342a:	f7ff ff91 	bl	8003350 <test_println>
 800342e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	6803      	ldr	r3, [r0, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003438:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800343c:	2900      	cmp	r1, #0
 800343e:	d1f7      	bne.n	8003430 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8003440:	4899      	ldr	r0, [pc, #612]	; (80036a8 <TestThread+0x298>)
 8003442:	4d9a      	ldr	r5, [pc, #616]	; (80036ac <TestThread+0x29c>)
 8003444:	f7ff ff84 	bl	8003350 <test_println>
 8003448:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	6803      	ldr	r3, [r0, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003452:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003456:	2900      	cmp	r1, #0
 8003458:	d1f7      	bne.n	800344a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800345a:	4895      	ldr	r0, [pc, #596]	; (80036b0 <TestThread+0x2a0>)
 800345c:	4d95      	ldr	r5, [pc, #596]	; (80036b4 <TestThread+0x2a4>)
 800345e:	f7ff ff77 	bl	8003350 <test_println>
 8003462:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800346c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003470:	2900      	cmp	r1, #0
 8003472:	d1f7      	bne.n	8003464 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8003474:	4890      	ldr	r0, [pc, #576]	; (80036b8 <TestThread+0x2a8>)
 8003476:	4d91      	ldr	r5, [pc, #580]	; (80036bc <TestThread+0x2ac>)
 8003478:	f7ff ff6a 	bl	8003350 <test_println>
 800347c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	6803      	ldr	r3, [r0, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003486:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800348a:	2900      	cmp	r1, #0
 800348c:	d1f7      	bne.n	800347e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800348e:	488c      	ldr	r0, [pc, #560]	; (80036c0 <TestThread+0x2b0>)
 8003490:	4d8c      	ldr	r5, [pc, #560]	; (80036c4 <TestThread+0x2b4>)
 8003492:	f7ff ff5d 	bl	8003350 <test_println>
 8003496:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	6803      	ldr	r3, [r0, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034a0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d1f7      	bne.n	8003498 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 80034a8:	4887      	ldr	r0, [pc, #540]	; (80036c8 <TestThread+0x2b8>)
 80034aa:	4d88      	ldr	r5, [pc, #544]	; (80036cc <TestThread+0x2bc>)
 80034ac:	f7ff ff50 	bl	8003350 <test_println>
 80034b0:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	6803      	ldr	r3, [r0, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034ba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034be:	2900      	cmp	r1, #0
 80034c0:	d1f7      	bne.n	80034b2 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 80034c2:	4883      	ldr	r0, [pc, #524]	; (80036d0 <TestThread+0x2c0>)
 80034c4:	4d83      	ldr	r5, [pc, #524]	; (80036d4 <TestThread+0x2c4>)
 80034c6:	f7ff ff43 	bl	8003350 <test_println>
 80034ca:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034cc:	6820      	ldr	r0, [r4, #0]
 80034ce:	6803      	ldr	r3, [r0, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034d4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034d8:	2900      	cmp	r1, #0
 80034da:	d1f7      	bne.n	80034cc <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80034dc:	487e      	ldr	r0, [pc, #504]	; (80036d8 <TestThread+0x2c8>)
 80034de:	4d7f      	ldr	r5, [pc, #508]	; (80036dc <TestThread+0x2cc>)
 80034e0:	f7ff ff36 	bl	8003350 <test_println>
 80034e4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	6803      	ldr	r3, [r0, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80034ee:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80034f2:	2900      	cmp	r1, #0
 80034f4:	d1f7      	bne.n	80034e6 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80034f6:	487a      	ldr	r0, [pc, #488]	; (80036e0 <TestThread+0x2d0>)
 80034f8:	9100      	str	r1, [sp, #0]
 80034fa:	f7ff ff29 	bl	8003350 <test_println>
#endif
  test_println("");
 80034fe:	4866      	ldr	r0, [pc, #408]	; (8003698 <TestThread+0x288>)
 8003500:	f7ff ff26 	bl	8003350 <test_println>

  test_global_fail = FALSE;
 8003504:	4b77      	ldr	r3, [pc, #476]	; (80036e4 <TestThread+0x2d4>)
 8003506:	9900      	ldr	r1, [sp, #0]
 8003508:	4f77      	ldr	r7, [pc, #476]	; (80036e8 <TestThread+0x2d8>)
 800350a:	7019      	strb	r1, [r3, #0]
 800350c:	4b77      	ldr	r3, [pc, #476]	; (80036ec <TestThread+0x2dc>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800350e:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003694 <TestThread+0x284>
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8003516:	2600      	movs	r6, #0
 8003518:	3301      	adds	r3, #1
 800351a:	9300      	str	r3, [sp, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 800351c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003520:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 808b 	beq.w	8003640 <TestThread+0x230>
      print_line();
 800352a:	4d71      	ldr	r5, [pc, #452]	; (80036f0 <TestThread+0x2e0>)
 800352c:	f7ff fd50 	bl	8002fd0 <print_line>
 8003530:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	6803      	ldr	r3, [r0, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800353a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800353e:	2900      	cmp	r1, #0
 8003540:	d1f7      	bne.n	8003532 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8003542:	9800      	ldr	r0, [sp, #0]
 8003544:	f7ff ff34 	bl	80033b0 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003548:	f8db 0000 	ldr.w	r0, [fp]
 800354c:	212e      	movs	r1, #46	; 0x2e
 800354e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003550:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8003556:	4d67      	ldr	r5, [pc, #412]	; (80036f4 <TestThread+0x2e4>)
 8003558:	4630      	mov	r0, r6
 800355a:	f7ff ff29 	bl	80033b0 <test_printn>
 800355e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	6803      	ldr	r3, [r0, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003568:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800356c:	2900      	cmp	r1, #0
 800356e:	d1f7      	bne.n	8003560 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8003570:	f8d8 3000 	ldr.w	r3, [r8]
 8003574:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003576:	7829      	ldrb	r1, [r5, #0]
 8003578:	b139      	cbz	r1, 800358a <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 800357a:	6820      	ldr	r0, [r4, #0]
 800357c:	6803      	ldr	r3, [r0, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003582:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003586:	2900      	cmp	r1, #0
 8003588:	d1f7      	bne.n	800357a <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800358a:	485b      	ldr	r0, [pc, #364]	; (80036f8 <TestThread+0x2e8>)
 800358c:	f7ff fee0 	bl	8003350 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8003590:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003594:	f7fd fda4 	bl	80010e0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <TestThread+0x2ec>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 800359a:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800359e:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	6053      	str	r3, [r2, #4]
 80035a4:	6093      	str	r3, [r2, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80035aa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8003728 <TestThread+0x318>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80035ae:	4d54      	ldr	r5, [pc, #336]	; (8003700 <TestThread+0x2f0>)
 80035b0:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003710 <TestThread+0x300>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80035b4:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80035b8:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80035bc:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80035c0:	b102      	cbz	r2, 80035c4 <TestThread+0x1b4>
    tcp->setup();
 80035c2:	4790      	blx	r2
  tcp->execute();
 80035c4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80035c8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80035ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80035ce:	b103      	cbz	r3, 80035d2 <TestThread+0x1c2>
    tcp->teardown();
 80035d0:	4798      	blx	r3

  test_wait_threads();
 80035d2:	f7ff fe0d 	bl	80031f0 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 80035d6:	f898 3000 	ldrb.w	r3, [r8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d04f      	beq.n	800367e <TestThread+0x26e>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80035de:	4f49      	ldr	r7, [pc, #292]	; (8003704 <TestThread+0x2f4>)
 80035e0:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80035e2:	6820      	ldr	r0, [r4, #0]
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80035ea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80035ee:	2900      	cmp	r1, #0
 80035f0:	d1f7      	bne.n	80035e2 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 80035f2:	4b45      	ldr	r3, [pc, #276]	; (8003708 <TestThread+0x2f8>)
 80035f4:	4f45      	ldr	r7, [pc, #276]	; (800370c <TestThread+0x2fc>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	f7ff feda 	bl	80033b0 <test_printn>
 80035fc:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003606:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800360a:	2900      	cmp	r1, #0
 800360c:	d1f7      	bne.n	80035fe <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	454b      	cmp	r3, r9
 8003612:	d909      	bls.n	8003628 <TestThread+0x218>
 8003614:	4f3e      	ldr	r7, [pc, #248]	; (8003710 <TestThread+0x300>)
    chSequentialStreamPut(chp, *cp++);
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	f817 1b01 	ldrb.w	r1, [r7], #1
 800361c:	6803      	ldr	r3, [r0, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	429f      	cmp	r7, r3
 8003626:	d3f6      	bcc.n	8003616 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8003628:	483a      	ldr	r0, [pc, #232]	; (8003714 <TestThread+0x304>)
 800362a:	f7ff fe91 	bl	8003350 <test_println>
 800362e:	9b01      	ldr	r3, [sp, #4]
 8003630:	681f      	ldr	r7, [r3, #0]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8003632:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8003636:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f af75 	bne.w	800352a <TestThread+0x11a>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2f00      	cmp	r7, #0
 800364a:	f47f af63 	bne.w	8003514 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 800364e:	f7ff fcbf 	bl	8002fd0 <print_line>
  test_println("");
 8003652:	4d31      	ldr	r5, [pc, #196]	; (8003718 <TestThread+0x308>)
 8003654:	4810      	ldr	r0, [pc, #64]	; (8003698 <TestThread+0x288>)
 8003656:	f7ff fe7b 	bl	8003350 <test_println>
 800365a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	6803      	ldr	r3, [r0, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003664:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003668:	2900      	cmp	r1, #0
 800366a:	d1f7      	bne.n	800365c <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <TestThread+0x2d4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b94b      	cbnz	r3, 8003686 <TestThread+0x276>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8003672:	482a      	ldr	r0, [pc, #168]	; (800371c <TestThread+0x30c>)
}
 8003674:	b003      	add	sp, #12
 8003676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 800367a:	f7ff be69 	b.w	8003350 <test_println>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 800367e:	4828      	ldr	r0, [pc, #160]	; (8003720 <TestThread+0x310>)
 8003680:	f7ff fe66 	bl	8003350 <test_println>
 8003684:	e74a      	b.n	800351c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8003686:	4827      	ldr	r0, [pc, #156]	; (8003724 <TestThread+0x314>)
  else
    test_println("SUCCESS");
}
 8003688:	b003      	add	sp, #12
 800368a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 800368e:	f7ff be5f 	b.w	8003350 <test_println>
 8003692:	bf00      	nop
 8003694:	20000eec 	.word	0x20000eec
 8003698:	080080d4 	.word	0x080080d4
 800369c:	080077a0 	.word	0x080077a0
 80036a0:	080076c0 	.word	0x080076c0
 80036a4:	080077bc 	.word	0x080077bc
 80036a8:	080077e4 	.word	0x080077e4
 80036ac:	080076d4 	.word	0x080076d4
 80036b0:	080077ec 	.word	0x080077ec
 80036b4:	080076e8 	.word	0x080076e8
 80036b8:	08007804 	.word	0x08007804
 80036bc:	080076fc 	.word	0x080076fc
 80036c0:	0800784c 	.word	0x0800784c
 80036c4:	08007710 	.word	0x08007710
 80036c8:	08007854 	.word	0x08007854
 80036cc:	08007724 	.word	0x08007724
 80036d0:	08007860 	.word	0x08007860
 80036d4:	08007738 	.word	0x08007738
 80036d8:	08007878 	.word	0x08007878
 80036dc:	0800774c 	.word	0x0800774c
 80036e0:	080078a4 	.word	0x080078a4
 80036e4:	20000ee8 	.word	0x20000ee8
 80036e8:	08007490 	.word	0x08007490
 80036ec:	08007500 	.word	0x08007500
 80036f0:	08007760 	.word	0x08007760
 80036f4:	08007770 	.word	0x08007770
 80036f8:	080077c0 	.word	0x080077c0
 80036fc:	20000ec0 	.word	0x20000ec0
 8003700:	20000ee4 	.word	0x20000ee4
 8003704:	08007774 	.word	0x08007774
 8003708:	20000f00 	.word	0x20000f00
 800370c:	0800778c 	.word	0x0800778c
 8003710:	20000ef0 	.word	0x20000ef0
 8003714:	080077c4 	.word	0x080077c4
 8003718:	08007790 	.word	0x08007790
 800371c:	080077d4 	.word	0x080077d4
 8003720:	080077c8 	.word	0x080077c8
 8003724:	080077dc 	.word	0x080077dc
 8003728:	20000ee9 	.word	0x20000ee9
 800372c:	00000000 	.word	0x00000000

08003730 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003732:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <__early_init+0x80>)
 8003740:	079b      	lsls	r3, r3, #30
 8003742:	d5fb      	bpl.n	800373c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003744:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003746:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003748:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800374a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800374e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003750:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003752:	684b      	ldr	r3, [r1, #4]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <__early_init+0x80>)
 8003756:	f013 0f0c 	tst.w	r3, #12
 800375a:	d1fa      	bne.n	8003752 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800375c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8003766:	680b      	ldr	r3, [r1, #0]
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <__early_init+0x80>)
 800376a:	0398      	lsls	r0, r3, #14
 800376c:	d5fb      	bpl.n	8003766 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800376e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8003770:	6853      	ldr	r3, [r2, #4]
 8003772:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003776:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8003778:	6813      	ldr	r3, [r2, #0]
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003780:	680b      	ldr	r3, [r1, #0]
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <__early_init+0x80>)
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	d5fb      	bpl.n	8003780 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003788:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 800378a:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800378e:	4c0a      	ldr	r4, [pc, #40]	; (80037b8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003790:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8003792:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003794:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8003796:	6853      	ldr	r3, [r2, #4]
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800379e:	684b      	ldr	r3, [r1, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d1fa      	bne.n	800379e <__early_init+0x6e>

  stm32_clock_init();
}
 80037a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40022000 	.word	0x40022000
 80037b8:	001d6400 	.word	0x001d6400
 80037bc:	00000000 	.word	0x00000000

080037c0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80037c0:	b538      	push	{r3, r4, r5, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80037c2:	4d08      	ldr	r5, [pc, #32]	; (80037e4 <sd_lld_init+0x24>)
 80037c4:	4908      	ldr	r1, [pc, #32]	; (80037e8 <sd_lld_init+0x28>)
 80037c6:	4628      	mov	r0, r5
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80037c8:	4c08      	ldr	r4, [pc, #32]	; (80037ec <sd_lld_init+0x2c>)
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80037ca:	f003 faa1 	bl	8006d10 <sdObjectInit.constprop.14>
  SD1.usart = USART1;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <sd_lld_init+0x30>)
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80037d0:	4620      	mov	r0, r4
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <sd_lld_init+0x34>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 80037d4:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80037d8:	f003 fa9a 	bl	8006d10 <sdObjectInit.constprop.14>
  SD2.usart = USART2;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <sd_lld_init+0x38>)
 80037de:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	200028cc 	.word	0x200028cc
 80037e8:	08003011 	.word	0x08003011
 80037ec:	20002b7c 	.word	0x20002b7c
 80037f0:	40013800 	.word	0x40013800
 80037f4:	08003021 	.word	0x08003021
 80037f8:	40004400 	.word	0x40004400
 80037fc:	00000000 	.word	0x00000000

08003800 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003800:	b470      	push	{r4, r5, r6}
 8003802:	2320      	movs	r3, #32
 8003804:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8003808:	4c24      	ldr	r4, [pc, #144]	; (800389c <sdStart+0x9c>)

  if (sdp->state == SD_STOP) {
 800380a:	7a02      	ldrb	r2, [r0, #8]
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 800380c:	2900      	cmp	r1, #0
 800380e:	bf08      	it	eq
 8003810:	4621      	moveq	r1, r4

  if (sdp->state == SD_STOP) {
 8003812:	2a01      	cmp	r2, #1
 8003814:	d021      	beq.n	800385a <sdStart+0x5a>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8003816:	680c      	ldr	r4, [r1, #0]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <sdStart+0xa0>)
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 800381a:	f8d0 32ac 	ldr.w	r3, [r0, #684]	; 0x2ac
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 800381e:	fbb2 f2f4 	udiv	r2, r2, r4
 8003822:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8003824:	888a      	ldrh	r2, [r1, #4]
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003826:	88cc      	ldrh	r4, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003828:	8909      	ldrh	r1, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800382a:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800382e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8003832:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003836:	f041 0101 	orr.w	r1, r1, #1
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800383a:	b2a4      	uxth	r4, r4
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800383c:	b292      	uxth	r2, r2
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800383e:	b289      	uxth	r1, r1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8003840:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003842:	611c      	str	r4, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003844:	6159      	str	r1, [r3, #20]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003846:	2402      	movs	r4, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003848:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 800384a:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800384c:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	7204      	strb	r4, [r0, #8]
 8003852:	f385 8811 	msr	BASEPRI, r5
  osalSysUnlock();
}
 8003856:	bc70      	pop	{r4, r5, r6}
 8003858:	4770      	bx	lr
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <sdStart+0xa4>)
 800385c:	4290      	cmp	r0, r2
 800385e:	d010      	beq.n	8003882 <sdStart+0x82>
      rccEnableUSART1(FALSE);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <sdStart+0xa8>)
 8003862:	4298      	cmp	r0, r3
 8003864:	d1d7      	bne.n	8003816 <sdStart+0x16>
      rccEnableUSART2(FALSE);
 8003866:	4d11      	ldr	r5, [pc, #68]	; (80038ac <sdStart+0xac>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <sdStart+0xb0>)
 800386a:	69ea      	ldr	r2, [r5, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800386c:	2440      	movs	r4, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800386e:	26c0      	movs	r6, #192	; 0xc0
 8003870:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003874:	61ea      	str	r2, [r5, #28]
 8003876:	f883 6326 	strb.w	r6, [r3, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800387a:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800387e:	605c      	str	r4, [r3, #4]
 8003880:	e7c9      	b.n	8003816 <sdStart+0x16>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8003882:	4d0a      	ldr	r5, [pc, #40]	; (80038ac <sdStart+0xac>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <sdStart+0xb0>)
 8003886:	69ac      	ldr	r4, [r5, #24]
 8003888:	26c0      	movs	r6, #192	; 0xc0
 800388a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800388e:	61ac      	str	r4, [r5, #24]
 8003890:	f882 6325 	strb.w	r6, [r2, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003894:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003898:	6053      	str	r3, [r2, #4]
 800389a:	e7bc      	b.n	8003816 <sdStart+0x16>
 800389c:	080073d0 	.word	0x080073d0
 80038a0:	02255100 	.word	0x02255100
 80038a4:	200028cc 	.word	0x200028cc
 80038a8:	20002b7c 	.word	0x20002b7c
 80038ac:	40021000 	.word	0x40021000
 80038b0:	e000e100 	.word	0xe000e100
	...

080038c0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80038c0:	b508      	push	{r3, lr}
 80038c2:	2220      	movs	r2, #32
 80038c4:	4603      	mov	r3, r0
 80038c6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 80038ca:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80038cc:	b128      	cbz	r0, 80038da <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 80038ce:	6802      	ldr	r2, [r0, #0]
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80038d8:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	2a00      	cmp	r2, #0
 80038de:	d0f8      	beq.n	80038d2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 80038e0:	6858      	ldr	r0, [r3, #4]
 80038e2:	4790      	blx	r2
 80038e4:	2300      	movs	r3, #0
 80038e6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80038ea:	bd08      	pop	{r3, pc}
 80038ec:	0000      	movs	r0, r0
	...

080038f0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80038f0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 80038f2:	4c0f      	ldr	r4, [pc, #60]	; (8003930 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80038f4:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 80038f6:	2800      	cmp	r0, #0
 80038f8:	bf18      	it	ne
 80038fa:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 80038fc:	f104 0510 	add.w	r5, r4, #16
 8003900:	4628      	mov	r0, r5
 8003902:	f7fd f9d5 	bl	8000cb0 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003906:	68a3      	ldr	r3, [r4, #8]
 8003908:	b173      	cbz	r3, 8003928 <chHeapStatus+0x38>
 800390a:	2200      	movs	r2, #0
 800390c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800390e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003910:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8003912:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8003914:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 800391a:	b106      	cbz	r6, 800391e <chHeapStatus+0x2e>
    *sizep = sz;
 800391c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 800391e:	4628      	mov	r0, r5
 8003920:	f7fd f926 	bl	8000b70 <chMtxUnlock>

  return n;
}
 8003924:	4620      	mov	r0, r4
 8003926:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8003928:	461a      	mov	r2, r3
  n = 0;
 800392a:	461c      	mov	r4, r3
 800392c:	e7f5      	b.n	800391a <chHeapStatus+0x2a>
 800392e:	bf00      	nop
 8003930:	20001308 	.word	0x20001308
	...

08003940 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8003942:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003946:	4606      	mov	r6, r0
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003948:	f105 0710 	add.w	r7, r5, #16
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 800394c:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003950:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8003952:	4638      	mov	r0, r7
 8003954:	f7fd f9ac 	bl	8000cb0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003958:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800395a:	42ab      	cmp	r3, r5
 800395c:	d004      	beq.n	8003968 <chHeapFree+0x28>
 800395e:	42a3      	cmp	r3, r4
 8003960:	d302      	bcc.n	8003968 <chHeapFree+0x28>
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	42ab      	cmp	r3, r5
 8003966:	d1fa      	bne.n	800395e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003968:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800396a:	b11a      	cbz	r2, 8003974 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800396c:	4294      	cmp	r4, r2
 800396e:	d301      	bcc.n	8003974 <chHeapFree+0x34>
 8003970:	4613      	mov	r3, r2
 8003972:	e7f2      	b.n	800395a <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003974:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8003978:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800397c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800397e:	f101 0208 	add.w	r2, r1, #8
 8003982:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8003986:	18a0      	adds	r0, r4, r2
 8003988:	42a8      	cmp	r0, r5
 800398a:	d00a      	beq.n	80039a2 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	f101 0208 	add.w	r2, r1, #8
 8003992:	441a      	add	r2, r3
 8003994:	4294      	cmp	r4, r2
 8003996:	d010      	beq.n	80039ba <chHeapFree+0x7a>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003998:	4638      	mov	r0, r7

  return;
}
 800399a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 800399e:	f7fd b8e7 	b.w	8000b70 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80039a2:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80039a4:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80039a6:	194a      	adds	r2, r1, r5
 80039a8:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 80039aa:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	f101 0208 	add.w	r2, r1, #8
 80039b4:	441a      	add	r2, r3
 80039b6:	4294      	cmp	r4, r2
 80039b8:	d1ee      	bne.n	8003998 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 80039ba:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80039be:	440a      	add	r2, r1
 80039c0:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80039c2:	e883 0005 	stmia.w	r3, {r0, r2}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80039c6:	4638      	mov	r0, r7

  return;
}
 80039c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 80039cc:	f7fd b8d0 	b.w	8000b70 <chMtxUnlock>

080039d0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80039d2:	4e21      	ldr	r6, [pc, #132]	; (8003a58 <chHeapAlloc+0x88>)
  }

  size = MEM_ALIGN_NEXT(size);
 80039d4:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80039d6:	2800      	cmp	r0, #0
 80039d8:	bf18      	it	ne
 80039da:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80039dc:	f106 0710 	add.w	r7, r6, #16
 80039e0:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 80039e2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 80039e6:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 80039ea:	f7fd f961 	bl	8000cb0 <chMtxLock>
 80039ee:	e003      	b.n	80039f8 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80039f0:	6843      	ldr	r3, [r0, #4]
 80039f2:	429d      	cmp	r5, r3
 80039f4:	d912      	bls.n	8003a1c <chHeapAlloc+0x4c>
 80039f6:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1f8      	bne.n	80039f0 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 80039fe:	4638      	mov	r0, r7
 8003a00:	f7fd f8b6 	bl	8000b70 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	b323      	cbz	r3, 8003a52 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8003a08:	f105 0008 	add.w	r0, r5, #8
 8003a0c:	4798      	blx	r3
    if (hp != NULL) {
 8003a0e:	b300      	cbz	r0, 8003a52 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 8003a10:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8003a12:	6045      	str	r5, [r0, #4]
      hp++;
 8003a14:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003a18:	4620      	mov	r0, r4
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8003a1c:	f105 0108 	add.w	r1, r5, #8
 8003a20:	4299      	cmp	r1, r3
 8003a22:	d909      	bls.n	8003a38 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8003a24:	6803      	ldr	r3, [r0, #0]
 8003a26:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003a28:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8003a2a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003a2c:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8003a30:	f7fd f89e 	bl	8000b70 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003a34:	4620      	mov	r0, r4
 8003a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a38:	f06f 0e07 	mvn.w	lr, #7
 8003a3c:	ebc5 0e0e 	rsb	lr, r5, lr
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003a40:	449e      	add	lr, r3
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003a42:	6803      	ldr	r3, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8003a44:	1842      	adds	r2, r0, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003a46:	5043      	str	r3, [r0, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003a48:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 8003a4c:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 8003a4e:	6045      	str	r5, [r0, #4]
 8003a50:	e7ea      	b.n	8003a28 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8003a52:	2400      	movs	r4, #0
 8003a54:	e7e0      	b.n	8003a18 <chHeapAlloc+0x48>
 8003a56:	bf00      	nop
 8003a58:	20001308 	.word	0x20001308
 8003a5c:	00000000 	.word	0x00000000

08003a60 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	b083      	sub	sp, #12
 8003a66:	4604      	mov	r4, r0
 8003a68:	468b      	mov	fp, r1
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8003a6e:	69c7      	ldr	r7, [r0, #28]
 8003a70:	f04f 0820 	mov.w	r8, #32
 8003a74:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8003a78:	2600      	movs	r6, #0
 8003a7a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8003a7c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003a7e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003a82:	b1fb      	cbz	r3, 8003ac4 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003a84:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003a86:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003a88:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003a8a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8003a8c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003a8e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003a90:	f89b 3000 	ldrb.w	r3, [fp]
 8003a94:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	6962      	ldr	r2, [r4, #20]
 8003a9a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8003a9c:	bf24      	itt	cs
 8003a9e:	68e3      	ldrcs	r3, [r4, #12]
 8003aa0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8003aa2:	b10f      	cbz	r7, 8003aa8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	47b8      	blx	r7
 8003aa8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8003aac:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8003aae:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8003ab2:	d011      	beq.n	8003ad8 <chOQWriteTimeout+0x78>
 8003ab4:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003ab8:	46d3      	mov	fp, sl
 8003aba:	68a3      	ldr	r3, [r4, #8]
 8003abc:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1df      	bne.n	8003a84 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	9901      	ldr	r1, [sp, #4]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	f7fd fa71 	bl	8000fb0 <chThdEnqueueTimeoutS>
 8003ace:	9b00      	ldr	r3, [sp, #0]
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d0d3      	beq.n	8003a7c <chOQWriteTimeout+0x1c>
 8003ad4:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8003ad8:	4630      	mov	r0, r6
 8003ada:	b003      	add	sp, #12
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ae0 <writet.lto_priv.63>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003ae0:	3030      	adds	r0, #48	; 0x30
 8003ae2:	f7ff bfbd 	b.w	8003a60 <chOQWriteTimeout>
 8003ae6:	bf00      	nop
	...

08003af0 <write.lto_priv.57>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003af0:	3030      	adds	r0, #48	; 0x30
 8003af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af6:	f7ff bfb3 	b.w	8003a60 <chOQWriteTimeout>
 8003afa:	bf00      	nop
 8003afc:	0000      	movs	r0, r0
	...

08003b00 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8003b00:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003b02:	6942      	ldr	r2, [r0, #20]
 8003b04:	6983      	ldr	r3, [r0, #24]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d019      	beq.n	8003b3e <chOQGetI+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003b0a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8003b0c:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003b0e:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003b10:	3201      	adds	r2, #1
 8003b12:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 8003b14:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003b16:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003b18:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003b1a:	d20d      	bcs.n	8003b38 <chOQGetI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003b1c:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003b1e:	4290      	cmp	r0, r2
 8003b20:	d008      	beq.n	8003b34 <chOQGetI+0x34>
 8003b22:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003b24:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003b26:	2500      	movs	r5, #0
 8003b28:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003b2a:	604b      	str	r3, [r1, #4]
  (void) chSchReadyI(tp);
 8003b2c:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003b2e:	6215      	str	r5, [r2, #32]
  (void) chSchReadyI(tp);
 8003b30:	f7fc ff2e 	bl	8000990 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 8003b34:	4620      	mov	r0, r4
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 8003b38:	68c3      	ldr	r3, [r0, #12]
 8003b3a:	6183      	str	r3, [r0, #24]
 8003b3c:	e7ee      	b.n	8003b1c <chOQGetI+0x1c>
 8003b3e:	6882      	ldr	r2, [r0, #8]
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	d0e2      	beq.n	8003b0a <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8003b44:	f06f 0002 	mvn.w	r0, #2
 8003b48:	bd38      	pop	{r3, r4, r5, pc}
 8003b4a:	bf00      	nop
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8003b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8003b54:	f8d0 52ac 	ldr.w	r5, [r0, #684]	; 0x2ac
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8003b58:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
 8003b5a:	f8d5 900c 	ldr.w	r9, [r5, #12]
  uint16_t sr = u->SR;
 8003b5e:	682b      	ldr	r3, [r5, #0]
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8003b60:	4606      	mov	r6, r0
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003b62:	05da      	lsls	r2, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8003b64:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003b66:	d461      	bmi.n	8003c2c <serve_interrupt+0xdc>
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003b6e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003b72:	d035      	beq.n	8003be0 <serve_interrupt+0x90>
    sts |= SD_PARITY_ERROR;
  if (sr & USART_SR_FE)
    sts |= SD_FRAMING_ERROR;
  if (sr & USART_SR_NE)
    sts |= SD_NOISE_ERROR;
  chnAddFlagsI(sdp, sts);
 8003b74:	1d37      	adds	r7, r6, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8003b76:	f106 080c 	add.w	r8, r6, #12
 8003b7a:	e007      	b.n	8003b8c <serve_interrupt+0x3c>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003b7c:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8003b7e:	686b      	ldr	r3, [r5, #4]
    if (sr & USART_SR_RXNE)
 8003b80:	d41d      	bmi.n	8003bbe <serve_interrupt+0x6e>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8003b82:	682c      	ldr	r4, [r5, #0]
 8003b84:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003b86:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003b8a:	d029      	beq.n	8003be0 <serve_interrupt+0x90>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8003b8c:	0723      	lsls	r3, r4, #28
 8003b8e:	d0f5      	beq.n	8003b7c <serve_interrupt+0x2c>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8003b90:	f014 0f08 	tst.w	r4, #8
 8003b94:	bf0c      	ite	eq
 8003b96:	2100      	moveq	r1, #0
 8003b98:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8003b9a:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8003b9c:	bf48      	it	mi
 8003b9e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8003ba2:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8003ba4:	bf48      	it	mi
 8003ba6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8003baa:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8003bac:	bf48      	it	mi
 8003bae:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	f7fc ff6c 	bl	8000a90 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8003bb8:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8003bba:	686b      	ldr	r3, [r5, #4]
    if (sr & USART_SR_RXNE)
 8003bbc:	d5e1      	bpl.n	8003b82 <serve_interrupt+0x32>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8003bbe:	6972      	ldr	r2, [r6, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8003bc0:	b36a      	cbz	r2, 8003c1e <serve_interrupt+0xce>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8003bc2:	b2d9      	uxtb	r1, r3
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	f7fc fefb 	bl	80009c0 <chIQPutI>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	dad9      	bge.n	8003b82 <serve_interrupt+0x32>
 8003bce:	4638      	mov	r0, r7
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	f7fc ff5d 	bl	8000a90 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8003bd6:	682c      	ldr	r4, [r5, #0]
 8003bd8:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003bda:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003bde:	d1d5      	bne.n	8003b8c <serve_interrupt+0x3c>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8003be6:	f019 0f80 	tst.w	r9, #128	; 0x80
 8003bea:	d001      	beq.n	8003bf0 <serve_interrupt+0xa0>
 8003bec:	0622      	lsls	r2, r4, #24
 8003bee:	d42c      	bmi.n	8003c4a <serve_interrupt+0xfa>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8003bf0:	0663      	lsls	r3, r4, #25
 8003bf2:	d511      	bpl.n	8003c18 <serve_interrupt+0xc8>
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003bfa:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8003bfc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d031      	beq.n	8003c66 <serve_interrupt+0x116>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003c02:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8003c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003c0a:	ea09 0303 	and.w	r3, r9, r3
 8003c0e:	60eb      	str	r3, [r5, #12]
 8003c10:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8003c12:	602a      	str	r2, [r5, #0]
 8003c14:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }
}
 8003c18:	b003      	add	sp, #12
 8003c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c1e:	4638      	mov	r0, r7
 8003c20:	2104      	movs	r1, #4
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	f7fc ff34 	bl	8000a90 <chEvtBroadcastFlagsI>
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	e7ca      	b.n	8003bc2 <serve_interrupt+0x72>
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c36:	3004      	adds	r0, #4
 8003c38:	f7fc ff2a 	bl	8000a90 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8003c3c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8003c40:	602b      	str	r3, [r5, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	e78e      	b.n	8003b68 <serve_interrupt+0x18>
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8003c50:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8003c54:	f7ff ff54 	bl	8003b00 <chOQGetI>
    if (b < Q_OK) {
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	db0c      	blt.n	8003c76 <serve_interrupt+0x126>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8003c5c:	6068      	str	r0, [r5, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	e7c4      	b.n	8003bf0 <serve_interrupt+0xa0>
 8003c66:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ca      	beq.n	8003c02 <serve_interrupt+0xb2>
 8003c6c:	1d30      	adds	r0, r6, #4
 8003c6e:	2110      	movs	r1, #16
 8003c70:	f7fc ff0e 	bl	8000a90 <chEvtBroadcastFlagsI>
 8003c74:	e7c5      	b.n	8003c02 <serve_interrupt+0xb2>
 8003c76:	1d30      	adds	r0, r6, #4
 8003c78:	2108      	movs	r1, #8
 8003c7a:	f7fc ff09 	bl	8000a90 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8003c7e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8003c82:	ea09 0303 	and.w	r3, r9, r3
 8003c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8a:	60eb      	str	r3, [r5, #12]
 8003c8c:	e7e7      	b.n	8003c5e <serve_interrupt+0x10e>
 8003c8e:	bf00      	nop

08003c90 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003c90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 8003c92:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <VectorD8+0x10>)
 8003c94:	f7ff ff5c 	bl	8003b50 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8003c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8003c9c:	f7ff b9c8 	b.w	8003030 <_port_irq_epilogue>
 8003ca0:	20002b7c 	.word	0x20002b7c
	...

08003cb0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003cb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <VectorD4+0x10>)
 8003cb4:	f7ff ff4c 	bl	8003b50 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8003cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8003cbc:	f7ff b9b8 	b.w	8003030 <_port_irq_epilogue>
 8003cc0:	200028cc 	.word	0x200028cc
	...

08003cd0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	460f      	mov	r7, r1
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	2320      	movs	r3, #32
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	e005      	b.n	8003cec <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	f7fd f964 	bl	8000fb0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	db17      	blt.n	8003d1c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8003cec:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	d0f6      	beq.n	8003ce0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8003cf2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003cf4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003cf6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003cf8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8003cfa:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003cfc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003cfe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	6962      	ldr	r2, [r4, #20]
 8003d04:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003d06:	bf24      	itt	cs
 8003d08:	68e3      	ldrcs	r3, [r4, #12]
 8003d0a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8003d0c:	69e3      	ldr	r3, [r4, #28]
 8003d0e:	b10b      	cbz	r3, 8003d14 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8003d10:	4620      	mov	r0, r4
 8003d12:	4798      	blx	r3
 8003d14:	2000      	movs	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8003d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1c:	f385 8811 	msr	BASEPRI, r5
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d22:	bf00      	nop
	...

08003d30 <putt.lto_priv.61>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003d30:	3030      	adds	r0, #48	; 0x30
 8003d32:	f7ff bfcd 	b.w	8003cd0 <chOQPutTimeout>
 8003d36:	bf00      	nop
	...

08003d40 <put.lto_priv.59>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003d40:	3030      	adds	r0, #48	; 0x30
 8003d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d46:	f7ff bfc3 	b.w	8003cd0 <chOQPutTimeout>
 8003d4a:	bf00      	nop
 8003d4c:	0000      	movs	r0, r0
	...

08003d50 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
	...

08003d60 <queues2_setup.lto_priv.136>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8003d60:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <queues2_setup.lto_priv.136+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <queues2_setup.lto_priv.136+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8003d66:	4809      	ldr	r0, [pc, #36]	; (8003d8c <queues2_setup.lto_priv.136+0x2c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8003d68:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8003d6a:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8003d6c:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8003d6e:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8003d70:	609c      	str	r4, [r3, #8]
 8003d72:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003d74:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 8003d76:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8003d78:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8003d7a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8003d7c:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 8003d7e:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8003d80:	bc30      	pop	{r4, r5}
 8003d82:	4770      	bx	lr
 8003d84:	20002fa8 	.word	0x20002fa8
 8003d88:	2000090c 	.word	0x2000090c
 8003d8c:	08003d51 	.word	0x08003d51

08003d90 <queues1_setup.lto_priv.134>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <queues1_setup.lto_priv.134+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <queues1_setup.lto_priv.134+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <queues1_setup.lto_priv.134+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8003d96:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003d98:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8003d9a:	1d14      	adds	r4, r2, #4
 8003d9c:	611c      	str	r4, [r3, #16]
 8003d9e:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003da0:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8003da2:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8003da4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8003da6:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8003da8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003daa:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8003dac:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8003dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20002fa8 	.word	0x20002fa8
 8003db8:	20000930 	.word	0x20000930
 8003dbc:	08003d51 	.word	0x08003d51

08003dc0 <dyn3_setup.lto_priv.132>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8003dc0:	4909      	ldr	r1, [pc, #36]	; (8003de8 <dyn3_setup.lto_priv.132+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8003dc2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003dc4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8003dc6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <dyn3_setup.lto_priv.132+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8003dcc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003dd0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8003dd4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8003dd6:	6099      	str	r1, [r3, #8]
 8003dd8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8003dda:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8003de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20002fa8 	.word	0x20002fa8
 8003dec:	20000f08 	.word	0x20000f08

08003df0 <dyn2_setup.lto_priv.130>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <dyn2_setup.lto_priv.130+0x10>)
 8003df2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8003df4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003df8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8003dfa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	4770      	bx	lr
 8003e00:	20002f94 	.word	0x20002f94
	...

08003e10 <dyn1_setup.lto_priv.128>:
  heapp->h_free.h.u.next = hp;
 8003e10:	4909      	ldr	r1, [pc, #36]	; (8003e38 <dyn1_setup.lto_priv.128+0x28>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8003e12:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003e14:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8003e16:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <dyn1_setup.lto_priv.128+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8003e1c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003e20:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8003e24:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8003e26:	6099      	str	r1, [r3, #8]
 8003e28:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8003e2a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8003e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20002fa8 	.word	0x20002fa8
 8003e3c:	20000f08 	.word	0x20000f08

08003e40 <sys1_execute.lto_priv.89>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8003e40:	b510      	push	{r4, lr}
 8003e42:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e44:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8003e48:	b91b      	cbnz	r3, 8003e52 <sys1_execute.lto_priv.89+0x12>
 8003e4a:	f7fd f969 	bl	8001120 <chSysGetStatusAndLockX.part.2.lto_priv.79>
 8003e4e:	f7fd f957 	bl	8001100 <chSysRestoreStatusX.part.3.lto_priv.78>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e52:	2320      	movs	r3, #32
 8003e54:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e58:	f3ef 8311 	mrs	r3, BASEPRI
 8003e5c:	b91b      	cbnz	r3, 8003e66 <sys1_execute.lto_priv.89+0x26>
 8003e5e:	f7fd f95f 	bl	8001120 <chSysGetStatusAndLockX.part.2.lto_priv.79>
 8003e62:	f7fd f94d 	bl	8001100 <chSysRestoreStatusX.part.3.lto_priv.78>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e66:	2300      	movs	r3, #0
 8003e68:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e6c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8003e70:	b913      	cbnz	r3, 8003e78 <sys1_execute.lto_priv.89+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e72:	2320      	movs	r3, #32
 8003e74:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	b913      	cbnz	r3, 8003e84 <sys1_execute.lto_priv.89+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e7e:	2320      	movs	r3, #32
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e90:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003e94:	b10a      	cbz	r2, 8003e9a <sys1_execute.lto_priv.89+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003e96:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9e:	b113      	cbz	r3, 8003ea6 <sys1_execute.lto_priv.89+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9304      	str	r3, [sp, #16]
 8003eaa:	2320      	movs	r3, #32
 8003eac:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003eb0:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8003eb2:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003eb4:	b113      	cbz	r3, 8003ebc <sys1_execute.lto_priv.89+0x7c>
    chVTDoResetI(vtp);
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fc ff62 	bl	8000d80 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <sys1_execute.lto_priv.89+0xb0>)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f7fc ff9c 	bl	8000e00 <chVTDoSetI>
 8003ec8:	2400      	movs	r4, #0
 8003eca:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 8003ece:	200a      	movs	r0, #10
 8003ed0:	f7fd f906 	bl	80010e0 <chThdSleep>
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	9904      	ldr	r1, [sp, #16]
 8003edc:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 8003ee0:	fab1 f181 	clz	r1, r1
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	0949      	lsrs	r1, r1, #5
 8003ee8:	f7ff fa02 	bl	80032f0 <_test_assert>
}
 8003eec:	b006      	add	sp, #24
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	08003f01 	.word	0x08003f01
	...

08003f00 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8003f00:	b508      	push	{r3, lr}
 8003f02:	2320      	movs	r3, #32
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f382 8811 	msr	BASEPRI, r2
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f12:	f3ef 8311 	mrs	r3, BASEPRI
 8003f16:	b91b      	cbnz	r3, 8003f20 <vtcb+0x20>
 8003f18:	f7fd f902 	bl	8001120 <chSysGetStatusAndLockX.part.2.lto_priv.79>
 8003f1c:	f7fd f8f0 	bl	8001100 <chSysRestoreStatusX.part.3.lto_priv.78>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003f20:	2300      	movs	r3, #0
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	bd08      	pop	{r3, pc}
	...

08003f30 <thread2>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <thread2+0xc>)
 8003f32:	2100      	movs	r1, #0
 8003f34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003f38:	f7ff beca 	b.w	8003cd0 <chOQPutTimeout>
 8003f3c:	2000090c 	.word	0x2000090c

08003f40 <thread.lto_priv.55>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8003f40:	7800      	ldrb	r0, [r0, #0]
 8003f42:	f7ff b9ed 	b.w	8003320 <test_emit_token>
 8003f46:	bf00      	nop
	...

08003f50 <queues2_execute.lto_priv.137>:
}

static void queues2_execute(void) {
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	2320      	movs	r3, #32
 8003f56:	b082      	sub	sp, #8
 8003f58:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003f5c:	4f8f      	ldr	r7, [pc, #572]	; (800419c <queues2_execute.lto_priv.137+0x24c>)
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d05d      	beq.n	8004022 <queues2_execute.lto_priv.137+0xd2>
 8003f66:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7ff f9c1 	bl	80032f0 <_test_assert>
 8003f6e:	bbb8      	cbnz	r0, 8003fe0 <queues2_execute.lto_priv.137+0x90>
 8003f70:	f380 8811 	msr	BASEPRI, r0
 8003f74:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8003f76:	4d89      	ldr	r5, [pc, #548]	; (800419c <queues2_execute.lto_priv.137+0x24c>)
 8003f78:	4621      	mov	r1, r4
 8003f7a:	3401      	adds	r4, #1
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f82:	b2e4      	uxtb	r4, r4
 8003f84:	f7ff fea4 	bl	8003cd0 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003f88:	2c45      	cmp	r4, #69	; 0x45
 8003f8a:	d1f4      	bne.n	8003f76 <queues2_execute.lto_priv.137+0x26>
 8003f8c:	2620      	movs	r6, #32
 8003f8e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8003f92:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8003f94:	2002      	movs	r0, #2
 8003f96:	fab1 f181 	clz	r1, r1
 8003f9a:	0949      	lsrs	r1, r1, #5
 8003f9c:	f7ff f9a8 	bl	80032f0 <_test_assert>
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	b9e8      	cbnz	r0, 8003fe0 <queues2_execute.lto_priv.137+0x90>
 8003fa4:	f380 8811 	msr	BASEPRI, r0
 8003fa8:	4682      	mov	sl, r0
 8003faa:	2404      	movs	r4, #4
 8003fac:	f04f 0920 	mov.w	r9, #32
 8003fb0:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8003fb4:	4d79      	ldr	r5, [pc, #484]	; (800419c <queues2_execute.lto_priv.137+0x24c>)
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f7ff fda2 	bl	8003b00 <chOQGetI>
 8003fbc:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    test_emit_token(c);
 8003fc0:	b2c0      	uxtb	r0, r0
 8003fc2:	f7ff f9ad 	bl	8003320 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8003fc6:	3c01      	subs	r4, #1
 8003fc8:	d1f0      	bne.n	8003fac <queues2_execute.lto_priv.137+0x5c>
 8003fca:	f389 8811 	msr	BASEPRI, r9
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003fce:	696a      	ldr	r2, [r5, #20]
 8003fd0:	69ab      	ldr	r3, [r5, #24]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d02a      	beq.n	800402c <queues2_execute.lto_priv.137+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f7ff f989 	bl	80032f0 <_test_assert>
 8003fde:	b128      	cbz	r0, 8003fec <queues2_execute.lto_priv.137+0x9c>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003fe6:	b002      	add	sp, #8
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8003ff0:	2004      	movs	r0, #4
 8003ff2:	496b      	ldr	r1, [pc, #428]	; (80041a0 <queues2_execute.lto_priv.137+0x250>)
 8003ff4:	f7ff f954 	bl	80032a0 <_test_assert_sequence>
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1f3      	bne.n	8003fe6 <queues2_execute.lto_priv.137+0x96>
 8003ffe:	2620      	movs	r6, #32
 8004000:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8004004:	4d65      	ldr	r5, [pc, #404]	; (800419c <queues2_execute.lto_priv.137+0x24c>)
 8004006:	4628      	mov	r0, r5
 8004008:	f7ff fd7a 	bl	8003b00 <chOQGetI>
 800400c:	3003      	adds	r0, #3
 800400e:	bf14      	ite	ne
 8004010:	2100      	movne	r1, #0
 8004012:	2101      	moveq	r1, #1
 8004014:	2005      	movs	r0, #5
 8004016:	f7ff f96b 	bl	80032f0 <_test_assert>
 800401a:	b170      	cbz	r0, 800403a <queues2_execute.lto_priv.137+0xea>
 800401c:	f384 8811 	msr	BASEPRI, r4
 8004020:	e7e1      	b.n	8003fe6 <queues2_execute.lto_priv.137+0x96>
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	3100      	adds	r1, #0
 8004026:	bf18      	it	ne
 8004028:	2101      	movne	r1, #1
 800402a:	e79d      	b.n	8003f68 <queues2_execute.lto_priv.137+0x18>
 800402c:	68ab      	ldr	r3, [r5, #8]
 800402e:	f113 0800 	adds.w	r8, r3, #0
 8004032:	bf18      	it	ne
 8004034:	f04f 0801 	movne.w	r8, #1
 8004038:	e7cd      	b.n	8003fd6 <queues2_execute.lto_priv.137+0x86>
 800403a:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 800403e:	4959      	ldr	r1, [pc, #356]	; (80041a4 <queues2_execute.lto_priv.137+0x254>)
 8004040:	4603      	mov	r3, r0
 8004042:	2208      	movs	r2, #8
 8004044:	4628      	mov	r0, r5
 8004046:	f7ff fd0b 	bl	8003a60 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 800404a:	f1a0 0104 	sub.w	r1, r0, #4
 800404e:	fab1 f181 	clz	r1, r1
 8004052:	2006      	movs	r0, #6
 8004054:	0949      	lsrs	r1, r1, #5
 8004056:	f7ff f94b 	bl	80032f0 <_test_assert>
 800405a:	4604      	mov	r4, r0
 800405c:	2800      	cmp	r0, #0
 800405e:	d1c2      	bne.n	8003fe6 <queues2_execute.lto_priv.137+0x96>
 8004060:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004064:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8004066:	2007      	movs	r0, #7
 8004068:	fab1 f181 	clz	r1, r1
 800406c:	0949      	lsrs	r1, r1, #5
 800406e:	f7ff f93f 	bl	80032f0 <_test_assert>
 8004072:	4680      	mov	r8, r0
 8004074:	2800      	cmp	r0, #0
 8004076:	d1d1      	bne.n	800401c <queues2_execute.lto_priv.137+0xcc>
 8004078:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800407c:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <queues2_execute.lto_priv.137+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800407e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4849      	ldr	r0, [pc, #292]	; (80041ac <queues2_execute.lto_priv.137+0x25c>)
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <queues2_execute.lto_priv.137+0x260>)
 800408a:	3201      	adds	r2, #1
 800408c:	f8cd 8000 	str.w	r8, [sp]
 8004090:	f7fc fbbe 	bl	8000810 <chThdCreateStatic>
 8004094:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <queues2_execute.lto_priv.137+0x264>)
 8004096:	6018      	str	r0, [r3, #0]
 8004098:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800409c:	68e9      	ldr	r1, [r5, #12]
 800409e:	692b      	ldr	r3, [r5, #16]
 80040a0:	68aa      	ldr	r2, [r5, #8]
 80040a2:	1a5b      	subs	r3, r3, r1
 80040a4:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 80040a6:	f1a1 0104 	sub.w	r1, r1, #4
 80040aa:	fab1 f181 	clz	r1, r1
 80040ae:	2008      	movs	r0, #8
 80040b0:	0949      	lsrs	r1, r1, #5
 80040b2:	f7ff f91d 	bl	80032f0 <_test_assert>
 80040b6:	b110      	cbz	r0, 80040be <queues2_execute.lto_priv.137+0x16e>
 80040b8:	f388 8811 	msr	BASEPRI, r8
 80040bc:	e793      	b.n	8003fe6 <queues2_execute.lto_priv.137+0x96>
 80040be:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80040c2:	f7ff f895 	bl	80031f0 <test_wait_threads>
 80040c6:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 80040ca:	68e9      	ldr	r1, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 80040cc:	692a      	ldr	r2, [r5, #16]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	1a52      	subs	r2, r2, r1
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 80040d2:	42ab      	cmp	r3, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 80040d4:	61a9      	str	r1, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
 80040d6:	6169      	str	r1, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 80040d8:	60aa      	str	r2, [r5, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80040da:	bf18      	it	ne
 80040dc:	f06f 0401 	mvnne.w	r4, #1
 80040e0:	d009      	beq.n	80040f6 <queues2_execute.lto_priv.137+0x1a6>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80040e2:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80040e4:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80040e6:	6057      	str	r7, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80040e8:	603a      	str	r2, [r7, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80040ea:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 80040ec:	f7fc fc50 	bl	8000990 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	42bb      	cmp	r3, r7
 80040f4:	d1f5      	bne.n	80040e2 <queues2_execute.lto_priv.137+0x192>
 80040f6:	2500      	movs	r5, #0
 80040f8:	f385 8811 	msr	BASEPRI, r5
 80040fc:	2620      	movs	r6, #32
 80040fe:	f386 8811 	msr	BASEPRI, r6
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 800410a:	1a59      	subs	r1, r3, r1
 800410c:	fab1 f181 	clz	r1, r1
 8004110:	2009      	movs	r0, #9
 8004112:	0949      	lsrs	r1, r1, #5
 8004114:	f7ff f8ec 	bl	80032f0 <_test_assert>
 8004118:	4c20      	ldr	r4, [pc, #128]	; (800419c <queues2_execute.lto_priv.137+0x24c>)
 800411a:	4603      	mov	r3, r0
 800411c:	b110      	cbz	r0, 8004124 <queues2_execute.lto_priv.137+0x1d4>
 800411e:	f385 8811 	msr	BASEPRI, r5
 8004122:	e760      	b.n	8003fe6 <queues2_execute.lto_priv.137+0x96>
 8004124:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004128:	491e      	ldr	r1, [pc, #120]	; (80041a4 <queues2_execute.lto_priv.137+0x254>)
 800412a:	2202      	movs	r2, #2
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff fc97 	bl	8003a60 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004132:	3802      	subs	r0, #2
 8004134:	4241      	negs	r1, r0
 8004136:	4141      	adcs	r1, r0
 8004138:	200a      	movs	r0, #10
 800413a:	f7ff f8d9 	bl	80032f0 <_test_assert>
 800413e:	4603      	mov	r3, r0
 8004140:	2800      	cmp	r0, #0
 8004142:	f47f af50 	bne.w	8003fe6 <queues2_execute.lto_priv.137+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004146:	4917      	ldr	r1, [pc, #92]	; (80041a4 <queues2_execute.lto_priv.137+0x254>)
 8004148:	2202      	movs	r2, #2
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff fc88 	bl	8003a60 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004150:	1e82      	subs	r2, r0, #2
 8004152:	4251      	negs	r1, r2
 8004154:	4151      	adcs	r1, r2
 8004156:	200b      	movs	r0, #11
 8004158:	f7ff f8ca 	bl	80032f0 <_test_assert>
 800415c:	4605      	mov	r5, r0
 800415e:	2800      	cmp	r0, #0
 8004160:	f47f af41 	bne.w	8003fe6 <queues2_execute.lto_priv.137+0x96>
 8004164:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004168:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 800416a:	200c      	movs	r0, #12
 800416c:	fab1 f181 	clz	r1, r1
 8004170:	0949      	lsrs	r1, r1, #5
 8004172:	f7ff f8bd 	bl	80032f0 <_test_assert>
 8004176:	4601      	mov	r1, r0
 8004178:	2800      	cmp	r0, #0
 800417a:	d1d0      	bne.n	800411e <queues2_execute.lto_priv.137+0x1ce>
 800417c:	f380 8811 	msr	BASEPRI, r0

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004180:	220a      	movs	r2, #10
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff fda4 	bl	8003cd0 <chOQPutTimeout>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	4259      	negs	r1, r3
 800418c:	4159      	adcs	r1, r3
 800418e:	200d      	movs	r0, #13
}
 8004190:	b002      	add	sp, #8
 8004192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004196:	f7ff b8ab 	b.w	80032f0 <_test_assert>
 800419a:	bf00      	nop
 800419c:	2000090c 	.word	0x2000090c
 80041a0:	08007da0 	.word	0x08007da0
 80041a4:	200030f0 	.word	0x200030f0
 80041a8:	20002e30 	.word	0x20002e30
 80041ac:	20002fa8 	.word	0x20002fa8
 80041b0:	08003f31 	.word	0x08003f31
 80041b4:	20000ec0 	.word	0x20000ec0
	...

080041c0 <thread1>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <thread1+0xc>)
 80041c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80041c6:	f7fc bf4b 	b.w	8001060 <chIQGetTimeout>
 80041ca:	bf00      	nop
 80041cc:	20000930 	.word	0x20000930

080041d0 <queues1_execute.lto_priv.135>:
}

static void queues1_execute(void) {
 80041d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d4:	2420      	movs	r4, #32
 80041d6:	b082      	sub	sp, #8
 80041d8:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80041dc:	4f98      	ldr	r7, [pc, #608]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 80041de:	2001      	movs	r0, #1
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	fab1 f181 	clz	r1, r1
 80041e6:	0949      	lsrs	r1, r1, #5
 80041e8:	f7ff f882 	bl	80032f0 <_test_assert>
 80041ec:	4606      	mov	r6, r0
 80041ee:	b9e8      	cbnz	r0, 800422c <queues1_execute.lto_priv.135+0x5c>
 80041f0:	f380 8811 	msr	BASEPRI, r0
 80041f4:	f384 8811 	msr	BASEPRI, r4
 80041f8:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80041fa:	4d91      	ldr	r5, [pc, #580]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 80041fc:	4621      	mov	r1, r4
 80041fe:	3401      	adds	r4, #1
 8004200:	4628      	mov	r0, r5
 8004202:	b2e4      	uxtb	r4, r4
 8004204:	f7fc fbdc 	bl	80009c0 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8004208:	2c45      	cmp	r4, #69	; 0x45
 800420a:	d1f6      	bne.n	80041fa <queues1_execute.lto_priv.135+0x2a>
 800420c:	2300      	movs	r3, #0
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	2320      	movs	r3, #32
 8004214:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8004218:	69aa      	ldr	r2, [r5, #24]
 800421a:	696b      	ldr	r3, [r5, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d03a      	beq.n	8004296 <queues1_execute.lto_priv.135+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8004220:	4631      	mov	r1, r6
 8004222:	2002      	movs	r0, #2
 8004224:	f7ff f864 	bl	80032f0 <_test_assert>
 8004228:	4604      	mov	r4, r0
 800422a:	b128      	cbz	r0, 8004238 <queues1_execute.lto_priv.135+0x68>
 800422c:	2300      	movs	r3, #0
 800422e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004232:	b002      	add	sp, #8
 8004234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004238:	f380 8811 	msr	BASEPRI, r0
 800423c:	2320      	movs	r3, #32
 800423e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8004242:	487f      	ldr	r0, [pc, #508]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 8004244:	4621      	mov	r1, r4
 8004246:	f7fc fbbb 	bl	80009c0 <chIQPutI>
 800424a:	3004      	adds	r0, #4
 800424c:	bf14      	ite	ne
 800424e:	2100      	movne	r1, #0
 8004250:	2101      	moveq	r1, #1
 8004252:	2003      	movs	r0, #3
 8004254:	f7ff f84c 	bl	80032f0 <_test_assert>
 8004258:	b9c0      	cbnz	r0, 800428c <queues1_execute.lto_priv.135+0xbc>
 800425a:	f380 8811 	msr	BASEPRI, r0
 800425e:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8004260:	4d77      	ldr	r5, [pc, #476]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 8004262:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004266:	4628      	mov	r0, r5
 8004268:	f7fc fefa 	bl	8001060 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 800426c:	b2c0      	uxtb	r0, r0
 800426e:	f7ff f857 	bl	8003320 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8004272:	3c01      	subs	r4, #1
 8004274:	d1f4      	bne.n	8004260 <queues1_execute.lto_priv.135+0x90>
 8004276:	2620      	movs	r6, #32
 8004278:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800427c:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800427e:	2004      	movs	r0, #4
 8004280:	fab1 f181 	clz	r1, r1
 8004284:	0949      	lsrs	r1, r1, #5
 8004286:	f7ff f833 	bl	80032f0 <_test_assert>
 800428a:	b148      	cbz	r0, 80042a0 <queues1_execute.lto_priv.135+0xd0>
 800428c:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004290:	b002      	add	sp, #8
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8004296:	68ae      	ldr	r6, [r5, #8]
 8004298:	3600      	adds	r6, #0
 800429a:	bf18      	it	ne
 800429c:	2601      	movne	r6, #1
 800429e:	e7bf      	b.n	8004220 <queues1_execute.lto_priv.135+0x50>
 80042a0:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 80042a4:	2005      	movs	r0, #5
 80042a6:	4967      	ldr	r1, [pc, #412]	; (8004444 <queues1_execute.lto_priv.135+0x274>)
 80042a8:	f7fe fffa 	bl	80032a0 <_test_assert_sequence>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d1c0      	bne.n	8004232 <queues1_execute.lto_priv.135+0x62>
 80042b0:	f386 8811 	msr	BASEPRI, r6
 80042b4:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80042b6:	4d62      	ldr	r5, [pc, #392]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 80042b8:	4621      	mov	r1, r4
 80042ba:	3401      	adds	r4, #1
 80042bc:	4628      	mov	r0, r5
 80042be:	b2e4      	uxtb	r4, r4
 80042c0:	f7fc fb7e 	bl	80009c0 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80042c4:	2c45      	cmp	r4, #69	; 0x45
 80042c6:	d1f6      	bne.n	80042b6 <queues1_execute.lto_priv.135+0xe6>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80042ce:	495e      	ldr	r1, [pc, #376]	; (8004448 <queues1_execute.lto_priv.135+0x278>)
 80042d0:	2208      	movs	r2, #8
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7fc fe84 	bl	8000fe0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80042d8:	f1a0 0104 	sub.w	r1, r0, #4
 80042dc:	fab1 f181 	clz	r1, r1
 80042e0:	2006      	movs	r0, #6
 80042e2:	0949      	lsrs	r1, r1, #5
 80042e4:	f7ff f804 	bl	80032f0 <_test_assert>
 80042e8:	4604      	mov	r4, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1a1      	bne.n	8004232 <queues1_execute.lto_priv.135+0x62>
 80042ee:	2620      	movs	r6, #32
 80042f0:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80042f4:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 80042f6:	2007      	movs	r0, #7
 80042f8:	fab1 f181 	clz	r1, r1
 80042fc:	0949      	lsrs	r1, r1, #5
 80042fe:	f7fe fff7 	bl	80032f0 <_test_assert>
 8004302:	2800      	cmp	r0, #0
 8004304:	d1c2      	bne.n	800428c <queues1_execute.lto_priv.135+0xbc>
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	f386 8811 	msr	BASEPRI, r6
 800430e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004310:	4d4b      	ldr	r5, [pc, #300]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 8004312:	4621      	mov	r1, r4
 8004314:	3401      	adds	r4, #1
 8004316:	4628      	mov	r0, r5
 8004318:	b2e4      	uxtb	r4, r4
 800431a:	f7fc fb51 	bl	80009c0 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800431e:	2c45      	cmp	r4, #69	; 0x45
 8004320:	d1f6      	bne.n	8004310 <queues1_execute.lto_priv.135+0x140>
 8004322:	2300      	movs	r3, #0
 8004324:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004328:	4947      	ldr	r1, [pc, #284]	; (8004448 <queues1_execute.lto_priv.135+0x278>)
 800432a:	4628      	mov	r0, r5
 800432c:	2202      	movs	r2, #2
 800432e:	f7fc fe57 	bl	8000fe0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004332:	f1a0 0102 	sub.w	r1, r0, #2
 8004336:	fab1 f181 	clz	r1, r1
 800433a:	2008      	movs	r0, #8
 800433c:	0949      	lsrs	r1, r1, #5
 800433e:	f7fe ffd7 	bl	80032f0 <_test_assert>
 8004342:	2800      	cmp	r0, #0
 8004344:	f47f af75 	bne.w	8004232 <queues1_execute.lto_priv.135+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004348:	4603      	mov	r3, r0
 800434a:	493f      	ldr	r1, [pc, #252]	; (8004448 <queues1_execute.lto_priv.135+0x278>)
 800434c:	2202      	movs	r2, #2
 800434e:	4628      	mov	r0, r5
 8004350:	f7fc fe46 	bl	8000fe0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004354:	f1a0 0102 	sub.w	r1, r0, #2
 8004358:	fab1 f181 	clz	r1, r1
 800435c:	2009      	movs	r0, #9
 800435e:	0949      	lsrs	r1, r1, #5
 8004360:	f7fe ffc6 	bl	80032f0 <_test_assert>
 8004364:	4680      	mov	r8, r0
 8004366:	2800      	cmp	r0, #0
 8004368:	f47f af63 	bne.w	8004232 <queues1_execute.lto_priv.135+0x62>
 800436c:	2620      	movs	r6, #32
 800436e:	f386 8811 	msr	BASEPRI, r6
 8004372:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8004374:	200a      	movs	r0, #10
 8004376:	fab1 f181 	clz	r1, r1
 800437a:	0949      	lsrs	r1, r1, #5
 800437c:	f7fe ffb8 	bl	80032f0 <_test_assert>
 8004380:	4604      	mov	r4, r0
 8004382:	b110      	cbz	r0, 800438a <queues1_execute.lto_priv.135+0x1ba>
 8004384:	f388 8811 	msr	BASEPRI, r8
 8004388:	e753      	b.n	8004232 <queues1_execute.lto_priv.135+0x62>
 800438a:	f380 8811 	msr	BASEPRI, r0
 800438e:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f7fc fb13 	bl	80009c0 <chIQPutI>
 800439a:	682b      	ldr	r3, [r5, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 800439c:	68ea      	ldr	r2, [r5, #12]
 800439e:	42ab      	cmp	r3, r5
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80043a0:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80043a2:	61aa      	str	r2, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 80043a4:	616a      	str	r2, [r5, #20]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80043a6:	bf18      	it	ne
 80043a8:	f06f 0401 	mvnne.w	r4, #1
 80043ac:	d009      	beq.n	80043c2 <queues1_execute.lto_priv.135+0x1f2>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80043ae:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80043b0:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80043b2:	6057      	str	r7, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80043b4:	603a      	str	r2, [r7, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80043b6:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 80043b8:	f7fc faea 	bl	8000990 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	42bb      	cmp	r3, r7
 80043c0:	d1f5      	bne.n	80043ae <queues1_execute.lto_priv.135+0x1de>
 80043c2:	f04f 0800 	mov.w	r8, #0
 80043c6:	f388 8811 	msr	BASEPRI, r8
 80043ca:	2620      	movs	r6, #32
 80043cc:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 80043d0:	68b9      	ldr	r1, [r7, #8]
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80043d2:	200b      	movs	r0, #11
 80043d4:	fab1 f181 	clz	r1, r1
 80043d8:	0949      	lsrs	r1, r1, #5
 80043da:	f7fe ff89 	bl	80032f0 <_test_assert>
 80043de:	4d18      	ldr	r5, [pc, #96]	; (8004440 <queues1_execute.lto_priv.135+0x270>)
 80043e0:	4604      	mov	r4, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d1ce      	bne.n	8004384 <queues1_execute.lto_priv.135+0x1b4>
 80043e6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <queues1_execute.lto_priv.135+0x27c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80043ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	4817      	ldr	r0, [pc, #92]	; (8004450 <queues1_execute.lto_priv.135+0x280>)
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <queues1_execute.lto_priv.135+0x284>)
 80043f8:	3201      	adds	r2, #1
 80043fa:	9400      	str	r4, [sp, #0]
 80043fc:	f7fc fa08 	bl	8000810 <chThdCreateStatic>
 8004400:	4b15      	ldr	r3, [pc, #84]	; (8004458 <queues1_execute.lto_priv.135+0x288>)
 8004402:	6018      	str	r0, [r3, #0]
 8004404:	f386 8811 	msr	BASEPRI, r6
 8004408:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 800440a:	200c      	movs	r0, #12
 800440c:	fab1 f181 	clz	r1, r1
 8004410:	0949      	lsrs	r1, r1, #5
 8004412:	f7fe ff6d 	bl	80032f0 <_test_assert>
 8004416:	2800      	cmp	r0, #0
 8004418:	f47f af38 	bne.w	800428c <queues1_execute.lto_priv.135+0xbc>
 800441c:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8004420:	f7fe fee6 	bl	80031f0 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8004424:	4628      	mov	r0, r5
 8004426:	210a      	movs	r1, #10
 8004428:	f7fc fe1a 	bl	8001060 <chIQGetTimeout>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	4259      	negs	r1, r3
 8004430:	4159      	adcs	r1, r3
 8004432:	200d      	movs	r0, #13
}
 8004434:	b002      	add	sp, #8
 8004436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800443a:	f7fe bf59 	b.w	80032f0 <_test_assert>
 800443e:	bf00      	nop
 8004440:	20000930 	.word	0x20000930
 8004444:	08007da0 	.word	0x08007da0
 8004448:	200030f0 	.word	0x200030f0
 800444c:	20002e30 	.word	0x20002e30
 8004450:	20002fa8 	.word	0x20002fa8
 8004454:	080041c1 	.word	0x080041c1
 8004458:	20000ec0 	.word	0x20000ec0
 800445c:	00000000 	.word	0x00000000

08004460 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4605      	mov	r5, r0
 8004464:	2320      	movs	r3, #32
 8004466:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <regfind+0x34>)
 800446c:	2400      	movs	r4, #0
 800446e:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8004470:	7f9a      	ldrb	r2, [r3, #30]
 8004472:	3201      	adds	r2, #1
 8004474:	779a      	strb	r2, [r3, #30]
 8004476:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 800447a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 800447c:	42ab      	cmp	r3, r5
 800447e:	bf08      	it	eq
 8004480:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8004484:	f7fc f88c 	bl	80005a0 <chRegNextThread>
  } while (ftp != NULL);
 8004488:	4603      	mov	r3, r0
 800448a:	2800      	cmp	r0, #0
 800448c:	d1f5      	bne.n	800447a <regfind+0x1a>
  return found;
}
 800448e:	4620      	mov	r0, r4
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	20002e30 	.word	0x20002e30
	...

080044a0 <dyn3_execute.lto_priv.133>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80044a0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <dyn3_execute.lto_priv.133+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80044a4:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <dyn3_execute.lto_priv.133+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80044a6:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80044a8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4848      	ldr	r0, [pc, #288]	; (80045d4 <dyn3_execute.lto_priv.133+0x134>)
 80044b4:	3a01      	subs	r2, #1
 80044b6:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <dyn3_execute.lto_priv.133+0x138>)
 80044b8:	f7fc f962 	bl	8000780 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80044bc:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80044be:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80044c0:	2001      	movs	r0, #1
 80044c2:	1a09      	subs	r1, r1, r0
 80044c4:	fab1 f181 	clz	r1, r1
 80044c8:	0949      	lsrs	r1, r1, #5
 80044ca:	f7fe ff11 	bl	80032f0 <_test_assert>
 80044ce:	b108      	cbz	r0, 80044d4 <dyn3_execute.lto_priv.133+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 80044d0:	b002      	add	sp, #8
 80044d2:	bd10      	pop	{r4, pc}
 80044d4:	2320      	movs	r3, #32
 80044d6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 80044da:	7fa3      	ldrb	r3, [r4, #30]
 80044dc:	3301      	adds	r3, #1
 80044de:	77a3      	strb	r3, [r4, #30]
 80044e0:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 80044e4:	7fa1      	ldrb	r1, [r4, #30]
 80044e6:	2002      	movs	r0, #2
 80044e8:	1a09      	subs	r1, r1, r0
 80044ea:	fab1 f181 	clz	r1, r1
 80044ee:	0949      	lsrs	r1, r1, #5
 80044f0:	f7fe fefe 	bl	80032f0 <_test_assert>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1eb      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  chThdRelease(tp);
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7fc f821 	bl	8000540 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 80044fe:	7fa1      	ldrb	r1, [r4, #30]
 8004500:	2003      	movs	r0, #3
 8004502:	f1a1 0101 	sub.w	r1, r1, #1
 8004506:	fab1 f181 	clz	r1, r1
 800450a:	0949      	lsrs	r1, r1, #5
 800450c:	f7fe fef0 	bl	80032f0 <_test_assert>
 8004510:	2800      	cmp	r0, #0
 8004512:	d1dd      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff ffa3 	bl	8004460 <regfind>
 800451a:	4601      	mov	r1, r0
 800451c:	2004      	movs	r0, #4
 800451e:	f7fe fee7 	bl	80032f0 <_test_assert>
 8004522:	2800      	cmp	r0, #0
 8004524:	d1d4      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff ff9a 	bl	8004460 <regfind>
 800452c:	4601      	mov	r1, r0
 800452e:	2005      	movs	r0, #5
 8004530:	f7fe fede 	bl	80032f0 <_test_assert>
 8004534:	2800      	cmp	r0, #0
 8004536:	d1cb      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8004538:	4620      	mov	r0, r4
 800453a:	f7fc f801 	bl	8000540 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 800453e:	7fa1      	ldrb	r1, [r4, #30]
 8004540:	2006      	movs	r0, #6
 8004542:	fab1 f181 	clz	r1, r1
 8004546:	0949      	lsrs	r1, r1, #5
 8004548:	f7fe fed2 	bl	80032f0 <_test_assert>
 800454c:	2800      	cmp	r0, #0
 800454e:	d1bf      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8004550:	7f21      	ldrb	r1, [r4, #28]
 8004552:	2007      	movs	r0, #7
 8004554:	fab1 f181 	clz	r1, r1
 8004558:	0949      	lsrs	r1, r1, #5
 800455a:	f7fe fec9 	bl	80032f0 <_test_assert>
 800455e:	2800      	cmp	r0, #0
 8004560:	d1b6      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff ff7c 	bl	8004460 <regfind>
 8004568:	4601      	mov	r1, r0
 800456a:	2008      	movs	r0, #8
 800456c:	f7fe fec0 	bl	80032f0 <_test_assert>
 8004570:	2800      	cmp	r0, #0
 8004572:	d1ad      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff ff73 	bl	8004460 <regfind>
 800457a:	4601      	mov	r1, r0
 800457c:	2009      	movs	r0, #9
 800457e:	f7fe feb7 	bl	80032f0 <_test_assert>
 8004582:	2800      	cmp	r0, #0
 8004584:	d1a4      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8004586:	2064      	movs	r0, #100	; 0x64
 8004588:	f7fc fdaa 	bl	80010e0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 800458c:	7f21      	ldrb	r1, [r4, #28]
 800458e:	200a      	movs	r0, #10
 8004590:	f1a1 030f 	sub.w	r3, r1, #15
 8004594:	4259      	negs	r1, r3
 8004596:	4159      	adcs	r1, r3
 8004598:	f7fe feaa 	bl	80032f0 <_test_assert>
 800459c:	2800      	cmp	r0, #0
 800459e:	d197      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7ff ff5d 	bl	8004460 <regfind>
 80045a6:	4601      	mov	r1, r0
 80045a8:	200b      	movs	r0, #11
 80045aa:	f7fe fea1 	bl	80032f0 <_test_assert>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d18e      	bne.n	80044d0 <dyn3_execute.lto_priv.133+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff ff54 	bl	8004460 <regfind>
 80045b8:	f080 0101 	eor.w	r1, r0, #1
 80045bc:	b2c9      	uxtb	r1, r1
 80045be:	200c      	movs	r0, #12
}
 80045c0:	b002      	add	sp, #8
 80045c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 80045c6:	f7fe be93 	b.w	80032f0 <_test_assert>
 80045ca:	bf00      	nop
 80045cc:	20002e30 	.word	0x20002e30
 80045d0:	08007144 	.word	0x08007144
 80045d4:	20000f08 	.word	0x20000f08
 80045d8:	08003f41 	.word	0x08003f41
 80045dc:	00000000 	.word	0x00000000

080045e0 <pools1_execute.lto_priv.127>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <pools1_execute.lto_priv.127+0xc0>)
 80045e4:	4c2f      	ldr	r4, [pc, #188]	; (80046a4 <pools1_execute.lto_priv.127+0xc4>)
 80045e6:	2205      	movs	r2, #5
 80045e8:	2520      	movs	r5, #32
 80045ea:	2000      	movs	r0, #0
 80045ec:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80045f0:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 80045f2:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80045f4:	6019      	str	r1, [r3, #0]
 80045f6:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80045fa:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 80045fc:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80045fe:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8004600:	d1f4      	bne.n	80045ec <pools1_execute.lto_priv.127+0xc>
 8004602:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8004604:	4827      	ldr	r0, [pc, #156]	; (80046a4 <pools1_execute.lto_priv.127+0xc4>)
 8004606:	f7ff f95b 	bl	80038c0 <chPoolAlloc>
 800460a:	1c01      	adds	r1, r0, #0
 800460c:	bf18      	it	ne
 800460e:	2101      	movne	r1, #1
 8004610:	2001      	movs	r0, #1
 8004612:	f7fe fe6d 	bl	80032f0 <_test_assert>
 8004616:	bb90      	cbnz	r0, 800467e <pools1_execute.lto_priv.127+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004618:	3d01      	subs	r5, #1
 800461a:	d1f3      	bne.n	8004604 <pools1_execute.lto_priv.127+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 800461c:	4821      	ldr	r0, [pc, #132]	; (80046a4 <pools1_execute.lto_priv.127+0xc4>)
 800461e:	f7ff f94f 	bl	80038c0 <chPoolAlloc>
 8004622:	fab0 f180 	clz	r1, r0
 8004626:	2002      	movs	r0, #2
 8004628:	0949      	lsrs	r1, r1, #5
 800462a:	f7fe fe61 	bl	80032f0 <_test_assert>
 800462e:	bb30      	cbnz	r0, 800467e <pools1_execute.lto_priv.127+0x9e>
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <pools1_execute.lto_priv.127+0xc8>)
 8004632:	2620      	movs	r6, #32
 8004634:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8004638:	f853 2b04 	ldr.w	r2, [r3], #4
 800463c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004640:	6821      	ldr	r1, [r4, #0]
 8004642:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8004644:	6022      	str	r2, [r4, #0]
 8004646:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 800464a:	4283      	cmp	r3, r0
 800464c:	d1f4      	bne.n	8004638 <pools1_execute.lto_priv.127+0x58>
 800464e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8004650:	4d14      	ldr	r5, [pc, #80]	; (80046a4 <pools1_execute.lto_priv.127+0xc4>)
 8004652:	4628      	mov	r0, r5
 8004654:	f7ff f934 	bl	80038c0 <chPoolAlloc>
 8004658:	1c01      	adds	r1, r0, #0
 800465a:	bf18      	it	ne
 800465c:	2101      	movne	r1, #1
 800465e:	2003      	movs	r0, #3
 8004660:	f7fe fe46 	bl	80032f0 <_test_assert>
 8004664:	b958      	cbnz	r0, 800467e <pools1_execute.lto_priv.127+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8004666:	3c01      	subs	r4, #1
 8004668:	d1f2      	bne.n	8004650 <pools1_execute.lto_priv.127+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 800466a:	4628      	mov	r0, r5
 800466c:	f7ff f928 	bl	80038c0 <chPoolAlloc>
 8004670:	fab0 f180 	clz	r1, r0
 8004674:	2004      	movs	r0, #4
 8004676:	0949      	lsrs	r1, r1, #5
 8004678:	f7fe fe3a 	bl	80032f0 <_test_assert>
 800467c:	b100      	cbz	r0, 8004680 <pools1_execute.lto_priv.127+0xa0>
 800467e:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8004680:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <pools1_execute.lto_priv.127+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8004682:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004684:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8004686:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8004688:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 800468a:	606b      	str	r3, [r5, #4]
 800468c:	f7ff f918 	bl	80038c0 <chPoolAlloc>
}
 8004690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8004694:	fab0 f180 	clz	r1, r0
 8004698:	2005      	movs	r0, #5
 800469a:	0949      	lsrs	r1, r1, #5
 800469c:	f7fe be28 	b.w	80032f0 <_test_assert>
 80046a0:	20002fa8 	.word	0x20002fa8
 80046a4:	20000900 	.word	0x20000900
 80046a8:	08007150 	.word	0x08007150
 80046ac:	08005fc1 	.word	0x08005fc1

080046b0 <dyn2_execute.lto_priv.131>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80046b0:	4a2f      	ldr	r2, [pc, #188]	; (8004770 <dyn2_execute.lto_priv.131+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 80046b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80046b4:	6992      	ldr	r2, [r2, #24]
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <dyn2_execute.lto_priv.131+0xc4>)
 80046b8:	492f      	ldr	r1, [pc, #188]	; (8004778 <dyn2_execute.lto_priv.131+0xc8>)
 80046ba:	6895      	ldr	r5, [r2, #8]
 80046bc:	f103 0710 	add.w	r7, r3, #16
 80046c0:	2620      	movs	r6, #32
 80046c2:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 80046c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046c8:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80046cc:	6808      	ldr	r0, [r1, #0]
 80046ce:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 80046d0:	600a      	str	r2, [r1, #0]
 80046d2:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 80046d6:	42bb      	cmp	r3, r7
 80046d8:	d1f4      	bne.n	80046c4 <dyn2_execute.lto_priv.131+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 80046da:	4928      	ldr	r1, [pc, #160]	; (800477c <dyn2_execute.lto_priv.131+0xcc>)
 80046dc:	1e68      	subs	r0, r5, #1
 80046de:	f002 f987 	bl	80069f0 <chThdCreateFromMemoryPool.constprop.50>
 80046e2:	4c27      	ldr	r4, [pc, #156]	; (8004780 <dyn2_execute.lto_priv.131+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80046e4:	4927      	ldr	r1, [pc, #156]	; (8004784 <dyn2_execute.lto_priv.131+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 80046e6:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80046e8:	1ea8      	subs	r0, r5, #2
 80046ea:	f002 f981 	bl	80069f0 <chThdCreateFromMemoryPool.constprop.50>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80046ee:	4926      	ldr	r1, [pc, #152]	; (8004788 <dyn2_execute.lto_priv.131+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80046f0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80046f2:	1ee8      	subs	r0, r5, #3
 80046f4:	f002 f97c 	bl	80069f0 <chThdCreateFromMemoryPool.constprop.50>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 80046f8:	4924      	ldr	r1, [pc, #144]	; (800478c <dyn2_execute.lto_priv.131+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80046fa:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 80046fc:	1f28      	subs	r0, r5, #4
 80046fe:	f002 f977 	bl	80069f0 <chThdCreateFromMemoryPool.constprop.50>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004702:	4923      	ldr	r1, [pc, #140]	; (8004790 <dyn2_execute.lto_priv.131+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004704:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004706:	1f68      	subs	r0, r5, #5
 8004708:	f002 f972 	bl	80069f0 <chThdCreateFromMemoryPool.constprop.50>

  test_assert(1, (threads[0] != NULL) &&
 800470c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800470e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8004710:	b141      	cbz	r1, 8004724 <dyn2_execute.lto_priv.131+0x74>
 8004712:	6861      	ldr	r1, [r4, #4]
 8004714:	b131      	cbz	r1, 8004724 <dyn2_execute.lto_priv.131+0x74>
 8004716:	68a1      	ldr	r1, [r4, #8]
 8004718:	b121      	cbz	r1, 8004724 <dyn2_execute.lto_priv.131+0x74>
 800471a:	68e1      	ldr	r1, [r4, #12]
 800471c:	b111      	cbz	r1, 8004724 <dyn2_execute.lto_priv.131+0x74>
 800471e:	fab0 f180 	clz	r1, r0
 8004722:	0949      	lsrs	r1, r1, #5
 8004724:	2001      	movs	r0, #1
 8004726:	f7fe fde3 	bl	80032f0 <_test_assert>
 800472a:	b100      	cbz	r0, 800472e <dyn2_execute.lto_priv.131+0x7e>
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 800472e:	f7fe fd5f 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8004732:	2002      	movs	r0, #2
 8004734:	4917      	ldr	r1, [pc, #92]	; (8004794 <dyn2_execute.lto_priv.131+0xe4>)
 8004736:	f7fe fdb3 	bl	80032a0 <_test_assert_sequence>
 800473a:	2800      	cmp	r0, #0
 800473c:	d1f6      	bne.n	800472c <dyn2_execute.lto_priv.131+0x7c>
 800473e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8004740:	480d      	ldr	r0, [pc, #52]	; (8004778 <dyn2_execute.lto_priv.131+0xc8>)
 8004742:	f7ff f8bd 	bl	80038c0 <chPoolAlloc>
 8004746:	1c01      	adds	r1, r0, #0
 8004748:	bf18      	it	ne
 800474a:	2101      	movne	r1, #1
 800474c:	2003      	movs	r0, #3
 800474e:	f7fe fdcf 	bl	80032f0 <_test_assert>
 8004752:	2800      	cmp	r0, #0
 8004754:	d1ea      	bne.n	800472c <dyn2_execute.lto_priv.131+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8004756:	3c01      	subs	r4, #1
 8004758:	d1f2      	bne.n	8004740 <dyn2_execute.lto_priv.131+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800475a:	4807      	ldr	r0, [pc, #28]	; (8004778 <dyn2_execute.lto_priv.131+0xc8>)
 800475c:	f7ff f8b0 	bl	80038c0 <chPoolAlloc>
}
 8004760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004764:	fab0 f180 	clz	r1, r0
 8004768:	2004      	movs	r0, #4
 800476a:	0949      	lsrs	r1, r1, #5
 800476c:	f7fe bdc0 	b.w	80032f0 <_test_assert>
 8004770:	20002e30 	.word	0x20002e30
 8004774:	08007150 	.word	0x08007150
 8004778:	20002f94 	.word	0x20002f94
 800477c:	08007144 	.word	0x08007144
 8004780:	20000ec0 	.word	0x20000ec0
 8004784:	08007140 	.word	0x08007140
 8004788:	080084b0 	.word	0x080084b0
 800478c:	08008308 	.word	0x08008308
 8004790:	0800714c 	.word	0x0800714c
 8004794:	08007da0 	.word	0x08007da0
	...

080047a0 <dyn1_execute.lto_priv.129>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 80047a0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <dyn1_execute.lto_priv.129+0xd4>)
 80047a4:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80047a6:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 80047a8:	a903      	add	r1, sp, #12
 80047aa:	4833      	ldr	r0, [pc, #204]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047ac:	689d      	ldr	r5, [r3, #8]
 80047ae:	f7ff f89f 	bl	80038f0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80047b2:	4b32      	ldr	r3, [pc, #200]	; (800487c <dyn1_execute.lto_priv.129+0xdc>)
 80047b4:	1e6a      	subs	r2, r5, #1
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80047bc:	4b30      	ldr	r3, [pc, #192]	; (8004880 <dyn1_execute.lto_priv.129+0xe0>)
 80047be:	482e      	ldr	r0, [pc, #184]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047c0:	f7fb ffde 	bl	8000780 <chThdCreateFromHeap>
 80047c4:	4c2f      	ldr	r4, [pc, #188]	; (8004884 <dyn1_execute.lto_priv.129+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80047c6:	4b30      	ldr	r3, [pc, #192]	; (8004888 <dyn1_execute.lto_priv.129+0xe8>)
 80047c8:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80047ca:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80047d2:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <dyn1_execute.lto_priv.129+0xe0>)
 80047d4:	4828      	ldr	r0, [pc, #160]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047d6:	f7fb ffd3 	bl	8000780 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80047da:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80047dc:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80047de:	4826      	ldr	r0, [pc, #152]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047e0:	f7ff f886 	bl	80038f0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 80047e4:	9902      	ldr	r1, [sp, #8]
 80047e6:	4824      	ldr	r0, [pc, #144]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047e8:	f7ff f8f2 	bl	80039d0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <dyn1_execute.lto_priv.129+0xec>)
 80047ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 80047f2:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 80047f4:	1eea      	subs	r2, r5, #3
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	481f      	ldr	r0, [pc, #124]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 80047fa:	4b21      	ldr	r3, [pc, #132]	; (8004880 <dyn1_execute.lto_priv.129+0xe0>)
 80047fc:	f7fb ffc0 	bl	8000780 <chThdCreateFromHeap>
 8004800:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8004802:	4630      	mov	r0, r6
 8004804:	f7ff f89c 	bl	8003940 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	b121      	cbz	r1, 8004816 <dyn1_execute.lto_priv.129+0x76>
 800480c:	6861      	ldr	r1, [r4, #4]
 800480e:	b111      	cbz	r1, 8004816 <dyn1_execute.lto_priv.129+0x76>
 8004810:	68a1      	ldr	r1, [r4, #8]
 8004812:	b331      	cbz	r1, 8004862 <dyn1_execute.lto_priv.129+0xc2>
 8004814:	2100      	movs	r1, #0
 8004816:	2001      	movs	r0, #1
 8004818:	f7fe fd6a 	bl	80032f0 <_test_assert>
 800481c:	b108      	cbz	r0, 8004822 <dyn1_execute.lto_priv.129+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 800481e:	b004      	add	sp, #16
 8004820:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8004822:	f7fe fce5 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8004826:	2002      	movs	r0, #2
 8004828:	4919      	ldr	r1, [pc, #100]	; (8004890 <dyn1_execute.lto_priv.129+0xf0>)
 800482a:	f7fe fd39 	bl	80032a0 <_test_assert_sequence>
 800482e:	2800      	cmp	r0, #0
 8004830:	d1f5      	bne.n	800481e <dyn1_execute.lto_priv.129+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8004832:	a902      	add	r1, sp, #8
 8004834:	4810      	ldr	r0, [pc, #64]	; (8004878 <dyn1_execute.lto_priv.129+0xd8>)
 8004836:	f7ff f85b 	bl	80038f0 <chHeapStatus>
 800483a:	f1a0 0101 	sub.w	r1, r0, #1
 800483e:	fab1 f181 	clz	r1, r1
 8004842:	2003      	movs	r0, #3
 8004844:	0949      	lsrs	r1, r1, #5
 8004846:	f7fe fd53 	bl	80032f0 <_test_assert>
 800484a:	2800      	cmp	r0, #0
 800484c:	d1e7      	bne.n	800481e <dyn1_execute.lto_priv.129+0x7e>
  test_assert(4, n == sz, "heap size changed");
 800484e:	9902      	ldr	r1, [sp, #8]
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	2004      	movs	r0, #4
 8004854:	1ac9      	subs	r1, r1, r3
 8004856:	fab1 f181 	clz	r1, r1
 800485a:	0949      	lsrs	r1, r1, #5
 800485c:	f7fe fd48 	bl	80032f0 <_test_assert>
 8004860:	e7dd      	b.n	800481e <dyn1_execute.lto_priv.129+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1d6      	bne.n	8004816 <dyn1_execute.lto_priv.129+0x76>
 8004868:	6921      	ldr	r1, [r4, #16]
 800486a:	fab1 f181 	clz	r1, r1
 800486e:	0949      	lsrs	r1, r1, #5
 8004870:	e7d1      	b.n	8004816 <dyn1_execute.lto_priv.129+0x76>
 8004872:	bf00      	nop
 8004874:	20002e30 	.word	0x20002e30
 8004878:	20000f08 	.word	0x20000f08
 800487c:	08007144 	.word	0x08007144
 8004880:	08003f41 	.word	0x08003f41
 8004884:	20000ec0 	.word	0x20000ec0
 8004888:	08007140 	.word	0x08007140
 800488c:	080084b0 	.word	0x080084b0
 8004890:	08007da8 	.word	0x08007da8
	...

080048a0 <mbox1_setup.lto_priv.116>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 80048a0:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <mbox1_setup.lto_priv.116+0x30>)
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <mbox1_setup.lto_priv.116+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80048a6:	2505      	movs	r5, #5
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 80048a8:	f102 0614 	add.w	r6, r2, #20
 80048ac:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80048ae:	f103 001c 	add.w	r0, r3, #28
 80048b2:	f103 0110 	add.w	r1, r3, #16
 80048b6:	605e      	str	r6, [r3, #4]
 80048b8:	625d      	str	r5, [r3, #36]	; 0x24
 80048ba:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80048bc:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 80048be:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 80048c4:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80048c6:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80048c8:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 80048ca:	bc70      	pop	{r4, r5, r6}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	200009e4 	.word	0x200009e4
 80048d4:	20002fa8 	.word	0x20002fa8
	...

080048e0 <mtx8_setup.lto_priv.113>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <mtx8_setup.lto_priv.113+0x1c>)
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <mtx8_setup.lto_priv.113+0x20>)
 80048e4:	4907      	ldr	r1, [pc, #28]	; (8004904 <mtx8_setup.lto_priv.113+0x24>)
 80048e6:	2000      	movs	r0, #0
 80048e8:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 80048ea:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80048ec:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80048ee:	6052      	str	r2, [r2, #4]
 80048f0:	6090      	str	r0, [r2, #8]
 80048f2:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80048f4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80048f6:	605b      	str	r3, [r3, #4]
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000964 	.word	0x20000964
 8004900:	20000954 	.word	0x20000954
 8004904:	20000a0c 	.word	0x20000a0c
	...

08004910 <mtx7_setup.lto_priv.111>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <mtx7_setup.lto_priv.111+0x14>)
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <mtx7_setup.lto_priv.111+0x18>)
 8004914:	2100      	movs	r1, #0
 8004916:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004918:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800491a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800491c:	605b      	str	r3, [r3, #4]
 800491e:	6099      	str	r1, [r3, #8]
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000964 	.word	0x20000964
 8004928:	20000a0c 	.word	0x20000a0c
 800492c:	00000000 	.word	0x00000000

08004930 <mtx6_setup.lto_priv.109>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <mtx6_setup.lto_priv.109+0x14>)
 8004932:	4a05      	ldr	r2, [pc, #20]	; (8004948 <mtx6_setup.lto_priv.109+0x18>)
 8004934:	2100      	movs	r1, #0
 8004936:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004938:	6052      	str	r2, [r2, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800493a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800493c:	605b      	str	r3, [r3, #4]
 800493e:	6099      	str	r1, [r3, #8]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000964 	.word	0x20000964
 8004948:	20000a0c 	.word	0x20000a0c
 800494c:	00000000 	.word	0x00000000

08004950 <mbox1_execute.lto_priv.117>:

static void mbox1_execute(void) {
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	2320      	movs	r3, #32
 8004956:	b082      	sub	sp, #8
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	4e99      	ldr	r6, [pc, #612]	; (8004bc4 <mbox1_execute.lto_priv.117+0x274>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800495e:	2001      	movs	r0, #1
 8004960:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004962:	f1a1 0105 	sub.w	r1, r1, #5
 8004966:	fab1 f181 	clz	r1, r1
 800496a:	0949      	lsrs	r1, r1, #5
 800496c:	f7fe fcc0 	bl	80032f0 <_test_assert>
 8004970:	2800      	cmp	r0, #0
 8004972:	f040 808b 	bne.w	8004a8c <mbox1_execute.lto_priv.117+0x13c>
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800497c:	4d91      	ldr	r5, [pc, #580]	; (8004bc4 <mbox1_execute.lto_priv.117+0x274>)
 800497e:	4621      	mov	r1, r4
 8004980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004984:	4628      	mov	r0, r5
 8004986:	f7fc faeb 	bl	8000f60 <chMBPost>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 800498a:	fab0 f180 	clz	r1, r0
 800498e:	2002      	movs	r0, #2
 8004990:	0949      	lsrs	r1, r1, #5
 8004992:	f7fe fcad 	bl	80032f0 <_test_assert>
 8004996:	3401      	adds	r4, #1
 8004998:	b970      	cbnz	r0, 80049b8 <mbox1_execute.lto_priv.117+0x68>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 800499a:	2c46      	cmp	r4, #70	; 0x46
 800499c:	d1ee      	bne.n	800497c <mbox1_execute.lto_priv.117+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800499e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049a2:	2041      	movs	r0, #65	; 0x41
 80049a4:	f002 f94c 	bl	8006c40 <chMBPostAhead.constprop.20>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 80049a8:	fab0 f180 	clz	r1, r0
 80049ac:	2003      	movs	r0, #3
 80049ae:	0949      	lsrs	r1, r1, #5
 80049b0:	f7fe fc9e 	bl	80032f0 <_test_assert>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d06f      	beq.n	8004a98 <mbox1_execute.lto_priv.117+0x148>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 80049b8:	b002      	add	sp, #8
 80049ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049be:	f385 8811 	msr	BASEPRI, r5
 80049c2:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 80049c6:	69a1      	ldr	r1, [r4, #24]
 80049c8:	202a      	movs	r0, #42	; 0x2a
 80049ca:	fab1 f181 	clz	r1, r1
 80049ce:	0949      	lsrs	r1, r1, #5
 80049d0:	f7fe fc8e 	bl	80032f0 <_test_assert>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f040 82a2 	bne.w	8004f1e <mbox1_execute.lto_priv.117+0x5ce>
 80049da:	f385 8811 	msr	BASEPRI, r5
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80049de:	68e1      	ldr	r1, [r4, #12]
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	202b      	movs	r0, #43	; 0x2b
 80049e4:	ebc3 0e01 	rsb	lr, r3, r1
 80049e8:	f1de 0100 	rsbs	r1, lr, #0
 80049ec:	eb41 010e 	adc.w	r1, r1, lr
 80049f0:	f7fe fc7e 	bl	80032f0 <_test_assert>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1df      	bne.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 80049f8:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 80049fc:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 80049fe:	6862      	ldr	r2, [r4, #4]
 8004a00:	f104 001c 	add.w	r0, r4, #28
 8004a04:	1ad1      	subs	r1, r2, r3
 8004a06:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8004a08:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
 8004a0a:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8004a0c:	f7fc f978 	bl	8000d00 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8004a10:	f104 0010 	add.w	r0, r4, #16
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fc f973 	bl	8000d00 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8004a1a:	f7fb fe39 	bl	8000690 <chSchRescheduleS>
 8004a1e:	f385 8811 	msr	BASEPRI, r5
 8004a22:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004a26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a28:	202c      	movs	r0, #44	; 0x2c
 8004a2a:	1f4e      	subs	r6, r1, #5
 8004a2c:	4271      	negs	r1, r6
 8004a2e:	4171      	adcs	r1, r6
 8004a30:	f7fe fc5e 	bl	80032f0 <_test_assert>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f040 8272 	bne.w	8004f1e <mbox1_execute.lto_priv.117+0x5ce>
 8004a3a:	f385 8811 	msr	BASEPRI, r5
 8004a3e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004a42:	69a1      	ldr	r1, [r4, #24]
 8004a44:	202d      	movs	r0, #45	; 0x2d
 8004a46:	fab1 f181 	clz	r1, r1
 8004a4a:	0949      	lsrs	r1, r1, #5
 8004a4c:	f7fe fc50 	bl	80032f0 <_test_assert>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	f040 8264 	bne.w	8004f1e <mbox1_execute.lto_priv.117+0x5ce>
 8004a56:	f385 8811 	msr	BASEPRI, r5
 8004a5a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004a5e:	6821      	ldr	r1, [r4, #0]
 8004a60:	68a3      	ldr	r3, [r4, #8]
 8004a62:	202e      	movs	r0, #46	; 0x2e
 8004a64:	1aca      	subs	r2, r1, r3
 8004a66:	4251      	negs	r1, r2
 8004a68:	4151      	adcs	r1, r2
 8004a6a:	f7fe fc41 	bl	80032f0 <_test_assert>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f040 8255 	bne.w	8004f1e <mbox1_execute.lto_priv.117+0x5ce>
 8004a74:	f385 8811 	msr	BASEPRI, r5
 8004a78:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8004a7c:	6821      	ldr	r1, [r4, #0]
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	202f      	movs	r0, #47	; 0x2f
 8004a82:	1acb      	subs	r3, r1, r3
 8004a84:	4259      	negs	r1, r3
 8004a86:	4159      	adcs	r1, r3
 8004a88:	f7fe fc32 	bl	80032f0 <_test_assert>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f383 8811 	msr	BASEPRI, r3
}
 8004a92:	b002      	add	sp, #8
 8004a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8004a98:	2158      	movs	r1, #88	; 0x58
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7fc fa5f 	bl	8000f60 <chMBPost>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004aa2:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004aa6:	fab1 f181 	clz	r1, r1
 8004aaa:	2004      	movs	r0, #4
 8004aac:	0949      	lsrs	r1, r1, #5
 8004aae:	f7fe fc1f 	bl	80032f0 <_test_assert>
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f47f af7f 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004aba:	2720      	movs	r7, #32
 8004abc:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8004ac0:	2058      	movs	r0, #88	; 0x58
 8004ac2:	f002 f89d 	bl	8006c00 <chMBPostI.constprop.21>
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004acc:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8004ad0:	fab1 f181 	clz	r1, r1
 8004ad4:	2005      	movs	r0, #5
 8004ad6:	0949      	lsrs	r1, r1, #5
 8004ad8:	f7fe fc0a 	bl	80032f0 <_test_assert>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f47f af6b 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2058      	movs	r0, #88	; 0x58
 8004ae6:	f002 f8ab 	bl	8006c40 <chMBPostAhead.constprop.20>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004aea:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004aee:	fab1 f181 	clz	r1, r1
 8004af2:	2006      	movs	r0, #6
 8004af4:	0949      	lsrs	r1, r1, #5
 8004af6:	f7fe fbfb 	bl	80032f0 <_test_assert>
 8004afa:	4604      	mov	r4, r0
 8004afc:	2800      	cmp	r0, #0
 8004afe:	f47f af5b 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004b02:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8004b06:	2058      	movs	r0, #88	; 0x58
 8004b08:	f002 f8c2 	bl	8006c90 <chMBPostAheadI.constprop.19>
 8004b0c:	4601      	mov	r1, r0
 8004b0e:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004b12:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8004b16:	fab1 f181 	clz	r1, r1
 8004b1a:	2007      	movs	r0, #7
 8004b1c:	0949      	lsrs	r1, r1, #5
 8004b1e:	f7fe fbe7 	bl	80032f0 <_test_assert>
 8004b22:	4680      	mov	r8, r0
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f47f af47 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004b2a:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004b2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004b30:	2008      	movs	r0, #8
 8004b32:	fab1 f181 	clz	r1, r1
 8004b36:	0949      	lsrs	r1, r1, #5
 8004b38:	f7fe fbda 	bl	80032f0 <_test_assert>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	b110      	cbz	r0, 8004b46 <mbox1_execute.lto_priv.117+0x1f6>
 8004b40:	f388 8811 	msr	BASEPRI, r8
 8004b44:	e738      	b.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004b4e:	69a9      	ldr	r1, [r5, #24]
 8004b50:	2009      	movs	r0, #9
 8004b52:	f1a1 0c05 	sub.w	ip, r1, #5
 8004b56:	f1dc 0100 	rsbs	r1, ip, #0
 8004b5a:	eb41 010c 	adc.w	r1, r1, ip
 8004b5e:	f7fe fbc7 	bl	80032f0 <_test_assert>
 8004b62:	b110      	cbz	r0, 8004b6a <mbox1_execute.lto_priv.117+0x21a>
 8004b64:	f384 8811 	msr	BASEPRI, r4
 8004b68:	e726      	b.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004b6a:	f380 8811 	msr	BASEPRI, r0
 8004b6e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004b72:	68e9      	ldr	r1, [r5, #12]
 8004b74:	68ab      	ldr	r3, [r5, #8]
 8004b76:	200a      	movs	r0, #10
 8004b78:	ebc3 0e01 	rsb	lr, r3, r1
 8004b7c:	f1de 0100 	rsbs	r1, lr, #0
 8004b80:	eb41 010e 	adc.w	r1, r1, lr
 8004b84:	f7fe fbb4 	bl	80032f0 <_test_assert>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f47f af7f 	bne.w	8004a8e <mbox1_execute.lto_priv.117+0x13e>
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	2505      	movs	r5, #5
 8004b96:	e005      	b.n	8004ba4 <mbox1_execute.lto_priv.117+0x254>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8004b98:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004b9c:	f7fe fbc0 	bl	8003320 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8004ba0:	3d01      	subs	r5, #1
 8004ba2:	d011      	beq.n	8004bc8 <mbox1_execute.lto_priv.117+0x278>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004ba4:	4c07      	ldr	r4, [pc, #28]	; (8004bc4 <mbox1_execute.lto_priv.117+0x274>)
 8004ba6:	a901      	add	r1, sp, #4
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bae:	f7fc f9af 	bl	8000f10 <chMBFetch>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8004bb2:	fab0 f180 	clz	r1, r0
 8004bb6:	200b      	movs	r0, #11
 8004bb8:	0949      	lsrs	r1, r1, #5
 8004bba:	f7fe fb99 	bl	80032f0 <_test_assert>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0ea      	beq.n	8004b98 <mbox1_execute.lto_priv.117+0x248>
 8004bc2:	e6f9      	b.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004bc4:	200009e4 	.word	0x200009e4
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8004bc8:	200c      	movs	r0, #12
 8004bca:	49d6      	ldr	r1, [pc, #856]	; (8004f24 <mbox1_execute.lto_priv.117+0x5d4>)
 8004bcc:	f7fe fb68 	bl	80032a0 <_test_assert_sequence>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f47f aef1 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8004bd6:	2147      	movs	r1, #71	; 0x47
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bde:	f7fc f9bf 	bl	8000f60 <chMBPost>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8004be2:	fab0 f180 	clz	r1, r0
 8004be6:	200d      	movs	r0, #13
 8004be8:	0949      	lsrs	r1, r1, #5
 8004bea:	f7fe fb81 	bl	80032f0 <_test_assert>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f47f aee2 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004bf4:	a901      	add	r1, sp, #4
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bfc:	f7fc f988 	bl	8000f10 <chMBFetch>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8004c00:	fab0 f180 	clz	r1, r0
 8004c04:	200e      	movs	r0, #14
 8004c06:	0949      	lsrs	r1, r1, #5
 8004c08:	f7fe fb72 	bl	80032f0 <_test_assert>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	f47f aed3 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004c12:	6821      	ldr	r1, [r4, #0]
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	200f      	movs	r0, #15
 8004c18:	1acf      	subs	r7, r1, r3
 8004c1a:	4279      	negs	r1, r7
 8004c1c:	4179      	adcs	r1, r7
 8004c1e:	f7fe fb67 	bl	80032f0 <_test_assert>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f47f aec8 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8004c28:	6821      	ldr	r1, [r4, #0]
 8004c2a:	68e3      	ldr	r3, [r4, #12]
 8004c2c:	2010      	movs	r0, #16
 8004c2e:	1aca      	subs	r2, r1, r3
 8004c30:	4251      	negs	r1, r2
 8004c32:	4151      	adcs	r1, r2
 8004c34:	f7fe fb5c 	bl	80032f0 <_test_assert>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f47f aebd 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8004c3e:	a901      	add	r1, sp, #4
 8004c40:	4620      	mov	r0, r4
 8004c42:	2201      	movs	r2, #1
 8004c44:	f7fc f964 	bl	8000f10 <chMBFetch>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	4259      	negs	r1, r3
 8004c4c:	4159      	adcs	r1, r3
 8004c4e:	2011      	movs	r0, #17
 8004c50:	f7fe fb4e 	bl	80032f0 <_test_assert>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	f47f aeaf 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004c5a:	2720      	movs	r7, #32
 8004c5c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8004c60:	a801      	add	r0, sp, #4
 8004c62:	f002 f835 	bl	8006cd0 <chMBFetchI.constprop.18>
 8004c66:	4601      	mov	r1, r0
 8004c68:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004c6c:	f101 0801 	add.w	r8, r1, #1
 8004c70:	f1d8 0100 	rsbs	r1, r8, #0
 8004c74:	eb41 0108 	adc.w	r1, r1, r8
 8004c78:	2012      	movs	r0, #18
 8004c7a:	f7fe fb39 	bl	80032f0 <_test_assert>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	f47f ae9a 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004c84:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004c88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c8a:	2013      	movs	r0, #19
 8004c8c:	f1a1 0c05 	sub.w	ip, r1, #5
 8004c90:	f1dc 0100 	rsbs	r1, ip, #0
 8004c94:	eb41 010c 	adc.w	r1, r1, ip
 8004c98:	f7fe fb2a 	bl	80032f0 <_test_assert>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f47f aef5 	bne.w	8004a8c <mbox1_execute.lto_priv.117+0x13c>
 8004ca2:	f04f 0800 	mov.w	r8, #0
 8004ca6:	f388 8811 	msr	BASEPRI, r8
 8004caa:	2420      	movs	r4, #32
 8004cac:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004cb0:	69b1      	ldr	r1, [r6, #24]
 8004cb2:	2014      	movs	r0, #20
 8004cb4:	fab1 f181 	clz	r1, r1
 8004cb8:	0949      	lsrs	r1, r1, #5
 8004cba:	f7fe fb19 	bl	80032f0 <_test_assert>
 8004cbe:	4d9a      	ldr	r5, [pc, #616]	; (8004f28 <mbox1_execute.lto_priv.117+0x5d8>)
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	f47f af3c 	bne.w	8004b40 <mbox1_execute.lto_priv.117+0x1f0>
 8004cc8:	f380 8811 	msr	BASEPRI, r0
 8004ccc:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004cd0:	68e9      	ldr	r1, [r5, #12]
 8004cd2:	68ab      	ldr	r3, [r5, #8]
 8004cd4:	2015      	movs	r0, #21
 8004cd6:	ebc3 0e01 	rsb	lr, r3, r1
 8004cda:	f1de 0100 	rsbs	r1, lr, #0
 8004cde:	eb41 010e 	adc.w	r1, r1, lr
 8004ce2:	f7fe fb05 	bl	80032f0 <_test_assert>
 8004ce6:	b110      	cbz	r0, 8004cee <mbox1_execute.lto_priv.117+0x39e>
 8004ce8:	f387 8811 	msr	BASEPRI, r7
 8004cec:	e664      	b.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004cee:	f380 8811 	msr	BASEPRI, r0
 8004cf2:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8004cf6:	2041      	movs	r0, #65	; 0x41
 8004cf8:	f001 ff82 	bl	8006c00 <chMBPostI.constprop.21>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8004cfc:	fab0 f180 	clz	r1, r0
 8004d00:	2016      	movs	r0, #22
 8004d02:	0949      	lsrs	r1, r1, #5
 8004d04:	f7fe faf4 	bl	80032f0 <_test_assert>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f47f ae55 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostI(&mb1, 'B');
 8004d0e:	2042      	movs	r0, #66	; 0x42
 8004d10:	f001 ff76 	bl	8006c00 <chMBPostI.constprop.21>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8004d14:	fab0 f180 	clz	r1, r0
 8004d18:	2017      	movs	r0, #23
 8004d1a:	0949      	lsrs	r1, r1, #5
 8004d1c:	f7fe fae8 	bl	80032f0 <_test_assert>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f47f ae49 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostI(&mb1, 'C');
 8004d26:	2043      	movs	r0, #67	; 0x43
 8004d28:	f001 ff6a 	bl	8006c00 <chMBPostI.constprop.21>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8004d2c:	fab0 f180 	clz	r1, r0
 8004d30:	2018      	movs	r0, #24
 8004d32:	0949      	lsrs	r1, r1, #5
 8004d34:	f7fe fadc 	bl	80032f0 <_test_assert>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	f47f ae3d 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostI(&mb1, 'D');
 8004d3e:	2044      	movs	r0, #68	; 0x44
 8004d40:	f001 ff5e 	bl	8006c00 <chMBPostI.constprop.21>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8004d44:	fab0 f180 	clz	r1, r0
 8004d48:	2019      	movs	r0, #25
 8004d4a:	0949      	lsrs	r1, r1, #5
 8004d4c:	f7fe fad0 	bl	80032f0 <_test_assert>
 8004d50:	4607      	mov	r7, r0
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f47f ae30 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostI(&mb1, 'E');
 8004d58:	2045      	movs	r0, #69	; 0x45
 8004d5a:	f001 ff51 	bl	8006c00 <chMBPostI.constprop.21>
 8004d5e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8004d62:	fab0 f180 	clz	r1, r0
 8004d66:	201a      	movs	r0, #26
 8004d68:	0949      	lsrs	r1, r1, #5
 8004d6a:	f7fe fac1 	bl	80032f0 <_test_assert>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f47f ae22 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004d74:	68e9      	ldr	r1, [r5, #12]
 8004d76:	68ab      	ldr	r3, [r5, #8]
 8004d78:	201b      	movs	r0, #27
 8004d7a:	1acd      	subs	r5, r1, r3
 8004d7c:	4269      	negs	r1, r5
 8004d7e:	4169      	adcs	r1, r5
 8004d80:	f7fe fab6 	bl	80032f0 <_test_assert>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f47f ae17 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004d8a:	4680      	mov	r8, r0
 8004d8c:	4625      	mov	r5, r4
 8004d8e:	2405      	movs	r4, #5
 8004d90:	2720      	movs	r7, #32
 8004d92:	f385 8811 	msr	BASEPRI, r5
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004d96:	a801      	add	r0, sp, #4
 8004d98:	f001 ff9a 	bl	8006cd0 <chMBFetchI.constprop.18>
 8004d9c:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8004da0:	fab0 f180 	clz	r1, r0
 8004da4:	201c      	movs	r0, #28
 8004da6:	0949      	lsrs	r1, r1, #5
 8004da8:	f7fe faa2 	bl	80032f0 <_test_assert>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f47f ae03 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
    test_emit_token(msg2);
 8004db2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004db6:	f7fe fab3 	bl	8003320 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004dba:	3c01      	subs	r4, #1
 8004dbc:	d1e8      	bne.n	8004d90 <mbox1_execute.lto_priv.117+0x440>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8004dbe:	201d      	movs	r0, #29
 8004dc0:	4958      	ldr	r1, [pc, #352]	; (8004f24 <mbox1_execute.lto_priv.117+0x5d4>)
 8004dc2:	f7fe fa6d 	bl	80032a0 <_test_assert_sequence>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f47f adf6 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004dcc:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004dd0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004dd2:	201e      	movs	r0, #30
 8004dd4:	1f4a      	subs	r2, r1, #5
 8004dd6:	4251      	negs	r1, r2
 8004dd8:	4151      	adcs	r1, r2
 8004dda:	4d53      	ldr	r5, [pc, #332]	; (8004f28 <mbox1_execute.lto_priv.117+0x5d8>)
 8004ddc:	f7fe fa88 	bl	80032f0 <_test_assert>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f47f aebf 	bne.w	8004b64 <mbox1_execute.lto_priv.117+0x214>
 8004de6:	f384 8811 	msr	BASEPRI, r4
 8004dea:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004dee:	69a9      	ldr	r1, [r5, #24]
 8004df0:	201f      	movs	r0, #31
 8004df2:	fab1 f181 	clz	r1, r1
 8004df6:	0949      	lsrs	r1, r1, #5
 8004df8:	f7fe fa7a 	bl	80032f0 <_test_assert>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	f47f aeb1 	bne.w	8004b64 <mbox1_execute.lto_priv.117+0x214>
 8004e02:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004e06:	68e9      	ldr	r1, [r5, #12]
 8004e08:	68ab      	ldr	r3, [r5, #8]
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	1acb      	subs	r3, r1, r3
 8004e0e:	4259      	negs	r1, r3
 8004e10:	4159      	adcs	r1, r3
 8004e12:	f7fe fa6d 	bl	80032f0 <_test_assert>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f47f adce 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004e1c:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8004e20:	2045      	movs	r0, #69	; 0x45
 8004e22:	f001 ff35 	bl	8006c90 <chMBPostAheadI.constprop.19>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8004e26:	fab0 f180 	clz	r1, r0
 8004e2a:	2021      	movs	r0, #33	; 0x21
 8004e2c:	0949      	lsrs	r1, r1, #5
 8004e2e:	f7fe fa5f 	bl	80032f0 <_test_assert>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f47f adc0 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8004e38:	2044      	movs	r0, #68	; 0x44
 8004e3a:	f001 ff29 	bl	8006c90 <chMBPostAheadI.constprop.19>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8004e3e:	fab0 f180 	clz	r1, r0
 8004e42:	2022      	movs	r0, #34	; 0x22
 8004e44:	0949      	lsrs	r1, r1, #5
 8004e46:	f7fe fa53 	bl	80032f0 <_test_assert>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f47f adb4 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8004e50:	2043      	movs	r0, #67	; 0x43
 8004e52:	f001 ff1d 	bl	8006c90 <chMBPostAheadI.constprop.19>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8004e56:	fab0 f180 	clz	r1, r0
 8004e5a:	2023      	movs	r0, #35	; 0x23
 8004e5c:	0949      	lsrs	r1, r1, #5
 8004e5e:	f7fe fa47 	bl	80032f0 <_test_assert>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	f47f ada8 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8004e68:	2042      	movs	r0, #66	; 0x42
 8004e6a:	f001 ff11 	bl	8006c90 <chMBPostAheadI.constprop.19>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8004e6e:	fab0 f180 	clz	r1, r0
 8004e72:	2024      	movs	r0, #36	; 0x24
 8004e74:	0949      	lsrs	r1, r1, #5
 8004e76:	f7fe fa3b 	bl	80032f0 <_test_assert>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f47f ad9c 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8004e80:	2041      	movs	r0, #65	; 0x41
 8004e82:	f001 ff05 	bl	8006c90 <chMBPostAheadI.constprop.19>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8004e8c:	fab0 f180 	clz	r1, r0
 8004e90:	2025      	movs	r0, #37	; 0x25
 8004e92:	0949      	lsrs	r1, r1, #5
 8004e94:	f7fe fa2c 	bl	80032f0 <_test_assert>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f47f ad8d 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004e9e:	68f1      	ldr	r1, [r6, #12]
 8004ea0:	68b3      	ldr	r3, [r6, #8]
 8004ea2:	2026      	movs	r0, #38	; 0x26
 8004ea4:	ebc3 0801 	rsb	r8, r3, r1
 8004ea8:	f1d8 0100 	rsbs	r1, r8, #0
 8004eac:	eb41 0108 	adc.w	r1, r1, r8
 8004eb0:	f7fe fa1e 	bl	80032f0 <_test_assert>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f47f ad7f 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	2505      	movs	r5, #5
 8004ebe:	f04f 0820 	mov.w	r8, #32
 8004ec2:	2720      	movs	r7, #32
 8004ec4:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004ec8:	a801      	add	r0, sp, #4
 8004eca:	f001 ff01 	bl	8006cd0 <chMBFetchI.constprop.18>
 8004ece:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8004ed2:	fab0 f180 	clz	r1, r0
 8004ed6:	2027      	movs	r0, #39	; 0x27
 8004ed8:	0949      	lsrs	r1, r1, #5
 8004eda:	f7fe fa09 	bl	80032f0 <_test_assert>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f47f ad6a 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
    test_emit_token(msg2);
 8004ee4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004ee8:	f7fe fa1a 	bl	8003320 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004eec:	3d01      	subs	r5, #1
 8004eee:	d1e8      	bne.n	8004ec2 <mbox1_execute.lto_priv.117+0x572>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8004ef0:	2028      	movs	r0, #40	; 0x28
 8004ef2:	490c      	ldr	r1, [pc, #48]	; (8004f24 <mbox1_execute.lto_priv.117+0x5d4>)
 8004ef4:	f7fe f9d4 	bl	80032a0 <_test_assert_sequence>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f47f ad5d 	bne.w	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004efe:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004f02:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004f04:	2029      	movs	r0, #41	; 0x29
 8004f06:	f1a1 0c05 	sub.w	ip, r1, #5
 8004f0a:	f1dc 0100 	rsbs	r1, ip, #0
 8004f0e:	eb41 010c 	adc.w	r1, r1, ip
 8004f12:	4c05      	ldr	r4, [pc, #20]	; (8004f28 <mbox1_execute.lto_priv.117+0x5d8>)
 8004f14:	f7fe f9ec 	bl	80032f0 <_test_assert>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f43f ad50 	beq.w	80049be <mbox1_execute.lto_priv.117+0x6e>
 8004f1e:	f385 8811 	msr	BASEPRI, r5
 8004f22:	e549      	b.n	80049b8 <mbox1_execute.lto_priv.117+0x68>
 8004f24:	08007148 	.word	0x08007148
 8004f28:	200009e4 	.word	0x200009e4
 8004f2c:	00000000 	.word	0x00000000

08004f30 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8004f34:	2141      	movs	r1, #65	; 0x41
 8004f36:	f7fb fd73 	bl	8000a20 <chMsgSend>
  chMsgSend(p, 'B');
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	2142      	movs	r1, #66	; 0x42
 8004f3e:	f7fb fd6f 	bl	8000a20 <chMsgSend>
  chMsgSend(p, 'C');
 8004f42:	4620      	mov	r0, r4
}
 8004f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 8004f48:	2143      	movs	r1, #67	; 0x43
 8004f4a:	f7fb bd69 	b.w	8000a20 <chMsgSend>
 8004f4e:	bf00      	nop

08004f50 <msg1_execute.lto_priv.115>:
}

static void msg1_execute(void) {
 8004f50:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <msg1_execute.lto_priv.115+0x80>)
 8004f54:	b082      	sub	sp, #8
 8004f56:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8004f58:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f5c:	68a2      	ldr	r2, [r4, #8]
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <msg1_execute.lto_priv.115+0x84>)
 8004f60:	3201      	adds	r2, #1
 8004f62:	9400      	str	r4, [sp, #0]
 8004f64:	481c      	ldr	r0, [pc, #112]	; (8004fd8 <msg1_execute.lto_priv.115+0x88>)
 8004f66:	f7fb fc53 	bl	8000810 <chThdCreateStatic>
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <msg1_execute.lto_priv.115+0x8c>)
 8004f6c:	2520      	movs	r5, #32
 8004f6e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8004f70:	f7fb fca6 	bl	80008c0 <chMsgWait>
 8004f74:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004f76:	f385 8811 	msr	BASEPRI, r5
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	f7fb fbb0 	bl	80006e0 <chSchWakeupS>
 8004f80:	2400      	movs	r4, #0
 8004f82:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004f86:	b2f0      	uxtb	r0, r6
 8004f88:	f7fe f9ca 	bl	8003320 <test_emit_token>
  tp = chMsgWait();
 8004f8c:	f7fb fc98 	bl	80008c0 <chMsgWait>
 8004f90:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004f92:	f385 8811 	msr	BASEPRI, r5
 8004f96:	4631      	mov	r1, r6
 8004f98:	f7fb fba2 	bl	80006e0 <chSchWakeupS>
 8004f9c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004fa0:	b2f0      	uxtb	r0, r6
 8004fa2:	f7fe f9bd 	bl	8003320 <test_emit_token>
  tp = chMsgWait();
 8004fa6:	f7fb fc8b 	bl	80008c0 <chMsgWait>
 8004faa:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004fac:	f385 8811 	msr	BASEPRI, r5
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	f7fb fb95 	bl	80006e0 <chSchWakeupS>
 8004fb6:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004fba:	b2f0      	uxtb	r0, r6
 8004fbc:	f7fe f9b0 	bl	8003320 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <msg1_execute.lto_priv.115+0x90>)
 8004fc2:	2001      	movs	r0, #1
}
 8004fc4:	b002      	add	sp, #8
 8004fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8004fca:	f7fe b969 	b.w	80032a0 <_test_assert_sequence>
 8004fce:	bf00      	nop
 8004fd0:	20002e30 	.word	0x20002e30
 8004fd4:	08004f31 	.word	0x08004f31
 8004fd8:	20002fa8 	.word	0x20002fa8
 8004fdc:	20000ec0 	.word	0x20000ec0
 8004fe0:	08007db0 	.word	0x08007db0
	...

08004ff0 <mtx8_execute.lto_priv.114>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4b19      	ldr	r3, [pc, #100]	; (8005058 <mtx8_execute.lto_priv.114+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004ff4:	4d19      	ldr	r5, [pc, #100]	; (800505c <mtx8_execute.lto_priv.114+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <mtx8_execute.lto_priv.114+0x70>)
 8004ffa:	6896      	ldr	r6, [r2, #8]
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8004ffc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004ffe:	1c72      	adds	r2, r6, #1
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4628      	mov	r0, r5
 8005004:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005008:	4b16      	ldr	r3, [pc, #88]	; (8005064 <mtx8_execute.lto_priv.114+0x74>)
 800500a:	f7fb fc01 	bl	8000810 <chThdCreateStatic>
 800500e:	4c16      	ldr	r4, [pc, #88]	; (8005068 <mtx8_execute.lto_priv.114+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <mtx8_execute.lto_priv.114+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005012:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005014:	1cb2      	adds	r2, r6, #2
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800501c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <mtx8_execute.lto_priv.114+0x80>)
 8005022:	f7fb fbf5 	bl	8000810 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <mtx8_execute.lto_priv.114+0x84>)
 8005028:	1cf2      	adds	r2, r6, #3
 800502a:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 800502e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <mtx8_execute.lto_priv.114+0x88>)
 8005038:	f7fb fbea 	bl	8000810 <chThdCreateStatic>
 800503c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 800503e:	f001 fd5f 	bl	8006b00 <chCondSignal.constprop.44>
  chCondSignal(&c1);
 8005042:	f001 fd5d 	bl	8006b00 <chCondSignal.constprop.44>
  test_wait_threads();
 8005046:	f7fe f8d3 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800504a:	490c      	ldr	r1, [pc, #48]	; (800507c <mtx8_execute.lto_priv.114+0x8c>)
 800504c:	2001      	movs	r0, #1
}
 800504e:	b002      	add	sp, #8
 8005050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8005054:	f7fe b924 	b.w	80032a0 <_test_assert_sequence>
 8005058:	20002e30 	.word	0x20002e30
 800505c:	20002fa8 	.word	0x20002fa8
 8005060:	08007144 	.word	0x08007144
 8005064:	080050a1 	.word	0x080050a1
 8005068:	20000ec0 	.word	0x20000ec0
 800506c:	080084b0 	.word	0x080084b0
 8005070:	08005131 	.word	0x08005131
 8005074:	08007140 	.word	0x08007140
 8005078:	08005081 	.word	0x08005081
 800507c:	08007db0 	.word	0x08007db0

08005080 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005084:	4c05      	ldr	r4, [pc, #20]	; (800509c <thread12+0x1c>)
 8005086:	4620      	mov	r0, r4
 8005088:	f7fb fe12 	bl	8000cb0 <chMtxLock>
  test_emit_token(*(char *)p);
 800508c:	7828      	ldrb	r0, [r5, #0]
 800508e:	f7fe f947 	bl	8003320 <test_emit_token>
  chMtxUnlock(&m2);
 8005092:	4620      	mov	r0, r4
}
 8005094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8005098:	f7fb bd6a 	b.w	8000b70 <chMtxUnlock>
 800509c:	20000954 	.word	0x20000954

080050a0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	4607      	mov	r7, r0

  chMtxLock(&m2);
 80050a4:	481c      	ldr	r0, [pc, #112]	; (8005118 <thread11+0x78>)
 80050a6:	f7fb fe03 	bl	8000cb0 <chMtxLock>
  chMtxLock(&m1);
 80050aa:	481c      	ldr	r0, [pc, #112]	; (800511c <thread11+0x7c>)
 80050ac:	f7fb fe00 	bl	8000cb0 <chMtxLock>
 80050b0:	2320      	movs	r3, #32
 80050b2:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80050b6:	4d1a      	ldr	r5, [pc, #104]	; (8005120 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 80050b8:	69ab      	ldr	r3, [r5, #24]
 80050ba:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80050bc:	4630      	mov	r0, r6
 80050be:	f7fb fd2f 	bl	8000b20 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <thread11+0x84>)
 80050c4:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80050c6:	4610      	mov	r0, r2
 80050c8:	4613      	mov	r3, r2
 80050ca:	6222      	str	r2, [r4, #32]
 80050cc:	e003      	b.n	80050d6 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	68a2      	ldr	r2, [r4, #8]
 80050d2:	4291      	cmp	r1, r2
 80050d4:	d302      	bcc.n	80050dc <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80050d6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80050d8:	4283      	cmp	r3, r0
 80050da:	d1f8      	bne.n	80050ce <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80050dc:	685a      	ldr	r2, [r3, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80050de:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80050e0:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80050e2:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80050e4:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80050e6:	605c      	str	r4, [r3, #4]
 80050e8:	f7fb fbd2 	bl	8000890 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80050ec:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d002      	beq.n	80050fa <thread11+0x5a>
    chMtxLockS(mp);
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7fb fd73 	bl	8000be0 <chMtxLockS>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8005100:	7838      	ldrb	r0, [r7, #0]
 8005102:	f7fe f90d 	bl	8003320 <test_emit_token>
  chMtxUnlock(&m1);
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <thread11+0x7c>)
 8005108:	f7fb fd32 	bl	8000b70 <chMtxUnlock>
  chMtxUnlock(&m2);
}
 800510c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <thread11+0x78>)
 8005112:	f7fb bd2d 	b.w	8000b70 <chMtxUnlock>
 8005116:	bf00      	nop
 8005118:	20000954 	.word	0x20000954
 800511c:	20000964 	.word	0x20000964
 8005120:	20002e30 	.word	0x20002e30
 8005124:	20000a0c 	.word	0x20000a0c
	...

08005130 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8005134:	4816      	ldr	r0, [pc, #88]	; (8005190 <thread10+0x60>)
 8005136:	f7fb fdbb 	bl	8000cb0 <chMtxLock>
 800513a:	2320      	movs	r3, #32
 800513c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <thread10+0x64>)
 8005142:	699c      	ldr	r4, [r3, #24]
 8005144:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005146:	4628      	mov	r0, r5
 8005148:	f7fb fcea 	bl	8000b20 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 800514c:	4a12      	ldr	r2, [pc, #72]	; (8005198 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800514e:	4610      	mov	r0, r2
 8005150:	4613      	mov	r3, r2
 8005152:	6222      	str	r2, [r4, #32]
 8005154:	e003      	b.n	800515e <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005156:	6899      	ldr	r1, [r3, #8]
 8005158:	68a2      	ldr	r2, [r4, #8]
 800515a:	4291      	cmp	r1, r2
 800515c:	d302      	bcc.n	8005164 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800515e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005160:	4283      	cmp	r3, r0
 8005162:	d1f8      	bne.n	8005156 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005164:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8005166:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005168:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800516a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800516c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800516e:	605c      	str	r4, [r3, #4]
 8005170:	f7fb fb8e 	bl	8000890 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8005174:	4628      	mov	r0, r5
 8005176:	f7fb fd33 	bl	8000be0 <chMtxLockS>
 800517a:	2300      	movs	r3, #0
 800517c:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8005180:	7830      	ldrb	r0, [r6, #0]
 8005182:	f7fe f8cd 	bl	8003320 <test_emit_token>
  chMtxUnlock(&m1);
}
 8005186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 800518a:	4801      	ldr	r0, [pc, #4]	; (8005190 <thread10+0x60>)
 800518c:	f7fb bcf0 	b.w	8000b70 <chMtxUnlock>
 8005190:	20000964 	.word	0x20000964
 8005194:	20002e30 	.word	0x20002e30
 8005198:	20000a0c 	.word	0x20000a0c
 800519c:	00000000 	.word	0x00000000

080051a0 <mtx7_execute.lto_priv.112>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80051a0:	b530      	push	{r4, r5, lr}
 80051a2:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <mtx7_execute.lto_priv.112+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80051a4:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <mtx7_execute.lto_priv.112+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80051a6:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 80051a8:	b083      	sub	sp, #12
 80051aa:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80051ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051b0:	1c6a      	adds	r2, r5, #1
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4829      	ldr	r0, [pc, #164]	; (800525c <mtx7_execute.lto_priv.112+0xbc>)
 80051b6:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <mtx7_execute.lto_priv.112+0xc0>)
 80051b8:	f7fb fb2a 	bl	8000810 <chThdCreateStatic>
 80051bc:	4c29      	ldr	r4, [pc, #164]	; (8005264 <mtx7_execute.lto_priv.112+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80051be:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <mtx7_execute.lto_priv.112+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80051c0:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80051c2:	1caa      	adds	r2, r5, #2
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051ca:	4b25      	ldr	r3, [pc, #148]	; (8005260 <mtx7_execute.lto_priv.112+0xc0>)
 80051cc:	4827      	ldr	r0, [pc, #156]	; (800526c <mtx7_execute.lto_priv.112+0xcc>)
 80051ce:	f7fb fb1f 	bl	8000810 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80051d2:	4b27      	ldr	r3, [pc, #156]	; (8005270 <mtx7_execute.lto_priv.112+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80051d4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80051d6:	1cea      	adds	r2, r5, #3
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <mtx7_execute.lto_priv.112+0xc0>)
 80051e0:	4824      	ldr	r0, [pc, #144]	; (8005274 <mtx7_execute.lto_priv.112+0xd4>)
 80051e2:	f7fb fb15 	bl	8000810 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80051e6:	4b24      	ldr	r3, [pc, #144]	; (8005278 <mtx7_execute.lto_priv.112+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80051e8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80051ea:	1d2a      	adds	r2, r5, #4
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051f2:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <mtx7_execute.lto_priv.112+0xc0>)
 80051f4:	4821      	ldr	r0, [pc, #132]	; (800527c <mtx7_execute.lto_priv.112+0xdc>)
 80051f6:	f7fb fb0b 	bl	8000810 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80051fa:	4b21      	ldr	r3, [pc, #132]	; (8005280 <mtx7_execute.lto_priv.112+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80051fc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80051fe:	1d6a      	adds	r2, r5, #5
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005206:	4b16      	ldr	r3, [pc, #88]	; (8005260 <mtx7_execute.lto_priv.112+0xc0>)
 8005208:	481e      	ldr	r0, [pc, #120]	; (8005284 <mtx7_execute.lto_priv.112+0xe4>)
 800520a:	f7fb fb01 	bl	8000810 <chThdCreateStatic>
 800520e:	2320      	movs	r3, #32
 8005210:	6120      	str	r0, [r4, #16]
 8005212:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005216:	4c1c      	ldr	r4, [pc, #112]	; (8005288 <mtx7_execute.lto_priv.112+0xe8>)
 8005218:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 800521a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 800521c:	bf18      	it	ne
 800521e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8005222:	d009      	beq.n	8005238 <mtx7_execute.lto_priv.112+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005224:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005226:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005228:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	f7fb fbb0 	bl	8000990 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8005234:	42a3      	cmp	r3, r4
 8005236:	d1f5      	bne.n	8005224 <mtx7_execute.lto_priv.112+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8005238:	f7fb fa2a 	bl	8000690 <chSchRescheduleS>
 800523c:	2300      	movs	r3, #0
 800523e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8005242:	f7fd ffd5 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005246:	4911      	ldr	r1, [pc, #68]	; (800528c <mtx7_execute.lto_priv.112+0xec>)
 8005248:	2001      	movs	r0, #1
}
 800524a:	b003      	add	sp, #12
 800524c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005250:	f7fe b826 	b.w	80032a0 <_test_assert_sequence>
 8005254:	20002e30 	.word	0x20002e30
 8005258:	0800714c 	.word	0x0800714c
 800525c:	20002fa8 	.word	0x20002fa8
 8005260:	08005131 	.word	0x08005131
 8005264:	20000ec0 	.word	0x20000ec0
 8005268:	08008308 	.word	0x08008308
 800526c:	200030f0 	.word	0x200030f0
 8005270:	080084b0 	.word	0x080084b0
 8005274:	20003238 	.word	0x20003238
 8005278:	08007140 	.word	0x08007140
 800527c:	20003380 	.word	0x20003380
 8005280:	08007144 	.word	0x08007144
 8005284:	200034c8 	.word	0x200034c8
 8005288:	20000a0c 	.word	0x20000a0c
 800528c:	08007148 	.word	0x08007148

08005290 <mtx6_execute.lto_priv.110>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005292:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <mtx6_execute.lto_priv.110+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005294:	4e2c      	ldr	r6, [pc, #176]	; (8005348 <mtx6_execute.lto_priv.110+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	4d2c      	ldr	r5, [pc, #176]	; (800534c <mtx6_execute.lto_priv.110+0xbc>)
 800529a:	689f      	ldr	r7, [r3, #8]
 800529c:	492c      	ldr	r1, [pc, #176]	; (8005350 <mtx6_execute.lto_priv.110+0xc0>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 800529e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80052a0:	1c7a      	adds	r2, r7, #1
 80052a2:	462b      	mov	r3, r5
 80052a4:	9100      	str	r1, [sp, #0]
 80052a6:	4630      	mov	r0, r6
 80052a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052ac:	f7fb fab0 	bl	8000810 <chThdCreateStatic>
 80052b0:	4c28      	ldr	r4, [pc, #160]	; (8005354 <mtx6_execute.lto_priv.110+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052b2:	4929      	ldr	r1, [pc, #164]	; (8005358 <mtx6_execute.lto_priv.110+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 80052b4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052b6:	1cba      	adds	r2, r7, #2
 80052b8:	462b      	mov	r3, r5
 80052ba:	9100      	str	r1, [sp, #0]
 80052bc:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80052c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052c4:	f7fb faa4 	bl	8000810 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052c8:	4924      	ldr	r1, [pc, #144]	; (800535c <mtx6_execute.lto_priv.110+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80052ca:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052cc:	1cfa      	adds	r2, r7, #3
 80052ce:	462b      	mov	r3, r5
 80052d0:	9100      	str	r1, [sp, #0]
 80052d2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80052d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052da:	f7fb fa99 	bl	8000810 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052de:	4920      	ldr	r1, [pc, #128]	; (8005360 <mtx6_execute.lto_priv.110+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80052e0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052e2:	1d3a      	adds	r2, r7, #4
 80052e4:	462b      	mov	r3, r5
 80052e6:	9100      	str	r1, [sp, #0]
 80052e8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80052ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052f0:	f7fb fa8e 	bl	8000810 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80052f4:	491b      	ldr	r1, [pc, #108]	; (8005364 <mtx6_execute.lto_priv.110+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80052f6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80052f8:	462b      	mov	r3, r5
 80052fa:	9100      	str	r1, [sp, #0]
 80052fc:	1d7a      	adds	r2, r7, #5
 80052fe:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005302:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005306:	f7fb fa83 	bl	8000810 <chThdCreateStatic>
 800530a:	2320      	movs	r3, #32
 800530c:	6120      	str	r0, [r4, #16]
 800530e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005312:	f001 fc0d 	bl	8006b30 <chCondSignalI.constprop.43>
  chCondSignalI(&c1);
 8005316:	f001 fc0b 	bl	8006b30 <chCondSignalI.constprop.43>
  chCondSignalI(&c1);
 800531a:	f001 fc09 	bl	8006b30 <chCondSignalI.constprop.43>
  chCondSignalI(&c1);
 800531e:	f001 fc07 	bl	8006b30 <chCondSignalI.constprop.43>
  chCondSignalI(&c1);
 8005322:	f001 fc05 	bl	8006b30 <chCondSignalI.constprop.43>
  chSchRescheduleS();
 8005326:	f7fb f9b3 	bl	8000690 <chSchRescheduleS>
 800532a:	2300      	movs	r3, #0
 800532c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8005330:	f7fd ff5e 	bl	80031f0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005334:	490c      	ldr	r1, [pc, #48]	; (8005368 <mtx6_execute.lto_priv.110+0xd8>)
 8005336:	2001      	movs	r0, #1
}
 8005338:	b003      	add	sp, #12
 800533a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800533e:	f7fd bfaf 	b.w	80032a0 <_test_assert_sequence>
 8005342:	bf00      	nop
 8005344:	20002e30 	.word	0x20002e30
 8005348:	20002fa8 	.word	0x20002fa8
 800534c:	08005131 	.word	0x08005131
 8005350:	0800714c 	.word	0x0800714c
 8005354:	20000ec0 	.word	0x20000ec0
 8005358:	08008308 	.word	0x08008308
 800535c:	080084b0 	.word	0x080084b0
 8005360:	08007140 	.word	0x08007140
 8005364:	08007144 	.word	0x08007144
 8005368:	08007148 	.word	0x08007148
 800536c:	00000000 	.word	0x00000000

08005370 <mtx5_execute.lto_priv.108>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005372:	4d2b      	ldr	r5, [pc, #172]	; (8005420 <mtx5_execute.lto_priv.108+0xb0>)

#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
 8005374:	4c2b      	ldr	r4, [pc, #172]	; (8005424 <mtx5_execute.lto_priv.108+0xb4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005376:	69ab      	ldr	r3, [r5, #24]
 8005378:	4620      	mov	r0, r4
 800537a:	689e      	ldr	r6, [r3, #8]
 800537c:	f7fb f8c8 	bl	8000510 <chMtxTryLock>
 8005380:	4601      	mov	r1, r0
  test_assert(1, b, "already locked");
 8005382:	2001      	movs	r0, #1
 8005384:	f7fd ffb4 	bl	80032f0 <_test_assert>
 8005388:	b100      	cbz	r0, 800538c <mtx5_execute.lto_priv.108+0x1c>
 800538a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  b = chMtxTryLock(&m1);
 800538c:	4620      	mov	r0, r4
 800538e:	f7fb f8bf 	bl	8000510 <chMtxTryLock>
  test_assert(2, !b, "not locked");
 8005392:	f080 0101 	eor.w	r1, r0, #1
 8005396:	b2c9      	uxtb	r1, r1
 8005398:	2002      	movs	r0, #2
 800539a:	f7fd ffa9 	bl	80032f0 <_test_assert>
 800539e:	4607      	mov	r7, r0
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d1f2      	bne.n	800538a <mtx5_execute.lto_priv.108+0x1a>
 80053a4:	2320      	movs	r3, #32
 80053a6:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7fb fbb8 	bl	8000b20 <chMtxUnlockS>
 80053b0:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 80053b4:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 80053b6:	2003      	movs	r0, #3
 80053b8:	1b09      	subs	r1, r1, r4
 80053ba:	fab1 f181 	clz	r1, r1
 80053be:	0949      	lsrs	r1, r1, #5
 80053c0:	f7fd ff96 	bl	80032f0 <_test_assert>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1e0      	bne.n	800538a <mtx5_execute.lto_priv.108+0x1a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 80053c8:	68a1      	ldr	r1, [r4, #8]
 80053ca:	2004      	movs	r0, #4
 80053cc:	fab1 f181 	clz	r1, r1
 80053d0:	0949      	lsrs	r1, r1, #5
 80053d2:	f7fd ff8d 	bl	80032f0 <_test_assert>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1d7      	bne.n	800538a <mtx5_execute.lto_priv.108+0x1a>
 80053da:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 80053dc:	2005      	movs	r0, #5
 80053de:	6899      	ldr	r1, [r3, #8]
 80053e0:	1a71      	subs	r1, r6, r1
 80053e2:	fab1 f181 	clz	r1, r1
 80053e6:	0949      	lsrs	r1, r1, #5
 80053e8:	f7fd ff82 	bl	80032f0 <_test_assert>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1cc      	bne.n	800538a <mtx5_execute.lto_priv.108+0x1a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7fb fc5d 	bl	8000cb0 <chMtxLock>
  chMtxUnlockAll();
 80053f6:	f7fb fb63 	bl	8000ac0 <chMtxUnlockAll>
 80053fa:	6821      	ldr	r1, [r4, #0]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 80053fc:	2006      	movs	r0, #6
 80053fe:	1b09      	subs	r1, r1, r4
 8005400:	fab1 f181 	clz	r1, r1
 8005404:	0949      	lsrs	r1, r1, #5
 8005406:	f7fd ff73 	bl	80032f0 <_test_assert>
 800540a:	2800      	cmp	r0, #0
 800540c:	d1bd      	bne.n	800538a <mtx5_execute.lto_priv.108+0x1a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 800540e:	68a1      	ldr	r1, [r4, #8]
 8005410:	2007      	movs	r0, #7
 8005412:	fab1 f181 	clz	r1, r1
}
 8005416:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 800541a:	0949      	lsrs	r1, r1, #5
 800541c:	f7fd bf68 	b.w	80032f0 <_test_assert>
 8005420:	20002e30 	.word	0x20002e30
 8005424:	20000964 	.word	0x20000964
	...

08005430 <GetDllStats>:
    chThdSleepMilliseconds(100);
  }
  StopTest = true;
}

void GetDllStats(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4605      	mov	r5, r0
  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  chprintf(chp, "DataLinkLayer Statistics\r\n");

  Stats = &DLLS1.DLLStats;
  int lost = Stats->SentFrames - Stats->ReceivedFrames;
  chprintf(chp, "Sent: %d\r\n", Stats->SentFrames);
 8005434:	4c16      	ldr	r4, [pc, #88]	; (8005490 <GetDllStats+0x60>)
}

void GetDllStats(BaseSequentialStream *chp, int argc, char *argv[]) {

  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  chprintf(chp, "DataLinkLayer Statistics\r\n");
 8005436:	4917      	ldr	r1, [pc, #92]	; (8005494 <GetDllStats+0x64>)
 8005438:	f7fd fc0a 	bl	8002c50 <chprintf>

  Stats = &DLLS1.DLLStats;
  int lost = Stats->SentFrames - Stats->ReceivedFrames;
  chprintf(chp, "Sent: %d\r\n", Stats->SentFrames);
 800543c:	68a2      	ldr	r2, [r4, #8]
 800543e:	4628      	mov	r0, r5
 8005440:	4915      	ldr	r1, [pc, #84]	; (8005498 <GetDllStats+0x68>)
 8005442:	f7fd fc05 	bl	8002c50 <chprintf>
  chprintf(chp, "Received: %d\r\n", Stats->ReceivedFrames);
 8005446:	68e2      	ldr	r2, [r4, #12]
 8005448:	4628      	mov	r0, r5
 800544a:	4914      	ldr	r1, [pc, #80]	; (800549c <GetDllStats+0x6c>)
 800544c:	f7fd fc00 	bl	8002c50 <chprintf>
  chprintf(chp, "LostFrames: %d\r\n", Stats->LostFrames);
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	4628      	mov	r0, r5
 8005454:	4912      	ldr	r1, [pc, #72]	; (80054a0 <GetDllStats+0x70>)
 8005456:	f7fd fbfb 	bl	8002c50 <chprintf>
  chprintf(chp, "Sync: %d\r\n", Stats->SyncCounter);
 800545a:	69a2      	ldr	r2, [r4, #24]
 800545c:	4628      	mov	r0, r5
 800545e:	4911      	ldr	r1, [pc, #68]	; (80054a4 <GetDllStats+0x74>)
 8005460:	f7fd fbf6 	bl	8002c50 <chprintf>
  chprintf(chp, "SyncFrameSentCounter: %d\r\n", Stats->SyncFrameSentCounter);
 8005464:	69e2      	ldr	r2, [r4, #28]
 8005466:	4628      	mov	r0, r5
 8005468:	490f      	ldr	r1, [pc, #60]	; (80054a8 <GetDllStats+0x78>)
 800546a:	f7fd fbf1 	bl	8002c50 <chprintf>
  chprintf(chp, "SyncTimeout: %d\r\n", Stats->SyncTimeout);
 800546e:	6962      	ldr	r2, [r4, #20]
 8005470:	4628      	mov	r0, r5
 8005472:	490e      	ldr	r1, [pc, #56]	; (80054ac <GetDllStats+0x7c>)
 8005474:	f7fd fbec 	bl	8002c50 <chprintf>
  chprintf(chp, "FreeFilledBuffer: %d\r\n", Stats->FreeFilledBuffer);
 8005478:	6a22      	ldr	r2, [r4, #32]
 800547a:	4628      	mov	r0, r5
 800547c:	490c      	ldr	r1, [pc, #48]	; (80054b0 <GetDllStats+0x80>)
 800547e:	f7fd fbe7 	bl	8002c50 <chprintf>
  chprintf(chp, "FreeFreeBuffer: %d\r\n", Stats->FreeFreeBuffer);
 8005482:	4628      	mov	r0, r5
 8005484:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005486:	490b      	ldr	r1, [pc, #44]	; (80054b4 <GetDllStats+0x84>)
}
 8005488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "LostFrames: %d\r\n", Stats->LostFrames);
  chprintf(chp, "Sync: %d\r\n", Stats->SyncCounter);
  chprintf(chp, "SyncFrameSentCounter: %d\r\n", Stats->SyncFrameSentCounter);
  chprintf(chp, "SyncTimeout: %d\r\n", Stats->SyncTimeout);
  chprintf(chp, "FreeFilledBuffer: %d\r\n", Stats->FreeFilledBuffer);
  chprintf(chp, "FreeFreeBuffer: %d\r\n", Stats->FreeFreeBuffer);
 800548c:	f7fd bbe0 	b.w	8002c50 <chprintf>
 8005490:	20001328 	.word	0x20001328
 8005494:	08007e30 	.word	0x08007e30
 8005498:	08007e4c 	.word	0x08007e4c
 800549c:	08007e58 	.word	0x08007e58
 80054a0:	08007e68 	.word	0x08007e68
 80054a4:	08007e7c 	.word	0x08007e7c
 80054a8:	08007e88 	.word	0x08007e88
 80054ac:	08007ea4 	.word	0x08007ea4
 80054b0:	08007eb8 	.word	0x08007eb8
 80054b4:	08007ed0 	.word	0x08007ed0
	...

080054c0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80054c0:	2900      	cmp	r1, #0
 80054c2:	dd03      	ble.n	80054cc <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80054c4:	4908      	ldr	r1, [pc, #32]	; (80054e8 <cmd_systime+0x28>)
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <cmd_systime+0x2c>)
 80054c8:	f7fd bbc2 	b.w	8002c50 <chprintf>
 80054cc:	2320      	movs	r3, #32
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d8:	2300      	movs	r3, #0
 80054da:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <cmd_systime+0x30>)
 80054e0:	b292      	uxth	r2, r2
 80054e2:	f7fd bbb5 	b.w	8002c50 <chprintf>
 80054e6:	bf00      	nop
 80054e8:	08007ee8 	.word	0x08007ee8
 80054ec:	08007ef4 	.word	0x08007ef4
 80054f0:	08007efc 	.word	0x08007efc
	...

08005500 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8005500:	2900      	cmp	r1, #0
 8005502:	dd03      	ble.n	800550c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8005504:	4919      	ldr	r1, [pc, #100]	; (800556c <cmd_info+0x6c>)
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <cmd_info+0x70>)
 8005508:	f7fd bba2 	b.w	8002c50 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800550c:	b510      	push	{r4, lr}
 800550e:	4604      	mov	r4, r0
 8005510:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8005512:	4918      	ldr	r1, [pc, #96]	; (8005574 <cmd_info+0x74>)
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <cmd_info+0x78>)
 8005516:	f7fd fb9b 	bl	8002c50 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800551a:	4620      	mov	r0, r4
 800551c:	4917      	ldr	r1, [pc, #92]	; (800557c <cmd_info+0x7c>)
 800551e:	4a18      	ldr	r2, [pc, #96]	; (8005580 <cmd_info+0x80>)
 8005520:	f7fd fb96 	bl	8002c50 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8005524:	4620      	mov	r0, r4
 8005526:	4917      	ldr	r1, [pc, #92]	; (8005584 <cmd_info+0x84>)
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <cmd_info+0x88>)
 800552a:	f7fd fb91 	bl	8002c50 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800552e:	4620      	mov	r0, r4
 8005530:	4916      	ldr	r1, [pc, #88]	; (800558c <cmd_info+0x8c>)
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <cmd_info+0x90>)
 8005534:	f7fd fb8c 	bl	8002c50 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8005538:	4620      	mov	r0, r4
 800553a:	4916      	ldr	r1, [pc, #88]	; (8005594 <cmd_info+0x94>)
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <cmd_info+0x98>)
 800553e:	f7fd fb87 	bl	8002c50 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8005542:	4620      	mov	r0, r4
 8005544:	4915      	ldr	r1, [pc, #84]	; (800559c <cmd_info+0x9c>)
 8005546:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <cmd_info+0xa0>)
 8005548:	f7fd fb82 	bl	8002c50 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800554c:	4620      	mov	r0, r4
 800554e:	4915      	ldr	r1, [pc, #84]	; (80055a4 <cmd_info+0xa4>)
 8005550:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <cmd_info+0xa8>)
 8005552:	f7fd fb7d 	bl	8002c50 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <cmd_info+0xac>)
 8005558:	4620      	mov	r0, r4
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4914      	ldr	r1, [pc, #80]	; (80055b0 <cmd_info+0xb0>)
 800555e:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <cmd_info+0xb4>)
 8005560:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <cmd_info+0xb8>)
 8005562:	f7fd fb75 	bl	8002c50 <chprintf>
#endif
#endif
}
 8005566:	b002      	add	sp, #8
 8005568:	bd10      	pop	{r4, pc}
 800556a:	bf00      	nop
 800556c:	08007ee8 	.word	0x08007ee8
 8005570:	08007f04 	.word	0x08007f04
 8005574:	08007f0c 	.word	0x08007f0c
 8005578:	080077e4 	.word	0x080077e4
 800557c:	08007f20 	.word	0x08007f20
 8005580:	08007804 	.word	0x08007804
 8005584:	08007f34 	.word	0x08007f34
 8005588:	0800784c 	.word	0x0800784c
 800558c:	08007f48 	.word	0x08007f48
 8005590:	08007854 	.word	0x08007854
 8005594:	08007f5c 	.word	0x08007f5c
 8005598:	08007860 	.word	0x08007860
 800559c:	08007f70 	.word	0x08007f70
 80055a0:	08007878 	.word	0x08007878
 80055a4:	08007f84 	.word	0x08007f84
 80055a8:	080078a4 	.word	0x080078a4
 80055ac:	08007fc0 	.word	0x08007fc0
 80055b0:	08007f98 	.word	0x08007f98
 80055b4:	08007fb0 	.word	0x08007fb0
 80055b8:	08007fbc 	.word	0x08007fbc
 80055bc:	00000000 	.word	0x00000000

080055c0 <start_driver_test>:

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
}


void start_driver_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80055c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  StopTest = false;
 80055c4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005708 <start_driver_test+0x148>

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
}


void start_driver_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80055c8:	b082      	sub	sp, #8
  StopTest = false;
 80055ca:	2500      	movs	r5, #0

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
}


void start_driver_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80055cc:	4604      	mov	r4, r0
  StopTest = false;
  SendingFreq = atoi(argv[0]);
 80055ce:	6810      	ldr	r0, [r2, #0]

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
}


void start_driver_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80055d0:	4616      	mov	r6, r2
  StopTest = false;
 80055d2:	f888 5000 	strb.w	r5, [r8]
  SendingFreq = atoi(argv[0]);
 80055d6:	f001 fcc3 	bl	8006f60 <atoi>
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <start_driver_test+0xf4>)
 80055dc:	6018      	str	r0, [r3, #0]
  SendingPiece = atoi(argv[1]);
 80055de:	6870      	ldr	r0, [r6, #4]
 80055e0:	f001 fcbe 	bl	8006f60 <atoi>
 80055e4:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <start_driver_test+0xf8>)
  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  NetworkStatistics *NWLStats = &WIFID1.NWLStats;
  chThdCreateStatic(waUartTest, sizeof(waUartTest), NORMALPRIO+1, UartTestThread, NULL);
 80055e6:	9500      	str	r5, [sp, #0]
 80055e8:	f44f 71a4 	mov.w	r1, #328	; 0x148


void start_driver_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  StopTest = false;
  SendingFreq = atoi(argv[0]);
  SendingPiece = atoi(argv[1]);
 80055ec:	6018      	str	r0, [r3, #0]
  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  NetworkStatistics *NWLStats = &WIFID1.NWLStats;
  chThdCreateStatic(waUartTest, sizeof(waUartTest), NORMALPRIO+1, UartTestThread, NULL);
 80055ee:	2241      	movs	r2, #65	; 0x41
 80055f0:	4b32      	ldr	r3, [pc, #200]	; (80056bc <start_driver_test+0xfc>)
 80055f2:	4833      	ldr	r0, [pc, #204]	; (80056c0 <start_driver_test+0x100>)
 80055f4:	f7fb f90c 	bl	8000810 <chThdCreateStatic>
 80055f8:	e04b      	b.n	8005692 <start_driver_test+0xd2>
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chprintf(chp, "\x1B\x63");
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7fd fb28 	bl	8002c50 <chprintf>
    chprintf(chp, "\x1B[2J");
 8005600:	4930      	ldr	r1, [pc, #192]	; (80056c4 <start_driver_test+0x104>)
 8005602:	4620      	mov	r0, r4
 8005604:	f7fd fb24 	bl	8002c50 <chprintf>
    chprintf(chp, "DRIVER STRESS TEST\r\n");
 8005608:	492f      	ldr	r1, [pc, #188]	; (80056c8 <start_driver_test+0x108>)
 800560a:	4620      	mov	r0, r4
 800560c:	f7fd fb20 	bl	8002c50 <chprintf>

    Stats = &DLLS1.DLLStats;
    int lost = Stats->SentFrames - Stats->ReceivedFrames;
 8005610:	68ab      	ldr	r3, [r5, #8]
 8005612:	68ee      	ldr	r6, [r5, #12]
    chprintf(chp, "Sent: %d\r\n", Stats->SentFrames);
 8005614:	461a      	mov	r2, r3
 8005616:	492d      	ldr	r1, [pc, #180]	; (80056cc <start_driver_test+0x10c>)
 8005618:	4620      	mov	r0, r4
    chprintf(chp, "\x1B\x63");
    chprintf(chp, "\x1B[2J");
    chprintf(chp, "DRIVER STRESS TEST\r\n");

    Stats = &DLLS1.DLLStats;
    int lost = Stats->SentFrames - Stats->ReceivedFrames;
 800561a:	1b9e      	subs	r6, r3, r6
    chprintf(chp, "Sent: %d\r\n", Stats->SentFrames);
 800561c:	f7fd fb18 	bl	8002c50 <chprintf>
    chprintf(chp, "Received: %d\r\n", Stats->ReceivedFrames);
 8005620:	492b      	ldr	r1, [pc, #172]	; (80056d0 <start_driver_test+0x110>)
 8005622:	68ea      	ldr	r2, [r5, #12]
 8005624:	4620      	mov	r0, r4
 8005626:	f7fd fb13 	bl	8002c50 <chprintf>
    chprintf(chp, "LostFrames: %d\r\n", Stats->LostFrames);
 800562a:	492a      	ldr	r1, [pc, #168]	; (80056d4 <start_driver_test+0x114>)
 800562c:	692a      	ldr	r2, [r5, #16]
 800562e:	4620      	mov	r0, r4
 8005630:	f7fd fb0e 	bl	8002c50 <chprintf>
    chprintf(chp, "Sync: %d\r\n", Stats->SyncCounter);
 8005634:	4928      	ldr	r1, [pc, #160]	; (80056d8 <start_driver_test+0x118>)
 8005636:	69aa      	ldr	r2, [r5, #24]
 8005638:	4620      	mov	r0, r4
 800563a:	f7fd fb09 	bl	8002c50 <chprintf>
    chprintf(chp, "SyncFrameSentCounter: %d\r\n", Stats->SyncFrameSentCounter);
 800563e:	4927      	ldr	r1, [pc, #156]	; (80056dc <start_driver_test+0x11c>)
 8005640:	69ea      	ldr	r2, [r5, #28]
 8005642:	4620      	mov	r0, r4
 8005644:	f7fd fb04 	bl	8002c50 <chprintf>
    chprintf(chp, "SyncTimeout: %d\r\n", Stats->SyncTimeout);
 8005648:	4925      	ldr	r1, [pc, #148]	; (80056e0 <start_driver_test+0x120>)
 800564a:	696a      	ldr	r2, [r5, #20]
 800564c:	4620      	mov	r0, r4
 800564e:	f7fd faff 	bl	8002c50 <chprintf>
    chprintf(chp, "FreeFilledBuffer: %d\r\n", Stats->FreeFilledBuffer);
 8005652:	4924      	ldr	r1, [pc, #144]	; (80056e4 <start_driver_test+0x124>)
 8005654:	6a2a      	ldr	r2, [r5, #32]
 8005656:	4620      	mov	r0, r4
 8005658:	f7fd fafa 	bl	8002c50 <chprintf>
    chprintf(chp, "FreeFreeBuffer: %d\r\n", Stats->FreeFreeBuffer);
 800565c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800565e:	4922      	ldr	r1, [pc, #136]	; (80056e8 <start_driver_test+0x128>)
 8005660:	4620      	mov	r0, r4
 8005662:	f7fd faf5 	bl	8002c50 <chprintf>
    chprintf(chp, "CalculatedLostFrames: %d\r\n", lost);
 8005666:	4632      	mov	r2, r6
 8005668:	4920      	ldr	r1, [pc, #128]	; (80056ec <start_driver_test+0x12c>)
 800566a:	4620      	mov	r0, r4
 800566c:	f7fd faf0 	bl	8002c50 <chprintf>

    chprintf(chp, "\r\n");
 8005670:	491f      	ldr	r1, [pc, #124]	; (80056f0 <start_driver_test+0x130>)
 8005672:	4620      	mov	r0, r4
 8005674:	f7fd faec 	bl	8002c50 <chprintf>
    chprintf(chp, "SentPacket: %d\r\n", NWLStats->SentPacket);
 8005678:	491e      	ldr	r1, [pc, #120]	; (80056f4 <start_driver_test+0x134>)
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4620      	mov	r0, r4
 800567e:	f7fd fae7 	bl	8002c50 <chprintf>
    chprintf(chp, "FrameNumber: %d\r\n", NWLStats->FrameNumber);
 8005682:	4620      	mov	r0, r4
 8005684:	793a      	ldrb	r2, [r7, #4]
 8005686:	491c      	ldr	r1, [pc, #112]	; (80056f8 <start_driver_test+0x138>)
 8005688:	f7fd fae2 	bl	8002c50 <chprintf>

    chThdSleepMilliseconds(100);
 800568c:	20c8      	movs	r0, #200	; 0xc8
 800568e:	f7fb fd27 	bl	80010e0 <chThdSleep>
  SendingFreq = atoi(argv[0]);
  SendingPiece = atoi(argv[1]);
  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  NetworkStatistics *NWLStats = &WIFID1.NWLStats;
  chThdCreateStatic(waUartTest, sizeof(waUartTest), NORMALPRIO+1, UartTestThread, NULL);
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	2100      	movs	r1, #0
 8005696:	4620      	mov	r0, r4
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4798      	blx	r3
 800569c:	3001      	adds	r0, #1
    chprintf(chp, "\x1B\x63");
 800569e:	4917      	ldr	r1, [pc, #92]	; (80056fc <start_driver_test+0x13c>)
    chprintf(chp, "\x1B[2J");
    chprintf(chp, "DRIVER STRESS TEST\r\n");

    Stats = &DLLS1.DLLStats;
    int lost = Stats->SentFrames - Stats->ReceivedFrames;
 80056a0:	4d17      	ldr	r5, [pc, #92]	; (8005700 <start_driver_test+0x140>)
    chprintf(chp, "FreeFilledBuffer: %d\r\n", Stats->FreeFilledBuffer);
    chprintf(chp, "FreeFreeBuffer: %d\r\n", Stats->FreeFreeBuffer);
    chprintf(chp, "CalculatedLostFrames: %d\r\n", lost);

    chprintf(chp, "\r\n");
    chprintf(chp, "SentPacket: %d\r\n", NWLStats->SentPacket);
 80056a2:	4f18      	ldr	r7, [pc, #96]	; (8005704 <start_driver_test+0x144>)
  SendingFreq = atoi(argv[0]);
  SendingPiece = atoi(argv[1]);
  DataLinkStatistics *Stats = &DLLS1.DLLStats;
  NetworkStatistics *NWLStats = &WIFID1.NWLStats;
  chThdCreateStatic(waUartTest, sizeof(waUartTest), NORMALPRIO+1, UartTestThread, NULL);
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80056a4:	d0a9      	beq.n	80055fa <start_driver_test+0x3a>
    chprintf(chp, "SentPacket: %d\r\n", NWLStats->SentPacket);
    chprintf(chp, "FrameNumber: %d\r\n", NWLStats->FrameNumber);

    chThdSleepMilliseconds(100);
  }
  StopTest = true;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f888 3000 	strb.w	r3, [r8]
}
 80056ac:	b002      	add	sp, #8
 80056ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b2:	bf00      	nop
 80056b4:	2000099c 	.word	0x2000099c
 80056b8:	2000098c 	.word	0x2000098c
 80056bc:	080057b1 	.word	0x080057b1
 80056c0:	200011c0 	.word	0x200011c0
 80056c4:	08007fd0 	.word	0x08007fd0
 80056c8:	08007fd8 	.word	0x08007fd8
 80056cc:	08007e4c 	.word	0x08007e4c
 80056d0:	08007e58 	.word	0x08007e58
 80056d4:	08007e68 	.word	0x08007e68
 80056d8:	08007e7c 	.word	0x08007e7c
 80056dc:	08007e88 	.word	0x08007e88
 80056e0:	08007ea4 	.word	0x08007ea4
 80056e4:	08007eb8 	.word	0x08007eb8
 80056e8:	08007ed0 	.word	0x08007ed0
 80056ec:	08007ff0 	.word	0x08007ff0
 80056f0:	08007e84 	.word	0x08007e84
 80056f4:	0800800c 	.word	0x0800800c
 80056f8:	08008020 	.word	0x08008020
 80056fc:	08007fcc 	.word	0x08007fcc
 8005700:	20001328 	.word	0x20001328
 8005704:	200028b0 	.word	0x200028b0
 8005708:	20000f28 	.word	0x20000f28
 800570c:	00000000 	.word	0x00000000

08005710 <esp_send>:
        SendFrame(&ToSendWrong);*/
    chThdSleepUntil(time);
  }
}

void esp_send(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  IPAddress ipcim = {192, 168, 4, 255};
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <esp_send+0x7c>)
        SendFrame(&ToSendWrong);*/
    chThdSleepUntil(time);
  }
}

void esp_send(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005716:	4607      	mov	r7, r0
  IPAddress ipcim = {192, 168, 4, 255};
 8005718:	6818      	ldr	r0, [r3, #0]
        SendFrame(&ToSendWrong);*/
    chThdSleepUntil(time);
  }
}

void esp_send(BaseSequentialStream *chp, int argc, char *argv[]) {
 800571a:	b082      	sub	sp, #8
  IPAddress ipcim = {192, 168, 4, 255};
 800571c:	9001      	str	r0, [sp, #4]
 *
 * @param[in] wifip    pointer to the @p WIFIDriver variable
 */
PacketStruct *NWLCreatePacket(WIFIDriver *wifip)
{
  PacketStruct *Temp = chPoolAlloc(&wifip->PacketPool);
 800571e:	481c      	ldr	r0, [pc, #112]	; (8005790 <esp_send+0x80>)
 8005720:	f7fe f8ce 	bl	80038c0 <chPoolAlloc>
  if(Temp == NULL)
 8005724:	4680      	mov	r8, r0
 8005726:	b348      	cbz	r0, 800577c <esp_send+0x6c>
    return NULL;
  Temp->length = 0;
 8005728:	2200      	movs	r2, #0
 800572a:	4613      	mov	r3, r2
 800572c:	7002      	strb	r2, [r0, #0]
 800572e:	f103 0e61 	add.w	lr, r3, #97	; 0x61
 8005732:	fa5f fe8e 	uxtb.w	lr, lr
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 8005736:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 800573a:	4c16      	ldr	r4, [pc, #88]	; (8005794 <esp_send+0x84>)
 800573c:	4446      	add	r6, r8
 800573e:	cc07      	ldmia	r4!, {r0, r1, r2}
  Packet->length++;
 8005740:	3301      	adds	r3, #1
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 8005742:	f8c6 0001 	str.w	r0, [r6, #1]
 8005746:	f8c6 1005 	str.w	r1, [r6, #5]
 800574a:	f8c6 2009 	str.w	r2, [r6, #9]
 800574e:	8821      	ldrh	r1, [r4, #0]
 8005750:	78a2      	ldrb	r2, [r4, #2]
  Packet->length++;
 8005752:	b2db      	uxtb	r3, r3
  if (csomag == NULL)
    chprintf(chp, "null\r\n");


  int i;
  for(i = 0; i<MAX_FRAME_PER_PACKET; i++){
 8005754:	4573      	cmp	r3, lr
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 8005756:	f8a6 100d 	strh.w	r1, [r6, #13]
 800575a:	73f2      	strb	r2, [r6, #15]
  Packet->length++;
 800575c:	f888 3000 	strb.w	r3, [r8]
 8005760:	d1e9      	bne.n	8005736 <esp_send+0x26>
    NWLAddFrameToPacket(csomag, &ToSendCorrect);
  }

  wifiSendUDP(&WIFID1, csomag, ipcim, 4000);
 8005762:	9901      	ldr	r1, [sp, #4]
 8005764:	4640      	mov	r0, r8
 8005766:	f001 fb23 	bl	8006db0 <wifiSendUDP.constprop.7>

  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
 800576a:	4638      	mov	r0, r7
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <esp_send+0x88>)
 800576e:	490b      	ldr	r1, [pc, #44]	; (800579c <esp_send+0x8c>)
 8005770:	689a      	ldr	r2, [r3, #8]
}
 8005772:	b002      	add	sp, #8
 8005774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  wifiSendUDP(&WIFID1, csomag, ipcim, 4000);

  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  chprintf(chp, "SentFrames: %d\r\n", Stats->SentFrames);
 8005778:	f7fd ba6a 	b.w	8002c50 <chprintf>

void esp_send(BaseSequentialStream *chp, int argc, char *argv[]) {
  IPAddress ipcim = {192, 168, 4, 255};
  PacketStruct *csomag = NWLCreatePacket(&WIFID1);
  if (csomag == NULL)
    chprintf(chp, "null\r\n");
 800577c:	4638      	mov	r0, r7
 800577e:	4908      	ldr	r1, [pc, #32]	; (80057a0 <esp_send+0x90>)
 8005780:	f7fd fa66 	bl	8002c50 <chprintf>
 8005784:	f898 3000 	ldrb.w	r3, [r8]
 8005788:	e7d1      	b.n	800572e <esp_send+0x1e>
 800578a:	bf00      	nop
 800578c:	080070b0 	.word	0x080070b0
 8005790:	200028c0 	.word	0x200028c0
 8005794:	20000974 	.word	0x20000974
 8005798:	20001328 	.word	0x20001328
 800579c:	08008034 	.word	0x08008034
 80057a0:	08008048 	.word	0x08008048
	...

080057b0 <UartTestThread>:
FrameStruct ToSendWrong[] = { 0x50, 0x4D, 0xF4, 0xEB, 0xF8, 0xB1, 0x6F, 0x75, 0x43, 0x82, 0xAB, 0x23, 0x42, 0xE9 };
int SendingFreq = 10000;
int SendingPiece = 1;

static THD_WORKING_AREA(waUartTest, 128);
static THD_FUNCTION(UartTestThread, arg) {
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4b30      	ldr	r3, [pc, #192]	; (8005878 <UartTestThread+0xc8>)
 80057b6:	4931      	ldr	r1, [pc, #196]	; (800587c <UartTestThread+0xcc>)
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	b083      	sub	sp, #12
 80057bc:	2320      	movs	r3, #32
 80057be:	6191      	str	r1, [r2, #24]
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057c8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80057ca:	2300      	movs	r3, #0
 80057cc:	b2bf      	uxth	r7, r7
 80057ce:	f383 8811 	msr	BASEPRI, r3
  time = chVTGetSystemTime();
  int i;
  PacketStruct *csomag;
  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  IPAddress ipcim = {192, 168, 4, 255};
 80057d2:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <UartTestThread+0xd0>)
  while(!StopTest)
 80057d4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005890 <UartTestThread+0xe0>
  time = chVTGetSystemTime();
  int i;
  PacketStruct *csomag;
  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  IPAddress ipcim = {192, 168, 4, 255};
 80057d8:	6818      	ldr	r0, [r3, #0]
  while(!StopTest)
 80057da:	f898 3000 	ldrb.w	r3, [r8]
  time = chVTGetSystemTime();
  int i;
  PacketStruct *csomag;
  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  IPAddress ipcim = {192, 168, 4, 255};
 80057de:	9001      	str	r0, [sp, #4]
  while(!StopTest)
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d146      	bne.n	8005872 <UartTestThread+0xc2>
 80057e4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005894 <UartTestThread+0xe4>
 80057e8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005898 <UartTestThread+0xe8>
  {
    time += US2ST(SendingFreq);
 80057ec:	f8da 2000 	ldr.w	r2, [sl]
 80057f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80057f4:	fb03 f302 	mul.w	r3, r3, r2
 80057f8:	4a22      	ldr	r2, [pc, #136]	; (8005884 <UartTestThread+0xd4>)
 80057fa:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 80057fe:	f203 233f 	addw	r3, r3, #575	; 0x23f
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 *
 * @param[in] wifip    pointer to the @p WIFIDriver variable
 */
PacketStruct *NWLCreatePacket(WIFIDriver *wifip)
{
  PacketStruct *Temp = chPoolAlloc(&wifip->PacketPool);
 8005806:	4820      	ldr	r0, [pc, #128]	; (8005888 <UartTestThread+0xd8>)
 8005808:	eb07 4793 	add.w	r7, r7, r3, lsr #18
 800580c:	f7fe f858 	bl	80038c0 <chPoolAlloc>
 8005810:	b2bf      	uxth	r7, r7
  if(Temp == NULL)
 8005812:	4684      	mov	ip, r0
 8005814:	b108      	cbz	r0, 800581a <UartTestThread+0x6a>
    return NULL;
  Temp->length = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	7003      	strb	r3, [r0, #0]
    Stats = &DLLS1.DLLStats;
    csomag = NWLCreatePacket(&WIFID1);


      for(i=0; i<SendingPiece; i++)
 800581a:	f8d9 b000 	ldr.w	fp, [r9]
 800581e:	f1bb 0f00 	cmp.w	fp, #0
 8005822:	dd1b      	ble.n	800585c <UartTestThread+0xac>
 8005824:	f89c 4000 	ldrb.w	r4, [ip]
 8005828:	f04f 0e00 	mov.w	lr, #0
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 800582c:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <UartTestThread+0xdc>)
 8005832:	4466      	add	r6, ip
 8005834:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005836:	f8c6 0001 	str.w	r0, [r6, #1]
 800583a:	f8c6 1005 	str.w	r1, [r6, #5]
 800583e:	f8c6 2009 	str.w	r2, [r6, #9]
 8005842:	881a      	ldrh	r2, [r3, #0]
  Packet->length++;
 8005844:	3401      	adds	r4, #1
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 8005846:	789b      	ldrb	r3, [r3, #2]
 8005848:	f10e 0e01 	add.w	lr, lr, #1
  Packet->length++;
 800584c:	b2e4      	uxtb	r4, r4
 800584e:	45de      	cmp	lr, fp
 * @param[in]  frame     pointer to the @p FrameStruct object
 */
void NWLAddFrameToPacket(PacketStruct *Packet, FrameStruct *Frame){
  uint8_t l = Packet->length;
  FrameStruct *Temp = &Packet->FrameSlot[l];
  memcpy(Temp, Frame, sizeof(FrameStruct));
 8005850:	f8a6 200d 	strh.w	r2, [r6, #13]
 8005854:	73f3      	strb	r3, [r6, #15]
  Packet->length++;
 8005856:	f88c 4000 	strb.w	r4, [ip]
 800585a:	d1e7      	bne.n	800582c <UartTestThread+0x7c>
        NWLAddFrameToPacket(csomag, &ToSendCorrect);

      wifiSendUDP(&WIFID1, csomag, ipcim, 4000);
 800585c:	4660      	mov	r0, ip
 800585e:	9901      	ldr	r1, [sp, #4]
 8005860:	f001 faa6 	bl	8006db0 <wifiSendUDP.constprop.7>
      /*if((Stats->SentFrames % 10000)==0)
        SendFrame(&ToSendWrong);*/
    chThdSleepUntil(time);
 8005864:	4638      	mov	r0, r7
 8005866:	f7fb fc23 	bl	80010b0 <chThdSleepUntil>
  int i;
  PacketStruct *csomag;
  DataLinkStatistics *Stats = &DLLS1.DLLStats;

  IPAddress ipcim = {192, 168, 4, 255};
  while(!StopTest)
 800586a:	f898 3000 	ldrb.w	r3, [r8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0bc      	beq.n	80057ec <UartTestThread+0x3c>
      wifiSendUDP(&WIFID1, csomag, ipcim, 4000);
      /*if((Stats->SentFrames % 10000)==0)
        SendFrame(&ToSendWrong);*/
    chThdSleepUntil(time);
  }
}
 8005872:	b003      	add	sp, #12
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	20002e30 	.word	0x20002e30
 800587c:	08008050 	.word	0x08008050
 8005880:	080070b0 	.word	0x080070b0
 8005884:	431bde83 	.word	0x431bde83
 8005888:	200028c0 	.word	0x200028c0
 800588c:	20000974 	.word	0x20000974
 8005890:	20000f28 	.word	0x20000f28
 8005894:	2000099c 	.word	0x2000099c
 8005898:	2000098c 	.word	0x2000098c
 800589c:	00000000 	.word	0x00000000

080058a0 <shell_thread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80058a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	4b79      	ldr	r3, [pc, #484]	; (8005a8c <shell_thread+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80058a6:	6804      	ldr	r4, [r0, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4a79      	ldr	r2, [pc, #484]	; (8005a90 <shell_thread+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80058ac:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80058ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 80058b2:	4978      	ldr	r1, [pc, #480]	; (8005a94 <shell_thread+0x1f4>)
 80058b4:	4620      	mov	r0, r4
 80058b6:	619a      	str	r2, [r3, #24]
 80058b8:	f7fd f9ca 	bl	8002c50 <chprintf>
 80058bc:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80058be:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
 80058c2:	4620      	mov	r0, r4
 80058c4:	4974      	ldr	r1, [pc, #464]	; (8005a98 <shell_thread+0x1f8>)
 80058c6:	f7fd f9c3 	bl	8002c50 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 80058ca:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	4620      	mov	r0, r4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f10d 0107 	add.w	r1, sp, #7
 80058d6:	2201      	movs	r2, #1
 80058d8:	4798      	blx	r3
 80058da:	b370      	cbz	r0, 800593a <shell_thread+0x9a>
      return true;
    if (c == 4) {
 80058dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80058e0:	2904      	cmp	r1, #4
 80058e2:	d026      	beq.n	8005932 <shell_thread+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 80058e4:	2908      	cmp	r1, #8
 80058e6:	d011      	beq.n	800590c <shell_thread+0x6c>
 80058e8:	297f      	cmp	r1, #127	; 0x7f
 80058ea:	d00f      	beq.n	800590c <shell_thread+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80058ec:	290d      	cmp	r1, #13
 80058ee:	d035      	beq.n	800595c <shell_thread+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 80058f0:	291f      	cmp	r1, #31
 80058f2:	d9eb      	bls.n	80058cc <shell_thread+0x2c>
      continue;
    if (p < line + size - 1) {
 80058f4:	42bd      	cmp	r5, r7
 80058f6:	d2e9      	bcs.n	80058cc <shell_thread+0x2c>
      chSequentialStreamPut(chp, c);
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	4620      	mov	r0, r4
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4798      	blx	r3
      *p++ = (char)c;
 8005900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005904:	3501      	adds	r5, #1
 8005906:	f805 3c01 	strb.w	r3, [r5, #-1]
 800590a:	e7df      	b.n	80058cc <shell_thread+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800590c:	42b5      	cmp	r5, r6
 800590e:	d0dd      	beq.n	80058cc <shell_thread+0x2c>
        chSequentialStreamPut(chp, c);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	4620      	mov	r0, r4
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	4620      	mov	r0, r4
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2120      	movs	r1, #32
 8005920:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	4620      	mov	r0, r4
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800592c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800592e:	4798      	blx	r3
 8005930:	e7cc      	b.n	80058cc <shell_thread+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8005932:	4620      	mov	r0, r4
 8005934:	4959      	ldr	r1, [pc, #356]	; (8005a9c <shell_thread+0x1fc>)
 8005936:	f7fd f98b 	bl	8002c50 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800593a:	4620      	mov	r0, r4
 800593c:	4958      	ldr	r1, [pc, #352]	; (8005aa0 <shell_thread+0x200>)
 800593e:	f7fd f987 	bl	8002c50 <chprintf>
 8005942:	2320      	movs	r3, #32
 8005944:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8005948:	2100      	movs	r1, #0
 800594a:	4856      	ldr	r0, [pc, #344]	; (8005aa4 <shell_thread+0x204>)
 800594c:	f7fb f8a0 	bl	8000a90 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8005950:	2000      	movs	r0, #0
 8005952:	f7fb f9ed 	bl	8000d30 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8005956:	b018      	add	sp, #96	; 0x60
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800595c:	4952      	ldr	r1, [pc, #328]	; (8005aa8 <shell_thread+0x208>)
 800595e:	4620      	mov	r0, r4
 8005960:	f7fd f976 	bl	8002c50 <chprintf>
      *p = 0;
 8005964:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8005966:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8005968:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800596a:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800596c:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800596e:	f001 fa8f 	bl	8006e90 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8005972:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8005974:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8005976:	2000      	movs	r0, #0
 8005978:	f10d 090c 	add.w	r9, sp, #12
 800597c:	f001 fa88 	bl	8006e90 <_strtok.constprop.3>
 8005980:	b150      	cbz	r0, 8005998 <shell_thread+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8005982:	2d04      	cmp	r5, #4
 8005984:	d01d      	beq.n	80059c2 <shell_thread+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8005986:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800598a:	a902      	add	r1, sp, #8
 800598c:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800598e:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8005990:	f001 fa7e 	bl	8006e90 <_strtok.constprop.3>
 8005994:	2800      	cmp	r0, #0
 8005996:	d1f4      	bne.n	8005982 <shell_thread+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8005998:	ab18      	add	r3, sp, #96	; 0x60
 800599a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800599e:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	d08c      	beq.n	80058c2 <shell_thread+0x22>
      if (strcmp(cmd, "exit") == 0) {
 80059a8:	4650      	mov	r0, sl
 80059aa:	4940      	ldr	r1, [pc, #256]	; (8005aac <shell_thread+0x20c>)
 80059ac:	f7fa fc58 	bl	8000260 <strcmp>
 80059b0:	b970      	cbnz	r0, 80059d0 <shell_thread+0x130>
        if (n > 0) {
 80059b2:	2d00      	cmp	r5, #0
 80059b4:	d0c5      	beq.n	8005942 <shell_thread+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80059b6:	4620      	mov	r0, r4
 80059b8:	493d      	ldr	r1, [pc, #244]	; (8005ab0 <shell_thread+0x210>)
 80059ba:	4a3c      	ldr	r2, [pc, #240]	; (8005aac <shell_thread+0x20c>)
 80059bc:	f7fd f948 	bl	8002c50 <chprintf>
 80059c0:	e77f      	b.n	80058c2 <shell_thread+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80059c2:	4620      	mov	r0, r4
 80059c4:	493b      	ldr	r1, [pc, #236]	; (8005ab4 <shell_thread+0x214>)
 80059c6:	f7fd f943 	bl	8002c50 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	e778      	b.n	80058c2 <shell_thread+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 80059d0:	4650      	mov	r0, sl
 80059d2:	4939      	ldr	r1, [pc, #228]	; (8005ab8 <shell_thread+0x218>)
 80059d4:	f7fa fc44 	bl	8000260 <strcmp>
 80059d8:	b930      	cbnz	r0, 80059e8 <shell_thread+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80059da:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 80059dc:	b1c5      	cbz	r5, 8005a10 <shell_thread+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80059de:	4934      	ldr	r1, [pc, #208]	; (8005ab0 <shell_thread+0x210>)
 80059e0:	4a35      	ldr	r2, [pc, #212]	; (8005ab8 <shell_thread+0x218>)
 80059e2:	f7fd f935 	bl	8002c50 <chprintf>
 80059e6:	e76c      	b.n	80058c2 <shell_thread+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80059e8:	4b34      	ldr	r3, [pc, #208]	; (8005abc <shell_thread+0x21c>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4699      	mov	r9, r3
 80059ee:	b918      	cbnz	r0, 80059f8 <shell_thread+0x158>
 80059f0:	e031      	b.n	8005a56 <shell_thread+0x1b6>
 80059f2:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80059f6:	b370      	cbz	r0, 8005a56 <shell_thread+0x1b6>
    if (strcmp(scp->sc_name, name) == 0) {
 80059f8:	4651      	mov	r1, sl
 80059fa:	f7fa fc31 	bl	8000260 <strcmp>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1f7      	bne.n	80059f2 <shell_thread+0x152>
      scp->sc_function(chp, argc, argv);
 8005a02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005a06:	4629      	mov	r1, r5
 8005a08:	aa03      	add	r2, sp, #12
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	4798      	blx	r3
 8005a0e:	e758      	b.n	80058c2 <shell_thread+0x22>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8005a10:	492b      	ldr	r1, [pc, #172]	; (8005ac0 <shell_thread+0x220>)
 8005a12:	f7fd f91d 	bl	8002c50 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005a16:	4b29      	ldr	r3, [pc, #164]	; (8005abc <shell_thread+0x21c>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	b13a      	cbz	r2, 8005a2e <shell_thread+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4928      	ldr	r1, [pc, #160]	; (8005ac4 <shell_thread+0x224>)
 8005a22:	f7fd f915 	bl	8002c50 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005a26:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	d1f7      	bne.n	8005a1e <shell_thread+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8005a2e:	f1b8 0f00 	cmp.w	r8, #0
 8005a32:	d00b      	beq.n	8005a4c <shell_thread+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005a34:	f8d8 2000 	ldr.w	r2, [r8]
 8005a38:	b142      	cbz	r2, 8005a4c <shell_thread+0x1ac>
 8005a3a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4921      	ldr	r1, [pc, #132]	; (8005ac4 <shell_thread+0x224>)
 8005a40:	f7fd f906 	bl	8002c50 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8005a44:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	d1f7      	bne.n	8005a3c <shell_thread+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4916      	ldr	r1, [pc, #88]	; (8005aa8 <shell_thread+0x208>)
 8005a50:	f7fd f8fe 	bl	8002c50 <chprintf>
 8005a54:	e735      	b.n	80058c2 <shell_thread+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8005a56:	f1b8 0f00 	cmp.w	r8, #0
 8005a5a:	d00d      	beq.n	8005a78 <shell_thread+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8005a5c:	f8d8 0000 	ldr.w	r0, [r8]
 8005a60:	b150      	cbz	r0, 8005a78 <shell_thread+0x1d8>
 8005a62:	46c1      	mov	r9, r8
 8005a64:	e002      	b.n	8005a6c <shell_thread+0x1cc>
 8005a66:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8005a6a:	b128      	cbz	r0, 8005a78 <shell_thread+0x1d8>
    if (strcmp(scp->sc_name, name) == 0) {
 8005a6c:	4651      	mov	r1, sl
 8005a6e:	f7fa fbf7 	bl	8000260 <strcmp>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d1f7      	bne.n	8005a66 <shell_thread+0x1c6>
 8005a76:	e7c4      	b.n	8005a02 <shell_thread+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4912      	ldr	r1, [pc, #72]	; (8005ac8 <shell_thread+0x228>)
 8005a7e:	f7fd f8e7 	bl	8002c50 <chprintf>
        chprintf(chp, " ?\r\n");
 8005a82:	4620      	mov	r0, r4
 8005a84:	4911      	ldr	r1, [pc, #68]	; (8005acc <shell_thread+0x22c>)
 8005a86:	f7fd f8e3 	bl	8002c50 <chprintf>
 8005a8a:	e71a      	b.n	80058c2 <shell_thread+0x22>
 8005a8c:	20002e30 	.word	0x20002e30
 8005a90:	0800805c 	.word	0x0800805c
 8005a94:	08008064 	.word	0x08008064
 8005a98:	0800807c 	.word	0x0800807c
 8005a9c:	08008084 	.word	0x08008084
 8005aa0:	080080d8 	.word	0x080080d8
 8005aa4:	20002888 	.word	0x20002888
 8005aa8:	08007e84 	.word	0x08007e84
 8005aac:	080080a0 	.word	0x080080a0
 8005ab0:	08007ee8 	.word	0x08007ee8
 8005ab4:	08008088 	.word	0x08008088
 8005ab8:	080080a8 	.word	0x080080a8
 8005abc:	200009b8 	.word	0x200009b8
 8005ac0:	080080b0 	.word	0x080080b0
 8005ac4:	080080c8 	.word	0x080080c8
 8005ac8:	080080cc 	.word	0x080080cc
 8005acc:	080080d0 	.word	0x080080d0

08005ad0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8005ad0:	4cca      	ldr	r4, [pc, #808]	; (8005dfc <main+0x32c>)
 8005ad2:	2500      	movs	r5, #0


/*
 * Application entry point.
 */
int main(void) {
 8005ad4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	6127      	str	r7, [r4, #16]
 8005ae0:	6125      	str	r5, [r4, #16]
  rccResetAPB2(0xFFFFFFFF);
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	60e7      	str	r7, [r4, #12]
 8005ae6:	60e5      	str	r5, [r4, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8005ae8:	69e3      	ldr	r3, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005aea:	4ac5      	ldr	r2, [pc, #788]	; (8005e00 <main+0x330>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	61e3      	str	r3, [r4, #28]
  rccEnableBKPInterface(FALSE);
 8005af2:	69e3      	ldr	r3, [r4, #28]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8005af4:	48c3      	ldr	r0, [pc, #780]	; (8005e04 <main+0x334>)
 8005af6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005afa:	61e3      	str	r3, [r4, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8005afc:	6813      	ldr	r3, [r2, #0]
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8005afe:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8005e60 <main+0x390>
 8005b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b06:	6013      	str	r3, [r2, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8005b08:	69a6      	ldr	r6, [r4, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8005b0a:	f8df e358 	ldr.w	lr, [pc, #856]	; 8005e64 <main+0x394>
  GPIOA->CRL = config->PAData.crl;
 8005b0e:	f8df a358 	ldr.w	sl, [pc, #856]	; 8005e68 <main+0x398>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8005b12:	f046 067d 	orr.w	r6, r6, #125	; 0x7d
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8005b16:	f04f 3988 	mov.w	r9, #2290649224	; 0x88888888
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8005b1a:	61a6      	str	r6, [r4, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8005b1c:	49ba      	ldr	r1, [pc, #744]	; (8005e08 <main+0x338>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8005b1e:	f8c8 700c 	str.w	r7, [r8, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8005b22:	4bba      	ldr	r3, [pc, #744]	; (8005e0c <main+0x33c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8005b24:	f8c8 e004 	str.w	lr, [r8, #4]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8005b28:	f8df c340 	ldr.w	ip, [pc, #832]	; 8005e6c <main+0x39c>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8005b2c:	f8c8 a000 	str.w	sl, [r8]
  GPIOB->ODR = config->PBData.odr;
 8005b30:	60c7      	str	r7, [r0, #12]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005b32:	f648 4a9f 	movw	sl, #35999	; 0x8c9f
  GPIOB->CRH = config->PBData.crh;
 8005b36:	f8c0 9004 	str.w	r9, [r0, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005b3a:	f64f 79ff 	movw	r9, #65535	; 0xffff
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8005b3e:	f502 4224 	add.w	r2, r2, #41984	; 0xa400
 8005b42:	b089      	sub	sp, #36	; 0x24
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8005b44:	f8c0 c000 	str.w	ip, [r0]
  GPIOC->ODR = config->PCData.odr;
 8005b48:	60cd      	str	r5, [r1, #12]
  GPIOC->CRH = config->PCData.crh;
 8005b4a:	604d      	str	r5, [r1, #4]
  GPIOC->CRL = config->PCData.crl;
 8005b4c:	600d      	str	r5, [r1, #0]
  GPIOD->ODR = config->PDData.odr;
 8005b4e:	60d5      	str	r5, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 8005b50:	6055      	str	r5, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 8005b52:	6015      	str	r5, [r2, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8005b54:	60dd      	str	r5, [r3, #12]
  GPIOE->CRH = config->PEData.crh;
 8005b56:	605d      	str	r5, [r3, #4]
  GPIOE->CRL = config->PEData.crl;
 8005b58:	601d      	str	r5, [r3, #0]
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 8005b5a:	f7fd fe31 	bl	80037c0 <sd_lld_init>
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005b5e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005b62:	69e1      	ldr	r1, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005b64:	f8df c308 	ldr.w	ip, [pc, #776]	; 8005e70 <main+0x3a0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8005b68:	f041 0101 	orr.w	r1, r1, #1
 8005b6c:	61e1      	str	r1, [r4, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8005b6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8005b72:	f8df e300 	ldr.w	lr, [pc, #768]	; 8005e74 <main+0x3a4>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b76:	4ca6      	ldr	r4, [pc, #664]	; (8005e10 <main+0x340>)
 8005b78:	f441 6b00 	orr.w	fp, r1, #2048	; 0x800
 8005b7c:	f8cc b004 	str.w	fp, [ip, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005b80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005b84:	2601      	movs	r6, #1
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b86:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005b8a:	f04f 0b80 	mov.w	fp, #128	; 0x80

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005b8e:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005b92:	f8c1 902c 	str.w	r9, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005b96:	618d      	str	r5, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005b98:	634d      	str	r5, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8005b9a:	60cd      	str	r5, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8005b9c:	604d      	str	r5, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005b9e:	614e      	str	r6, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005ba0:	600e      	str	r6, [r1, #0]
 8005ba2:	f884 b31c 	strb.w	fp, [r4, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005ba6:	f8c4 c180 	str.w	ip, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005baa:	f8c4 c000 	str.w	ip, [r4]
 8005bae:	f8ce 5008 	str.w	r5, [lr, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb2:	f8de 400c 	ldr.w	r4, [lr, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005bb6:	4997      	ldr	r1, [pc, #604]	; (8005e14 <main+0x344>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005bb8:	4020      	ands	r0, r4
  reg_value  =  (reg_value                                   |
 8005bba:	4301      	orrs	r1, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005bbc:	4c96      	ldr	r4, [pc, #600]	; (8005e18 <main+0x348>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005bbe:	f8ce 100c 	str.w	r1, [lr, #12]
 8005bc2:	68e1      	ldr	r1, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005bc4:	4895      	ldr	r0, [pc, #596]	; (8005e1c <main+0x34c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005bc6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8005bca:	60e1      	str	r1, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005bcc:	6801      	ldr	r1, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005bce:	4c94      	ldr	r4, [pc, #592]	; (8005e20 <main+0x350>)
 8005bd0:	4331      	orrs	r1, r6
 8005bd2:	6001      	str	r1, [r0, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8005bd4:	f104 0c1c 	add.w	ip, r4, #28

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005bdc:	a802      	add	r0, sp, #8
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bde:	f04f 0a10 	mov.w	sl, #16
 8005be2:	f04f 0920 	mov.w	r9, #32
 8005be6:	f88e a01f 	strb.w	sl, [lr, #31]
  tqp->p_prev = (thread_t *)tqp;
 8005bea:	6064      	str	r4, [r4, #4]
 8005bec:	f88e 9022 	strb.w	r9, [lr, #34]	; 0x22
 8005bf0:	f8c4 c01c 	str.w	ip, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005bf4:	f8c4 c020 	str.w	ip, [r4, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 8005bf8:	84a7      	strh	r7, [r4, #36]	; 0x24
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8005bfa:	60a5      	str	r5, [r4, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005bfc:	6024      	str	r4, [r4, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8005bfe:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8005c00:	6164      	str	r4, [r4, #20]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8005c02:	84e5      	strh	r5, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8005c04:	6725      	str	r5, [r4, #112]	; 0x70

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8005c06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8005c0a:	9702      	str	r7, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 8005c0c:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8005c0e:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8005c10:	9505      	str	r5, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005c12:	f000 fee5 	bl	80069e0 <chTMStartMeasurementX.constprop.53>
  chTMStopMeasurementX(&tm);
 8005c16:	a802      	add	r0, sp, #8
 8005c18:	f7fa fcda 	bl	80005d0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8005c1c:	4b81      	ldr	r3, [pc, #516]	; (8005e24 <main+0x354>)
  ch.tm.offset = tm.last;
 8005c1e:	9f04      	ldr	r7, [sp, #16]
 8005c20:	f8df b254 	ldr.w	fp, [pc, #596]	; 8005e78 <main+0x3a8>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005c24:	4880      	ldr	r0, [pc, #512]	; (8005e28 <main+0x358>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005c26:	4a81      	ldr	r2, [pc, #516]	; (8005e2c <main+0x35c>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005c28:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8005c2c:	f103 0c10 	add.w	ip, r3, #16
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005c30:	f8df a248 	ldr.w	sl, [pc, #584]	; 8005e7c <main+0x3ac>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005c34:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8005e80 <main+0x3b0>
 8005c38:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8005c3c:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005c40:	f8c3 c014 	str.w	ip, [r3, #20]
 8005c44:	6727      	str	r7, [r4, #112]	; 0x70
 8005c46:	619d      	str	r5, [r3, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005c48:	2740      	movs	r7, #64	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005c4a:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005c4e:	f022 0207 	bic.w	r2, r2, #7
  default_heap.h_free.h.u.next = NULL;
 8005c52:	609d      	str	r5, [r3, #8]
  default_heap.h_free.h.size = 0;
 8005c54:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005c56:	f104 0c50 	add.w	ip, r4, #80	; 0x50
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8005c5a:	f8c3 b000 	str.w	fp, [r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005c5e:	f104 0354 	add.w	r3, r4, #84	; 0x54
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005c62:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005c66:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8005c68:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8005c6a:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8005c6e:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8005c70:	63e4      	str	r4, [r4, #60]	; 0x3c
 8005c72:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005c76:	6367      	str	r7, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8005c78:	66a7      	str	r7, [r4, #104]	; 0x68
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005c7a:	f8ca 0000 	str.w	r0, [sl]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005c7e:	f8ce 1010 	str.w	r1, [lr, #16]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8005c82:	f8c9 2000 	str.w	r2, [r9]
 8005c86:	6161      	str	r1, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8005c88:	61a1      	str	r1, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8005c8a:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005c8e:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005c92:	6563      	str	r3, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8005c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c96:	f385 8811 	msr	BASEPRI, r5
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005c9a:	b662      	cpsie	i
 8005c9c:	4a64      	ldr	r2, [pc, #400]	; (8005e30 <main+0x360>)
 8005c9e:	69a3      	ldr	r3, [r4, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8005ca0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8005ca4:	619a      	str	r2, [r3, #24]
 8005ca6:	21d8      	movs	r1, #216	; 0xd8
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <main+0x364>)
 8005cac:	9500      	str	r5, [sp, #0]
 8005cae:	f7fa fdaf 	bl	8000810 <chThdCreateStatic>
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  if (palReadPad(GPIOA, GPIOA_IN0) == PAL_HIGH)
 8005cb2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8005cb6:	4b60      	ldr	r3, [pc, #384]	; (8005e38 <main+0x368>)
 8005cb8:	f3c2 0940 	ubfx	r9, r2, #1, #1
 8005cbc:	6183      	str	r3, [r0, #24]
 8005cbe:	f1b9 0f00 	cmp.w	r9, #0
 8005cc2:	f040 8123 	bne.w	8005f0c <main+0x43c>
      init_atmode();

  chThdSleepMilliseconds(100);
 8005cc6:	20c8      	movs	r0, #200	; 0xc8
 8005cc8:	f7fb fa0a 	bl	80010e0 <chThdSleep>

thread_t *consoleThread;

void consoleInit(void){
  /* Shell initialization.*/
  sdStart(&SD2, &ser_cfg);
 8005ccc:	485b      	ldr	r0, [pc, #364]	; (8005e3c <main+0x36c>)
 8005cce:	495c      	ldr	r1, [pc, #368]	; (8005e40 <main+0x370>)
 8005cd0:	f7fd fd96 	bl	8003800 <sdStart>
  osalDbgCheck((dllp != NULL) && (config != NULL));

  osalDbgAssert((dllp->state == DLL_UNINIT) || (dllp->state == DLL_ACTIVE),
              "DLLInit(), invalid state");

  dllp->config = config;
 8005cd4:	4a5b      	ldr	r2, [pc, #364]	; (8005e44 <main+0x374>)
  SerialDCfg.speed = dllp->config->baudrate;       //Set the data rate to the given rate
 8005cd6:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8005e84 <main+0x3b4>
/**
 * @brief Init the DataLinkLayer structure
 */
void DLLObjectInit(DLLDriver *dllp){

  dllp->state  = DLL_STOP;
 8005cda:	4f5b      	ldr	r7, [pc, #364]	; (8005e48 <main+0x378>)
 *
 * @init
 */
void wifiObjectInit(WIFIDriver *wifid){

  wifid->state  = WIFI_STOP;
 8005cdc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e88 <main+0x3b8>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8005ce0:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8005e8c <main+0x3bc>
  shellInit();
  consoleThread = NULL;
 8005ce4:	4d59      	ldr	r5, [pc, #356]	; (8005e4c <main+0x37c>)

  osalDbgAssert((dllp->state == DLL_UNINIT) || (dllp->state == DLL_ACTIVE),
              "DLLInit(), invalid state");

  dllp->config = config;
  SerialDCfg.speed = dllp->config->baudrate;       //Set the data rate to the given rate
 8005ce6:	e892 0009 	ldmia.w	r2, {r0, r3}
  sdStart(dllp->config->SDriver, &SerialDCfg);     //Start the serial driver for the ESP8266
 8005cea:	4661      	mov	r1, ip

  osalDbgAssert((dllp->state == DLL_UNINIT) || (dllp->state == DLL_ACTIVE),
              "DLLInit(), invalid state");

  dllp->config = config;
  SerialDCfg.speed = dllp->config->baudrate;       //Set the data rate to the given rate
 8005cec:	f8cc 3000 	str.w	r3, [ip]
  osalDbgCheck((dllp != NULL) && (config != NULL));

  osalDbgAssert((dllp->state == DLL_UNINIT) || (dllp->state == DLL_ACTIVE),
              "DLLInit(), invalid state");

  dllp->config = config;
 8005cf0:	607a      	str	r2, [r7, #4]
/**
 * @brief Init the DataLinkLayer structure
 */
void DLLObjectInit(DLLDriver *dllp){

  dllp->state  = DLL_STOP;
 8005cf2:	703e      	strb	r6, [r7, #0]
 8005cf4:	f888 6000 	strb.w	r6, [r8]
  wifid->NWLStats.FrameNumber = 0x00;
 8005cf8:	f888 9004 	strb.w	r9, [r8, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005cfc:	f607 1648 	addw	r6, r7, #2376	; 0x948
  wifid->NWLStats.SentPacket = 0x00;
 8005d00:	f8c8 9008 	str.w	r9, [r8, #8]
 8005d04:	f8ce e000 	str.w	lr, [lr]
 8005d08:	f8c5 9000 	str.w	r9, [r5]
  osalDbgAssert((wifip->state == WIFI_UNINIT) || (wifip->state == WIFI_ACTIVE),
              "wifiStart(), invalid state");

  DLLInit();

  wifip->DLLObject = dllp;
 8005d0c:	f8c8 700c 	str.w	r7, [r8, #12]
  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8005d10:	f607 1b38 	addw	fp, r7, #2360	; 0x938
  osalDbgAssert((dllp->state == DLL_UNINIT) || (dllp->state == DLL_ACTIVE),
              "DLLInit(), invalid state");

  dllp->config = config;
  SerialDCfg.speed = dllp->config->baudrate;       //Set the data rate to the given rate
  sdStart(dllp->config->SDriver, &SerialDCfg);     //Start the serial driver for the ESP8266
 8005d14:	f7fd fd74 	bl	8003800 <sdStart>
 8005d18:	f207 7a8c 	addw	sl, r7, #1932	; 0x78c
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8005d1c:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 8005d20:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8005d24:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8005d28:	f607 1e54 	addw	lr, r7, #2388	; 0x954
 8005d2c:	f507 60f5 	add.w	r0, r7, #1960	; 0x7a8
 8005d30:	f207 719c 	addw	r1, r7, #1948	; 0x79c
 8005d34:	f8c7 9050 	str.w	r9, [r7, #80]	; 0x50
 8005d38:	f8c7 9950 	str.w	r9, [r7, #2384]	; 0x950
 8005d3c:	f8c7 97a4 	str.w	r9, [r7, #1956]	; 0x7a4
 8005d40:	f04f 0961 	mov.w	r9, #97	; 0x61
 8005d44:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
  tqp->p_prev = (thread_t *)tqp;
 8005d48:	f8c7 694c 	str.w	r6, [r7, #2380]	; 0x94c
 8005d4c:	f8c7 995c 	str.w	r9, [r7, #2396]	; 0x95c
 8005d50:	f8c7 97b0 	str.w	r9, [r7, #1968]	; 0x7b0
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8005d54:	f8c7 b93c 	str.w	fp, [r7, #2364]	; 0x93c
 8005d58:	f8c7 a790 	str.w	sl, [r7, #1936]	; 0x790
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d5c:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
  tqp->p_prev = (thread_t *)tqp;
 8005d60:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8005d64:	f8c7 2938 	str.w	r2, [r7, #2360]	; 0x938
  mbp->mb_rdptr = buf;
 8005d68:	f8c7 2944 	str.w	r2, [r7, #2372]	; 0x944
  mbp->mb_wrptr = buf;
 8005d6c:	f8c7 2940 	str.w	r2, [r7, #2368]	; 0x940
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d70:	f8c7 e954 	str.w	lr, [r7, #2388]	; 0x954
  tqp->p_prev = (thread_t *)tqp;
 8005d74:	f8c7 e958 	str.w	lr, [r7, #2392]	; 0x958
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8005d78:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
  mbp->mb_rdptr = buf;
 8005d7c:	f8c7 3798 	str.w	r3, [r7, #1944]	; 0x798
  mbp->mb_wrptr = buf;
 8005d80:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d84:	f8c7 07a8 	str.w	r0, [r7, #1960]	; 0x7a8
  tqp->p_prev = (thread_t *)tqp;
 8005d88:	f8c7 07ac 	str.w	r0, [r7, #1964]	; 0x7ac
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005d8c:	f8c7 179c 	str.w	r1, [r7, #1948]	; 0x79c
  tqp->p_prev = (thread_t *)tqp;
 8005d90:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8005d94:	f107 0658 	add.w	r6, r7, #88	; 0x58
 8005d98:	f207 6907 	addw	r9, r7, #1543	; 0x607
  chMBObjectInit(&dllp->DLLBuffers.DLLFreeOutputBuffer,
                 dllp->DLLBuffers.DLLFreeOutputBufferQueue, OUTPUT_FRAME_BUFFER);

  int i;
  for (i = 0; i < OUTPUT_FRAME_BUFFER; i++)
    (void)chMBPost(&dllp->DLLBuffers.DLLFreeOutputBuffer,
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	482c      	ldr	r0, [pc, #176]	; (8005e50 <main+0x380>)
 8005da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005da4:	360f      	adds	r6, #15
 8005da6:	f7fb f8db 	bl	8000f60 <chMBPost>

  chMBObjectInit(&dllp->DLLBuffers.DLLFreeOutputBuffer,
                 dllp->DLLBuffers.DLLFreeOutputBufferQueue, OUTPUT_FRAME_BUFFER);

  int i;
  for (i = 0; i < OUTPUT_FRAME_BUFFER; i++)
 8005daa:	454e      	cmp	r6, r9
 8005dac:	d1f6      	bne.n	8005d9c <main+0x2cc>
 8005dae:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <main+0x384>)
 * @param[in] dllp  pointer to the DataLinkLayer driver object
 */
void DLLCreateSyncFrame(DLLDriver *dllp){
  int i;
  for(i = 0; i < FRAME_SIZE_BYTE; i++)
    dllp->DLLSyncFrame[i] = 0xFF;
 8005db0:	21ff      	movs	r1, #255	; 0xff
 8005db2:	f103 020f 	add.w	r2, r3, #15
 8005db6:	f803 1f01 	strb.w	r1, [r3, #1]!
 *
 * @param[in] dllp  pointer to the DataLinkLayer driver object
 */
void DLLCreateSyncFrame(DLLDriver *dllp){
  int i;
  for(i = 0; i < FRAME_SIZE_BYTE; i++)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d1fb      	bne.n	8005db6 <main+0x2e6>
    (void)chMBPost(&dllp->DLLBuffers.DLLFreeOutputBuffer,
                   (msg_t)&dllp->DLLBuffers.DLLOutputBuffer[i], TIME_INFINITE);

  DLLCreateSyncFrame(dllp);

  dllp->SendingThread = chThdCreateFromHeap(NULL, THD_WORKING_AREA_SIZE(128), NORMALPRIO+1, SDSending, (void *)dllp);
 8005dbe:	9700      	str	r7, [sp, #0]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005dc6:	2241      	movs	r2, #65	; 0x41
 8005dc8:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <main+0x388>)
 8005dca:	f7fa fcd9 	bl	8000780 <chThdCreateFromHeap>
 8005dce:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005e48 <main+0x378>
 8005dd2:	f8c7 09f8 	str.w	r0, [r7, #2552]	; 0x9f8
  if (dllp->SendingThread == NULL)
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f000 80bb 	beq.w	8005f52 <main+0x482>
    chSysHalt("DualFramework: Starting 'SendingThread' failed - out of memory");

  dllp->ReceivingThread = chThdCreateFromHeap(NULL, THD_WORKING_AREA_SIZE(128), NORMALPRIO+1, SDReceiving, (void *)dllp);
 8005ddc:	f8cd 9000 	str.w	r9, [sp]
 8005de0:	2000      	movs	r0, #0
 8005de2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005de6:	2241      	movs	r2, #65	; 0x41
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <main+0x38c>)
 8005dea:	f7fa fcc9 	bl	8000780 <chThdCreateFromHeap>
 8005dee:	f8c9 09fc 	str.w	r0, [r9, #2556]	; 0x9fc
  if (dllp->ReceivingThread == NULL)
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f000 80a9 	beq.w	8005f4a <main+0x47a>
 8005df8:	e04a      	b.n	8005e90 <main+0x3c0>
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40007000 	.word	0x40007000
 8005e04:	40010c00 	.word	0x40010c00
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40011800 	.word	0x40011800
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	05fa0300 	.word	0x05fa0300
 8005e18:	e000edf0 	.word	0xe000edf0
 8005e1c:	e0001000 	.word	0xe0001000
 8005e20:	20002e30 	.word	0x20002e30
 8005e24:	20001308 	.word	0x20001308
 8005e28:	20003617 	.word	0x20003617
 8005e2c:	20005000 	.word	0x20005000
 8005e30:	08007dc0 	.word	0x08007dc0
 8005e34:	08000491 	.word	0x08000491
 8005e38:	080080e4 	.word	0x080080e4
 8005e3c:	20002b7c 	.word	0x20002b7c
 8005e40:	20000990 	.word	0x20000990
 8005e44:	20000984 	.word	0x20000984
 8005e48:	20001328 	.word	0x20001328
 8005e4c:	20000f2c 	.word	0x20000f2c
 8005e50:	20001ab4 	.word	0x20001ab4
 8005e54:	2000135e 	.word	0x2000135e
 8005e58:	08002121 	.word	0x08002121
 8005e5c:	080021c1 	.word	0x080021c1
 8005e60:	40010800 	.word	0x40010800
 8005e64:	888944b4 	.word	0x888944b4
 8005e68:	b4b34b48 	.word	0xb4b34b48
 8005e6c:	44333844 	.word	0x44333844
 8005e70:	e0042000 	.word	0xe0042000
 8005e74:	e000ed00 	.word	0xe000ed00
 8005e78:	08003151 	.word	0x08003151
 8005e7c:	20002fa0 	.word	0x20002fa0
 8005e80:	20002fa4 	.word	0x20002fa4
 8005e84:	200009d0 	.word	0x200009d0
 8005e88:	200028b0 	.word	0x200028b0
 8005e8c:	20002888 	.word	0x20002888
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005e90:	2600      	movs	r6, #0
    chSysHalt("DualFramework: Starting 'ReceivingThread' failed - out of memory");

  dllp->state = DLL_ACTIVE;
 8005e92:	2202      	movs	r2, #2
  mp->mp_object_size = size;
 8005e94:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
 8005e98:	f889 2000 	strb.w	r2, [r9]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005e9c:	f8c8 6010 	str.w	r6, [r8, #16]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005ea0:	f8c8 6018 	str.w	r6, [r8, #24]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8005ea4:	f8c8 3014 	str.w	r3, [r8, #20]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005ea8:	2020      	movs	r0, #32
 8005eaa:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <main+0x48c>)
 8005eb0:	f8d8 1010 	ldr.w	r1, [r8, #16]
  mp->mp_next = php;
 8005eb4:	f8c8 3010 	str.w	r3, [r8, #16]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	f386 8811 	msr	BASEPRI, r6
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8005ebe:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8005ec2:	185c      	adds	r4, r3, r1
 8005ec4:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005ec8:	f8d8 0010 	ldr.w	r0, [r8, #16]
  mp->mp_next = php;
 8005ecc:	f8c8 4010 	str.w	r4, [r8, #16]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8005ed0:	5058      	str	r0, [r3, r1]
 8005ed2:	f386 8811 	msr	BASEPRI, r6
 8005ed6:	4f22      	ldr	r7, [pc, #136]	; (8005f60 <main+0x490>)
}

void consoleStart(void){
  if (!consoleThread) {
 8005ed8:	4c22      	ldr	r4, [pc, #136]	; (8005f64 <main+0x494>)

  chPoolObjectInit(&wifip->PacketPool, sizeof(PacketStruct), NULL);

  chPoolLoadArray(&wifip->PacketPool, &PacketBuffer[0], MAX_AVAILABLE_PACKET);

  wifip->state = WIFI_ACTIVE;
 8005eda:	f888 2000 	strb.w	r2, [r8]
 8005ede:	e003      	b.n	8005ee8 <main+0x418>
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched.
   */
  while (true) {
    consoleStart();
    chThdSleepMilliseconds(500);
 8005ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ee4:	f7fb f8fc 	bl	80010e0 <chThdSleep>
 8005ee8:	6828      	ldr	r0, [r5, #0]
 8005eea:	b130      	cbz	r0, 8005efa <main+0x42a>
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
  }
  else if (chThdTerminatedX(consoleThread)) {
 8005eec:	7f03      	ldrb	r3, [r0, #28]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d1f6      	bne.n	8005ee0 <main+0x410>
    chThdRelease(consoleThread);    /* Recovers memory of the previous shell.   */
 8005ef2:	f7fa fb25 	bl	8000540 <chThdRelease>
    consoleThread = NULL;           /* Triggers spawning of a new shell.        */
 8005ef6:	6026      	str	r6, [r4, #0]
 8005ef8:	e7f2      	b.n	8005ee0 <main+0x410>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8005efa:	9700      	str	r7, [sp, #0]
 8005efc:	f640 01c8 	movw	r1, #2248	; 0x8c8
 8005f00:	2240      	movs	r2, #64	; 0x40
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <main+0x498>)
 8005f04:	f7fa fc3c 	bl	8000780 <chThdCreateFromHeap>
  consoleThread = NULL;
}

void consoleStart(void){
  if (!consoleThread) {
    consoleThread = shellCreate(&shCfg, SHELL_WA_SIZE, NORMALPRIO);
 8005f08:	6020      	str	r0, [r4, #0]
 8005f0a:	e7e9      	b.n	8005ee0 <main+0x410>
 8005f0c:	f7fd fc58 	bl	80037c0 <sd_lld_init>
 * Init AT MODE
 */
void init_atmode()
{
  sdInit();
  sdStart(&SD1, &uartCfg1);     //Start Serial Driver 1
 8005f10:	4816      	ldr	r0, [pc, #88]	; (8005f6c <main+0x49c>)
 8005f12:	4917      	ldr	r1, [pc, #92]	; (8005f70 <main+0x4a0>)
 8005f14:	f7fd fc74 	bl	8003800 <sdStart>
  sdStart(&SD2, &uartCfg2);     //Start Serial Driver 2
 8005f18:	4816      	ldr	r0, [pc, #88]	; (8005f74 <main+0x4a4>)
 8005f1a:	4917      	ldr	r1, [pc, #92]	; (8005f78 <main+0x4a8>)
 8005f1c:	f7fd fc70 	bl	8003800 <sdStart>

  chThdCreateStatic(waSend, sizeof(waSend), NORMALPRIO, Send, NULL);
 8005f20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f24:	463a      	mov	r2, r7
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <main+0x4ac>)
 8005f28:	9500      	str	r5, [sp, #0]
 8005f2a:	4815      	ldr	r0, [pc, #84]	; (8005f80 <main+0x4b0>)
 8005f2c:	f7fa fc70 	bl	8000810 <chThdCreateStatic>
  chThdCreateStatic(waReceive, sizeof(waReceive), NORMALPRIO, Receive, NULL);
 8005f30:	9500      	str	r5, [sp, #0]
 8005f32:	463a      	mov	r2, r7
 8005f34:	4813      	ldr	r0, [pc, #76]	; (8005f84 <main+0x4b4>)
 8005f36:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f3a:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <main+0x4b8>)
 8005f3c:	f7fa fc68 	bl	8000810 <chThdCreateStatic>

  while (TRUE) {
    chThdSleepMilliseconds(500);
 8005f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f44:	f7fb f8cc 	bl	80010e0 <chThdSleep>
 8005f48:	e7fa      	b.n	8005f40 <main+0x470>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f4a:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <main+0x4bc>)
 8005f4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f50:	e7fe      	b.n	8005f50 <main+0x480>
 8005f52:	b672      	cpsid	i
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <main+0x4c0>)
 8005f56:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f58:	e7fe      	b.n	8005f58 <main+0x488>
 8005f5a:	bf00      	nop
 8005f5c:	20001d28 	.word	0x20001d28
 8005f60:	08007e20 	.word	0x08007e20
 8005f64:	20000f2c 	.word	0x20000f2c
 8005f68:	080058a1 	.word	0x080058a1
 8005f6c:	200028cc 	.word	0x200028cc
 8005f70:	200009ac 	.word	0x200009ac
 8005f74:	20002b7c 	.word	0x20002b7c
 8005f78:	200009a0 	.word	0x200009a0
 8005f7c:	08006881 	.word	0x08006881
 8005f80:	20000f30 	.word	0x20000f30
 8005f84:	20001078 	.word	0x20001078
 8005f88:	08006841 	.word	0x08006841
 8005f8c:	0800812c 	.word	0x0800812c
 8005f90:	080080ec 	.word	0x080080ec
	...

08005fa0 <pools1_setup.lto_priv.126>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <pools1_setup.lto_priv.126+0x10>)
 8005fa2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8005fa4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005fa8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005faa:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	4770      	bx	lr
 8005fb0:	20000900 	.word	0x20000900
	...

08005fc0 <null_provider.lto_priv.77>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	4770      	bx	lr
	...

08005fd0 <heap1_setup.lto_priv.124>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005fd0:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <heap1_setup.lto_priv.124+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8005fd2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005fd4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005fd6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <heap1_setup.lto_priv.124+0x2c>)
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005fdc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005fe0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
 8005fe4:	60da      	str	r2, [r3, #12]
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8005fe6:	6099      	str	r1, [r3, #8]
 8005fe8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8005fea:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20002fa8 	.word	0x20002fa8
 8005ffc:	20002890 	.word	0x20002890

08006000 <heap1_execute.lto_priv.125>:

static void heap1_execute(void) {
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8006004:	a901      	add	r1, sp, #4
 8006006:	2000      	movs	r0, #0
 8006008:	f7fd fc72 	bl	80038f0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800600c:	2110      	movs	r1, #16
 800600e:	2000      	movs	r0, #0
 8006010:	f7fd fcde 	bl	80039d0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8006014:	1c01      	adds	r1, r0, #0
 8006016:	4605      	mov	r5, r0
 8006018:	bf18      	it	ne
 800601a:	2101      	movne	r1, #1
 800601c:	2001      	movs	r0, #1
 800601e:	f7fd f967 	bl	80032f0 <_test_assert>
 8006022:	4604      	mov	r4, r0
 8006024:	b108      	cbz	r0, 800602a <heap1_execute.lto_priv.125+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8006026:	b002      	add	sp, #8
 8006028:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800602a:	4628      	mov	r0, r5
 800602c:	f7fd fc88 	bl	8003940 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8006030:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006034:	4620      	mov	r0, r4
 8006036:	f7fd fccb 	bl	80039d0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800603a:	fab0 f180 	clz	r1, r0
 800603e:	2002      	movs	r0, #2
 8006040:	0949      	lsrs	r1, r1, #5
 8006042:	f7fd f955 	bl	80032f0 <_test_assert>
 8006046:	2800      	cmp	r0, #0
 8006048:	d1ed      	bne.n	8006026 <heap1_execute.lto_priv.125+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800604a:	a901      	add	r1, sp, #4
 800604c:	487b      	ldr	r0, [pc, #492]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 800604e:	f7fd fc4f 	bl	80038f0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006052:	2110      	movs	r1, #16
 8006054:	4879      	ldr	r0, [pc, #484]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006056:	f7fd fcbb 	bl	80039d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800605a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800605c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800605e:	4877      	ldr	r0, [pc, #476]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006060:	f7fd fcb6 	bl	80039d0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006064:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006066:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006068:	4874      	ldr	r0, [pc, #464]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 800606a:	f7fd fcb1 	bl	80039d0 <chHeapAlloc>
 800606e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8006070:	4630      	mov	r0, r6
 8006072:	f7fd fc65 	bl	8003940 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8006076:	4628      	mov	r0, r5
 8006078:	f7fd fc62 	bl	8003940 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 800607c:	4620      	mov	r0, r4
 800607e:	f7fd fc5f 	bl	8003940 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006082:	4669      	mov	r1, sp
 8006084:	486d      	ldr	r0, [pc, #436]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006086:	f7fd fc33 	bl	80038f0 <chHeapStatus>
 800608a:	f1a0 0101 	sub.w	r1, r0, #1
 800608e:	fab1 f181 	clz	r1, r1
 8006092:	2003      	movs	r0, #3
 8006094:	0949      	lsrs	r1, r1, #5
 8006096:	f7fd f92b 	bl	80032f0 <_test_assert>
 800609a:	2800      	cmp	r0, #0
 800609c:	d1c3      	bne.n	8006026 <heap1_execute.lto_priv.125+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800609e:	2110      	movs	r1, #16
 80060a0:	4866      	ldr	r0, [pc, #408]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060a2:	f7fd fc95 	bl	80039d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80060a6:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80060a8:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80060aa:	4864      	ldr	r0, [pc, #400]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060ac:	f7fd fc90 	bl	80039d0 <chHeapAlloc>
 80060b0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80060b2:	2110      	movs	r1, #16
 80060b4:	4861      	ldr	r0, [pc, #388]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060b6:	f7fd fc8b 	bl	80039d0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 80060ba:	f7fd fc41 	bl	8003940 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 80060be:	4628      	mov	r0, r5
 80060c0:	f7fd fc3e 	bl	8003940 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7fd fc3b 	bl	8003940 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80060ca:	4669      	mov	r1, sp
 80060cc:	485b      	ldr	r0, [pc, #364]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060ce:	f7fd fc0f 	bl	80038f0 <chHeapStatus>
 80060d2:	f1a0 0101 	sub.w	r1, r0, #1
 80060d6:	fab1 f181 	clz	r1, r1
 80060da:	2004      	movs	r0, #4
 80060dc:	0949      	lsrs	r1, r1, #5
 80060de:	f7fd f907 	bl	80032f0 <_test_assert>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d19f      	bne.n	8006026 <heap1_execute.lto_priv.125+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80060e6:	2111      	movs	r1, #17
 80060e8:	4854      	ldr	r0, [pc, #336]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060ea:	f7fd fc71 	bl	80039d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80060ee:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80060f0:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80060f2:	4852      	ldr	r0, [pc, #328]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80060f4:	f7fd fc6c 	bl	80039d0 <chHeapAlloc>
 80060f8:	4605      	mov	r5, r0
  chHeapFree(p1);
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7fd fc20 	bl	8003940 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006100:	4669      	mov	r1, sp
 8006102:	484e      	ldr	r0, [pc, #312]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006104:	f7fd fbf4 	bl	80038f0 <chHeapStatus>
 8006108:	f1a0 0102 	sub.w	r1, r0, #2
 800610c:	fab1 f181 	clz	r1, r1
 8006110:	2005      	movs	r0, #5
 8006112:	0949      	lsrs	r1, r1, #5
 8006114:	f7fd f8ec 	bl	80032f0 <_test_assert>
 8006118:	2800      	cmp	r0, #0
 800611a:	d184      	bne.n	8006026 <heap1_execute.lto_priv.125+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 800611c:	2110      	movs	r1, #16
 800611e:	4847      	ldr	r0, [pc, #284]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006120:	f7fd fc56 	bl	80039d0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006124:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006126:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006128:	4844      	ldr	r0, [pc, #272]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 800612a:	f7fd fbe1 	bl	80038f0 <chHeapStatus>
 800612e:	2801      	cmp	r0, #1
 8006130:	f000 8081 	beq.w	8006236 <heap1_execute.lto_priv.125+0x236>
 8006134:	4669      	mov	r1, sp
 8006136:	4841      	ldr	r0, [pc, #260]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006138:	f7fd fbda 	bl	80038f0 <chHeapStatus>
 800613c:	f1a0 0102 	sub.w	r1, r0, #2
 8006140:	fab1 f181 	clz	r1, r1
 8006144:	0949      	lsrs	r1, r1, #5
 8006146:	2006      	movs	r0, #6
 8006148:	f7fd f8d2 	bl	80032f0 <_test_assert>
 800614c:	2800      	cmp	r0, #0
 800614e:	f47f af6a 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8006152:	4628      	mov	r0, r5
 8006154:	f7fd fbf4 	bl	8003940 <chHeapFree>
  chHeapFree(p1);
 8006158:	4620      	mov	r0, r4
 800615a:	f7fd fbf1 	bl	8003940 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800615e:	4669      	mov	r1, sp
 8006160:	4836      	ldr	r0, [pc, #216]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006162:	f7fd fbc5 	bl	80038f0 <chHeapStatus>
 8006166:	1e46      	subs	r6, r0, #1
 8006168:	4271      	negs	r1, r6
 800616a:	4171      	adcs	r1, r6
 800616c:	2007      	movs	r0, #7
 800616e:	f7fd f8bf 	bl	80032f0 <_test_assert>
 8006172:	2800      	cmp	r0, #0
 8006174:	f47f af57 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006178:	2110      	movs	r1, #16
 800617a:	4830      	ldr	r0, [pc, #192]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 800617c:	f7fd fc28 	bl	80039d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006180:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006182:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006184:	482d      	ldr	r0, [pc, #180]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006186:	f7fd fc23 	bl	80039d0 <chHeapAlloc>
 800618a:	4604      	mov	r4, r0
  chHeapFree(p1);
 800618c:	4628      	mov	r0, r5
 800618e:	f7fd fbd7 	bl	8003940 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006192:	4669      	mov	r1, sp
 8006194:	4829      	ldr	r0, [pc, #164]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 8006196:	f7fd fbab 	bl	80038f0 <chHeapStatus>
 800619a:	1e85      	subs	r5, r0, #2
 800619c:	4269      	negs	r1, r5
 800619e:	4169      	adcs	r1, r5
 80061a0:	2008      	movs	r0, #8
 80061a2:	f7fd f8a5 	bl	80032f0 <_test_assert>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f47f af3d 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 80061ac:	2120      	movs	r1, #32
 80061ae:	4823      	ldr	r0, [pc, #140]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80061b0:	f7fd fc0e 	bl	80039d0 <chHeapAlloc>
  chHeapFree(p1);
 80061b4:	f7fd fbc4 	bl	8003940 <chHeapFree>
  chHeapFree(p2);
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7fd fbc1 	bl	8003940 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80061be:	4669      	mov	r1, sp
 80061c0:	481e      	ldr	r0, [pc, #120]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80061c2:	f7fd fb95 	bl	80038f0 <chHeapStatus>
 80061c6:	3801      	subs	r0, #1
 80061c8:	4241      	negs	r1, r0
 80061ca:	4141      	adcs	r1, r0
 80061cc:	2009      	movs	r0, #9
 80061ce:	f7fd f88f 	bl	80032f0 <_test_assert>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f47f af27 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 80061d8:	4669      	mov	r1, sp
 80061da:	4818      	ldr	r0, [pc, #96]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80061dc:	f7fd fb88 	bl	80038f0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 80061e0:	9900      	ldr	r1, [sp, #0]
 80061e2:	4816      	ldr	r0, [pc, #88]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80061e4:	f7fd fbf4 	bl	80039d0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80061e8:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 80061ea:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80061ec:	4813      	ldr	r0, [pc, #76]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 80061ee:	f7fd fb7f 	bl	80038f0 <chHeapStatus>
 80061f2:	fab0 f180 	clz	r1, r0
 80061f6:	200a      	movs	r0, #10
 80061f8:	0949      	lsrs	r1, r1, #5
 80061fa:	f7fd f879 	bl	80032f0 <_test_assert>
 80061fe:	2800      	cmp	r0, #0
 8006200:	f47f af11 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>
  chHeapFree(p1);
 8006204:	4620      	mov	r0, r4
 8006206:	f7fd fb9b 	bl	8003940 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800620a:	4669      	mov	r1, sp
 800620c:	480b      	ldr	r0, [pc, #44]	; (800623c <heap1_execute.lto_priv.125+0x23c>)
 800620e:	f7fd fb6f 	bl	80038f0 <chHeapStatus>
 8006212:	1e42      	subs	r2, r0, #1
 8006214:	4251      	negs	r1, r2
 8006216:	4151      	adcs	r1, r2
 8006218:	200b      	movs	r0, #11
 800621a:	f7fd f869 	bl	80032f0 <_test_assert>
 800621e:	2800      	cmp	r0, #0
 8006220:	f47f af01 	bne.w	8006026 <heap1_execute.lto_priv.125+0x26>
  test_assert(12, n == sz, "size changed");
 8006224:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006228:	1acb      	subs	r3, r1, r3
 800622a:	4259      	negs	r1, r3
 800622c:	4159      	adcs	r1, r3
 800622e:	200c      	movs	r0, #12
 8006230:	f7fd f85e 	bl	80032f0 <_test_assert>
 8006234:	e6f7      	b.n	8006026 <heap1_execute.lto_priv.125+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006236:	4601      	mov	r1, r0
 8006238:	e785      	b.n	8006146 <heap1_execute.lto_priv.125+0x146>
 800623a:	bf00      	nop
 800623c:	20002890 	.word	0x20002890

08006240 <evt3_execute.lto_priv.123>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8006240:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006242:	4c55      	ldr	r4, [pc, #340]	; (8006398 <evt3_execute.lto_priv.123+0x158>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8006244:	2320      	movs	r3, #32
 8006246:	69a2      	ldr	r2, [r4, #24]
 8006248:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800624c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800624e:	b93b      	cbnz	r3, 8006260 <evt3_execute.lto_priv.123+0x20>
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8006256:	2001      	movs	r0, #1
 8006258:	f7fd f84a 	bl	80032f0 <_test_assert>
 800625c:	b180      	cbz	r0, 8006280 <evt3_execute.lto_priv.123+0x40>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8006260:	4259      	negs	r1, r3
 8006262:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8006264:	ea23 0301 	bic.w	r3, r3, r1
 8006268:	6353      	str	r3, [r2, #52]	; 0x34
 800626a:	2300      	movs	r3, #0
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	fab1 f181 	clz	r1, r1
 8006274:	2001      	movs	r0, #1
 8006276:	0949      	lsrs	r1, r1, #5
 8006278:	f7fd f83a 	bl	80032f0 <_test_assert>
 800627c:	2800      	cmp	r0, #0
 800627e:	d1ee      	bne.n	800625e <evt3_execute.lto_priv.123+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006280:	69a3      	ldr	r3, [r4, #24]
 8006282:	2220      	movs	r2, #32
 8006284:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8006288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628a:	2a00      	cmp	r2, #0
 800628c:	d06f      	beq.n	800636e <evt3_execute.lto_priv.123+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 800628e:	6358      	str	r0, [r3, #52]	; 0x34
 8006290:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8006294:	4601      	mov	r1, r0
 8006296:	2002      	movs	r0, #2
 8006298:	f7fd f82a 	bl	80032f0 <_test_assert>
 800629c:	2800      	cmp	r0, #0
 800629e:	d1de      	bne.n	800625e <evt3_execute.lto_priv.123+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80062a0:	69a3      	ldr	r3, [r4, #24]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80062a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062aa:	3201      	adds	r2, #1
 80062ac:	d063      	beq.n	8006376 <evt3_execute.lto_priv.123+0x136>
 80062ae:	f380 8811 	msr	BASEPRI, r0
 80062b2:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 80062b4:	4601      	mov	r1, r0
 80062b6:	2003      	movs	r0, #3
 80062b8:	f7fd f81a 	bl	80032f0 <_test_assert>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1ce      	bne.n	800625e <evt3_execute.lto_priv.123+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80062c0:	69a6      	ldr	r6, [r4, #24]
 80062c2:	2320      	movs	r3, #32
 80062c4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80062c8:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80062ca:	b94d      	cbnz	r5, 80062e0 <evt3_execute.lto_priv.123+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80062d0:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80062d2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80062d4:	4601      	mov	r1, r0
 80062d6:	f7fa fdd3 	bl	8000e80 <chSchGoSleepTimeoutS>
 80062da:	2800      	cmp	r0, #0
 80062dc:	db4f      	blt.n	800637e <evt3_execute.lto_priv.123+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80062de:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 80062e0:	4269      	negs	r1, r5
 80062e2:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 80062e4:	ea25 0501 	bic.w	r5, r5, r1
 80062e8:	6375      	str	r5, [r6, #52]	; 0x34
 80062ea:	2300      	movs	r3, #0
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	fab1 f181 	clz	r1, r1
 80062f4:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 80062f6:	2004      	movs	r0, #4
 80062f8:	f7fc fffa 	bl	80032f0 <_test_assert>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d1ae      	bne.n	800625e <evt3_execute.lto_priv.123+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8006300:	69a6      	ldr	r6, [r4, #24]
 8006302:	2320      	movs	r3, #32
 8006304:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006308:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800630a:	b94d      	cbnz	r5, 8006320 <evt3_execute.lto_priv.123+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006310:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006312:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8006314:	4601      	mov	r1, r0
 8006316:	f7fa fdb3 	bl	8000e80 <chSchGoSleepTimeoutS>
 800631a:	2800      	cmp	r0, #0
 800631c:	db33      	blt.n	8006386 <evt3_execute.lto_priv.123+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800631e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8006320:	2300      	movs	r3, #0
 8006322:	6373      	str	r3, [r6, #52]	; 0x34
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	fab5 f185 	clz	r1, r5
 800632c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800632e:	2005      	movs	r0, #5
 8006330:	f7fc ffde 	bl	80032f0 <_test_assert>
 8006334:	4605      	mov	r5, r0
 8006336:	2800      	cmp	r0, #0
 8006338:	d191      	bne.n	800625e <evt3_execute.lto_priv.123+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800633a:	69a4      	ldr	r4, [r4, #24]
 800633c:	2320      	movs	r3, #32
 800633e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8006342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006344:	3301      	adds	r3, #1
 8006346:	d008      	beq.n	800635a <evt3_execute.lto_priv.123+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800634e:	200b      	movs	r0, #11
 8006350:	210a      	movs	r1, #10
 8006352:	f7fa fd95 	bl	8000e80 <chSchGoSleepTimeoutS>
 8006356:	2800      	cmp	r0, #0
 8006358:	db19      	blt.n	800638e <evt3_execute.lto_priv.123+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800635a:	2300      	movs	r3, #0
 800635c:	6363      	str	r3, [r4, #52]	; 0x34
 800635e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006362:	4629      	mov	r1, r5
}
 8006364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8006368:	2006      	movs	r0, #6
 800636a:	f7fc bfc1 	b.w	80032f0 <_test_assert>
 800636e:	f380 8811 	msr	BASEPRI, r0
 8006372:	2001      	movs	r0, #1
 8006374:	e78e      	b.n	8006294 <evt3_execute.lto_priv.123+0x54>
 8006376:	6358      	str	r0, [r3, #52]	; 0x34
 8006378:	f380 8811 	msr	BASEPRI, r0
 800637c:	e79a      	b.n	80062b4 <evt3_execute.lto_priv.123+0x74>
 800637e:	f385 8811 	msr	BASEPRI, r5
 8006382:	2101      	movs	r1, #1
 8006384:	e7b7      	b.n	80062f6 <evt3_execute.lto_priv.123+0xb6>
 8006386:	f385 8811 	msr	BASEPRI, r5
 800638a:	2101      	movs	r1, #1
 800638c:	e7cf      	b.n	800632e <evt3_execute.lto_priv.123+0xee>
 800638e:	f385 8811 	msr	BASEPRI, r5
 8006392:	2501      	movs	r5, #1
 8006394:	e7e5      	b.n	8006362 <evt3_execute.lto_priv.123+0x122>
 8006396:	bf00      	nop
 8006398:	20002e30 	.word	0x20002e30
 800639c:	00000000 	.word	0x00000000

080063a0 <evt3_setup.lto_priv.122>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80063a0:	f000 bbde 	b.w	8006b60 <chEvtGetAndClearEvents.constprop.35>
	...

080063b0 <evt2_setup.lto_priv.120>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80063b0:	f000 bbd6 	b.w	8006b60 <chEvtGetAndClearEvents.constprop.35>
	...

080063c0 <evt1_setup.lto_priv.118>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80063c0:	f000 bbce 	b.w	8006b60 <chEvtGetAndClearEvents.constprop.35>
	...

080063d0 <evt2_execute.lto_priv.121>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	2520      	movs	r5, #32
 80063d6:	b08d      	sub	sp, #52	; 0x34
 80063d8:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 80063dc:	4cad      	ldr	r4, [pc, #692]	; (8006694 <evt2_execute.lto_priv.121+0x2c4>)
 80063de:	2100      	movs	r1, #0
 80063e0:	69a2      	ldr	r2, [r4, #24]
 80063e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	6353      	str	r3, [r2, #52]	; 0x34
 80063ea:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 80063ee:	f000 fbc7 	bl	8006b80 <chEvtWaitOne.constprop.31>
  test_assert(1, m == 1, "single event error");
 80063f2:	f1a0 0101 	sub.w	r1, r0, #1
 80063f6:	fab1 f181 	clz	r1, r1
 80063fa:	2001      	movs	r0, #1
 80063fc:	0949      	lsrs	r1, r1, #5
 80063fe:	f7fc ff77 	bl	80032f0 <_test_assert>
 8006402:	b110      	cbz	r0, 800640a <evt2_execute.lto_priv.121+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8006404:	b00d      	add	sp, #52	; 0x34
 8006406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800640a:	f000 fbb9 	bl	8006b80 <chEvtWaitOne.constprop.31>
  test_assert(2, m == 2, "single event error");
 800640e:	f1a0 0102 	sub.w	r1, r0, #2
 8006412:	fab1 f181 	clz	r1, r1
 8006416:	2002      	movs	r0, #2
 8006418:	0949      	lsrs	r1, r1, #5
 800641a:	f7fc ff69 	bl	80032f0 <_test_assert>
 800641e:	2800      	cmp	r0, #0
 8006420:	d1f0      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8006422:	f000 fbad 	bl	8006b80 <chEvtWaitOne.constprop.31>
  test_assert(3, m == 4, "single event error");
 8006426:	f1a0 0104 	sub.w	r1, r0, #4
 800642a:	fab1 f181 	clz	r1, r1
 800642e:	2003      	movs	r0, #3
 8006430:	0949      	lsrs	r1, r1, #5
 8006432:	f7fc ff5d 	bl	80032f0 <_test_assert>
 8006436:	2800      	cmp	r0, #0
 8006438:	d1e4      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800643a:	f000 fb91 	bl	8006b60 <chEvtGetAndClearEvents.constprop.35>
  test_assert(4, m == 0, "stuck event");
 800643e:	fab0 f180 	clz	r1, r0
 8006442:	2004      	movs	r0, #4
 8006444:	0949      	lsrs	r1, r1, #5
 8006446:	f7fc ff53 	bl	80032f0 <_test_assert>
 800644a:	4606      	mov	r6, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	d1d9      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8006450:	f7fc febe 	bl	80031d0 <test_wait_tick>
 8006454:	f385 8811 	msr	BASEPRI, r5
 8006458:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800645c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8006460:	b2bf      	uxth	r7, r7
 8006462:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006466:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006468:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	488a      	ldr	r0, [pc, #552]	; (8006698 <evt2_execute.lto_priv.121+0x2c8>)
 8006470:	3a01      	subs	r2, #1
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4b89      	ldr	r3, [pc, #548]	; (800669c <evt2_execute.lto_priv.121+0x2cc>)
 8006476:	f7fa f9cb 	bl	8000810 <chThdCreateStatic>
 800647a:	4e89      	ldr	r6, [pc, #548]	; (80066a0 <evt2_execute.lto_priv.121+0x2d0>)
 800647c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800647e:	f000 fb7f 	bl	8006b80 <chEvtWaitOne.constprop.31>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006482:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8006486:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800648a:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 800648c:	b289      	uxth	r1, r1
 800648e:	b292      	uxth	r2, r2
 8006490:	2005      	movs	r0, #5
 8006492:	f7fc fedd 	bl	8003250 <_test_assert_time_window>
 8006496:	2800      	cmp	r0, #0
 8006498:	d1b4      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  test_assert(6, m == 1, "single event error");
 800649a:	f1a9 0101 	sub.w	r1, r9, #1
 800649e:	fab1 f181 	clz	r1, r1
 80064a2:	2006      	movs	r0, #6
 80064a4:	0949      	lsrs	r1, r1, #5
 80064a6:	f7fc ff23 	bl	80032f0 <_test_assert>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d1aa      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80064ae:	f000 fb57 	bl	8006b60 <chEvtGetAndClearEvents.constprop.35>
  test_assert(7, m == 0, "stuck event");
 80064b2:	fab0 f180 	clz	r1, r0
 80064b6:	2007      	movs	r0, #7
 80064b8:	0949      	lsrs	r1, r1, #5
 80064ba:	f7fc ff19 	bl	80032f0 <_test_assert>
 80064be:	4607      	mov	r7, r0
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d19f      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  test_wait_threads();
 80064c4:	f7fc fe94 	bl	80031f0 <test_wait_threads>
 80064c8:	f385 8811 	msr	BASEPRI, r5
 80064cc:	69a2      	ldr	r2, [r4, #24]
 80064ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80064d0:	f043 0305 	orr.w	r3, r3, #5
 80064d4:	6353      	str	r3, [r2, #52]	; 0x34
 80064d6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80064da:	f000 fb71 	bl	8006bc0 <chEvtWaitAny.constprop.30>
  test_assert(8, m == 5, "unexpected pending bit");
 80064de:	1f47      	subs	r7, r0, #5
 80064e0:	4279      	negs	r1, r7
 80064e2:	4179      	adcs	r1, r7
 80064e4:	2008      	movs	r0, #8
 80064e6:	f7fc ff03 	bl	80032f0 <_test_assert>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d18a      	bne.n	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80064ee:	f000 fb37 	bl	8006b60 <chEvtGetAndClearEvents.constprop.35>
  test_assert(9, m == 0, "stuck event");
 80064f2:	fab0 f180 	clz	r1, r0
 80064f6:	2009      	movs	r0, #9
 80064f8:	0949      	lsrs	r1, r1, #5
 80064fa:	f7fc fef9 	bl	80032f0 <_test_assert>
 80064fe:	4607      	mov	r7, r0
 8006500:	2800      	cmp	r0, #0
 8006502:	f47f af7f 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8006506:	f7fc fe63 	bl	80031d0 <test_wait_tick>
 800650a:	f385 8811 	msr	BASEPRI, r5
 800650e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8006512:	b2ad      	uxth	r5, r5
 8006514:	f387 8811 	msr	BASEPRI, r7
 8006518:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800651a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	485d      	ldr	r0, [pc, #372]	; (8006698 <evt2_execute.lto_priv.121+0x2c8>)
 8006522:	3a01      	subs	r2, #1
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4b5d      	ldr	r3, [pc, #372]	; (800669c <evt2_execute.lto_priv.121+0x2cc>)
 8006528:	f7fa f972 	bl	8000810 <chThdCreateStatic>
 800652c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800652e:	f000 fb47 	bl	8006bc0 <chEvtWaitAny.constprop.30>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8006532:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8006536:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800653a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800653c:	b289      	uxth	r1, r1
 800653e:	b292      	uxth	r2, r2
 8006540:	200a      	movs	r0, #10
 8006542:	f7fc fe85 	bl	8003250 <_test_assert_time_window>
 8006546:	2800      	cmp	r0, #0
 8006548:	f47f af5c 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  test_assert(11, m == 1, "single event error");
 800654c:	1e78      	subs	r0, r7, #1
 800654e:	4241      	negs	r1, r0
 8006550:	4141      	adcs	r1, r0
 8006552:	200b      	movs	r0, #11
 8006554:	f7fc fecc 	bl	80032f0 <_test_assert>
 8006558:	2800      	cmp	r0, #0
 800655a:	f47f af53 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800655e:	f000 faff 	bl	8006b60 <chEvtGetAndClearEvents.constprop.35>
  test_assert(12, m == 0, "stuck event");
 8006562:	fab0 f180 	clz	r1, r0
 8006566:	200c      	movs	r0, #12
 8006568:	0949      	lsrs	r1, r1, #5
 800656a:	f7fc fec1 	bl	80032f0 <_test_assert>
 800656e:	4680      	mov	r8, r0
 8006570:	2800      	cmp	r0, #0
 8006572:	f47f af47 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  test_wait_threads();
 8006576:	f7fc fe3b 	bl	80031f0 <test_wait_threads>
 800657a:	4d4a      	ldr	r5, [pc, #296]	; (80066a4 <evt2_execute.lto_priv.121+0x2d4>)
 800657c:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <evt2_execute.lto_priv.121+0x2d8>)
 800657e:	602d      	str	r5, [r5, #0]
 8006580:	601b      	str	r3, [r3, #0]
 8006582:	f04f 0b20 	mov.w	fp, #32
 8006586:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800658a:	6829      	ldr	r1, [r5, #0]
 800658c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006590:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8006592:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006594:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800659c:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80065a0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 80065a2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80065a4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 80065a8:	9006      	str	r0, [sp, #24]
 80065aa:	f388 8811 	msr	BASEPRI, r8
 80065ae:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80065b8:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80065ba:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80065bc:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80065c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 80065c4:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80065c6:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 80065c8:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80065ca:	f8c3 9000 	str.w	r9, [r3]
 80065ce:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 80065d2:	f7fc fdfd 	bl	80031d0 <test_wait_tick>
 80065d6:	f38b 8811 	msr	BASEPRI, fp
 80065da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065de:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80065e0:	b2bf      	uxth	r7, r7
 80065e2:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80065e6:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80065e8:	4b30      	ldr	r3, [pc, #192]	; (80066ac <evt2_execute.lto_priv.121+0x2dc>)
 80065ea:	6892      	ldr	r2, [r2, #8]
 80065ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	3a01      	subs	r2, #1
 80065f4:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <evt2_execute.lto_priv.121+0x2e0>)
 80065f6:	4828      	ldr	r0, [pc, #160]	; (8006698 <evt2_execute.lto_priv.121+0x2c8>)
 80065f8:	f7fa f90a 	bl	8000810 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80065fc:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8006600:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8006604:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006606:	6030      	str	r0, [r6, #0]
 8006608:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 800660c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800660e:	f003 0205 	and.w	r2, r3, #5
 8006612:	2a05      	cmp	r2, #5
 8006614:	d005      	beq.n	8006622 <evt2_execute.lto_priv.121+0x252>
    ctp->p_u.ewmask = events;
 8006616:	2305      	movs	r3, #5
 8006618:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800661a:	200b      	movs	r0, #11
 800661c:	f7fa f938 	bl	8000890 <chSchGoSleepS>
 8006620:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8006622:	f023 0305 	bic.w	r3, r3, #5
 8006626:	6363      	str	r3, [r4, #52]	; 0x34
 8006628:	2300      	movs	r3, #0
 800662a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 800662e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8006632:	b292      	uxth	r2, r2
 8006634:	4641      	mov	r1, r8
 8006636:	200d      	movs	r0, #13
 8006638:	f7fc fe0a 	bl	8003250 <_test_assert_time_window>
 800663c:	2800      	cmp	r0, #0
 800663e:	f47f aee1 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006642:	f000 fa8d 	bl	8006b60 <chEvtGetAndClearEvents.constprop.35>
  test_assert(14, m == 0, "stuck event");
 8006646:	fab0 f180 	clz	r1, r0
 800664a:	200e      	movs	r0, #14
 800664c:	0949      	lsrs	r1, r1, #5
 800664e:	f7fc fe4f 	bl	80032f0 <_test_assert>
 8006652:	2800      	cmp	r0, #0
 8006654:	f47f aed6 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8006658:	4c13      	ldr	r4, [pc, #76]	; (80066a8 <evt2_execute.lto_priv.121+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 800665a:	f7fc fdc9 	bl	80031f0 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800665e:	4651      	mov	r1, sl
 8006660:	4810      	ldr	r0, [pc, #64]	; (80066a4 <evt2_execute.lto_priv.121+0x2d4>)
 8006662:	f7f9 ff3d 	bl	80004e0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8006666:	4649      	mov	r1, r9
 8006668:	4620      	mov	r0, r4
 800666a:	f7f9 ff39 	bl	80004e0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800666e:	6829      	ldr	r1, [r5, #0]
 8006670:	200f      	movs	r0, #15
 8006672:	1b4a      	subs	r2, r1, r5
 8006674:	4251      	negs	r1, r2
 8006676:	4151      	adcs	r1, r2
 8006678:	f7fc fe3a 	bl	80032f0 <_test_assert>
 800667c:	2800      	cmp	r0, #0
 800667e:	f47f aec1 	bne.w	8006404 <evt2_execute.lto_priv.121+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	2010      	movs	r0, #16
 8006686:	1b0b      	subs	r3, r1, r4
 8006688:	4259      	negs	r1, r3
 800668a:	4159      	adcs	r1, r3
 800668c:	f7fc fe30 	bl	80032f0 <_test_assert>
 8006690:	e6b8      	b.n	8006404 <evt2_execute.lto_priv.121+0x34>
 8006692:	bf00      	nop
 8006694:	20002e30 	.word	0x20002e30
 8006698:	20002fa8 	.word	0x20002fa8
 800669c:	08006701 	.word	0x08006701
 80066a0:	20000ec0 	.word	0x20000ec0
 80066a4:	200009dc 	.word	0x200009dc
 80066a8:	200009e0 	.word	0x200009e0
 80066ac:	08007144 	.word	0x08007144
 80066b0:	080066c1 	.word	0x080066c1
	...

080066c0 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	2520      	movs	r5, #32
 80066c4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80066c8:	480b      	ldr	r0, [pc, #44]	; (80066f8 <thread2+0x38>)
 80066ca:	2100      	movs	r1, #0
 80066cc:	f7fa f9e0 	bl	8000a90 <chEvtBroadcastFlagsI>
 80066d0:	2400      	movs	r4, #0
  chSchRescheduleS();
 80066d2:	f7f9 ffdd 	bl	8000690 <chSchRescheduleS>
 80066d6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80066da:	2064      	movs	r0, #100	; 0x64
 80066dc:	f7fa fd00 	bl	80010e0 <chThdSleep>
 80066e0:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80066e4:	4805      	ldr	r0, [pc, #20]	; (80066fc <thread2+0x3c>)
 80066e6:	4621      	mov	r1, r4
 80066e8:	f7fa f9d2 	bl	8000a90 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80066ec:	f7f9 ffd0 	bl	8000690 <chSchRescheduleS>
 80066f0:	f384 8811 	msr	BASEPRI, r4
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	200009dc 	.word	0x200009dc
 80066fc:	200009e0 	.word	0x200009e0

08006700 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8006700:	b510      	push	{r4, lr}
 8006702:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8006704:	2064      	movs	r0, #100	; 0x64
 8006706:	f7fa fceb 	bl	80010e0 <chThdSleep>
 800670a:	2320      	movs	r3, #32
 800670c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8006710:	2101      	movs	r1, #1
 8006712:	4620      	mov	r0, r4
 8006714:	f7fa f9a4 	bl	8000a60 <chEvtSignalI>
  chSchRescheduleS();
 8006718:	f7f9 ffba 	bl	8000690 <chSchRescheduleS>
 800671c:	2300      	movs	r3, #0
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	bd10      	pop	{r4, pc}
	...

08006730 <evt1_execute.lto_priv.119>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	4c32      	ldr	r4, [pc, #200]	; (8006800 <evt1_execute.lto_priv.119+0xd0>)
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	2020      	movs	r0, #32
 800673a:	6024      	str	r4, [r4, #0]
 800673c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006740:	4930      	ldr	r1, [pc, #192]	; (8006804 <evt1_execute.lto_priv.119+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006746:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006748:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800674c:	2701      	movs	r7, #1
  elp->el_flags    = (eventflags_t)0;
 800674e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006754:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8006756:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8006758:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 800675a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800675c:	9204      	str	r2, [sp, #16]
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8006766:	6820      	ldr	r0, [r4, #0]
 8006768:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800676a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800676c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8006770:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8006774:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8006776:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8006778:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800677a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800677c:	f8cd 801c 	str.w	r8, [sp, #28]
 8006780:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 8006784:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8006786:	4638      	mov	r0, r7
 8006788:	1b09      	subs	r1, r1, r4
 800678a:	bf18      	it	ne
 800678c:	2101      	movne	r1, #1
 800678e:	f7fc fdaf 	bl	80032f0 <_test_assert>
 8006792:	b110      	cbz	r0, 800679a <evt1_execute.lto_priv.119+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8006794:	b00a      	add	sp, #40	; 0x28
 8006796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800679a:	4629      	mov	r1, r5
 800679c:	4620      	mov	r0, r4
 800679e:	f7f9 fe9f 	bl	80004e0 <chEvtUnregister>
 80067a2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80067a4:	4640      	mov	r0, r8
 80067a6:	1b09      	subs	r1, r1, r4
 80067a8:	bf18      	it	ne
 80067aa:	2101      	movne	r1, #1
 80067ac:	f7fc fda0 	bl	80032f0 <_test_assert>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d1ef      	bne.n	8006794 <evt1_execute.lto_priv.119+0x64>
  chEvtUnregister(&es1, &el2);
 80067b4:	4631      	mov	r1, r6
 80067b6:	4620      	mov	r0, r4
 80067b8:	f7f9 fe92 	bl	80004e0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	2003      	movs	r0, #3
 80067c0:	1b09      	subs	r1, r1, r4
 80067c2:	fab1 f181 	clz	r1, r1
 80067c6:	0949      	lsrs	r1, r1, #5
 80067c8:	f7fc fd92 	bl	80032f0 <_test_assert>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1e1      	bne.n	8006794 <evt1_execute.lto_priv.119+0x64>
 80067d0:	4604      	mov	r4, r0
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80067d2:	4e0d      	ldr	r6, [pc, #52]	; (8006808 <evt1_execute.lto_priv.119+0xd8>)
 80067d4:	2507      	movs	r5, #7
 80067d6:	e001      	b.n	80067dc <evt1_execute.lto_priv.119+0xac>
    }
    eid++;
 80067d8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 80067da:	b165      	cbz	r5, 80067f6 <evt1_execute.lto_priv.119+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80067dc:	fa25 f304 	lsr.w	r3, r5, r4
 80067e0:	07db      	lsls	r3, r3, #31
 80067e2:	d5f9      	bpl.n	80067d8 <evt1_execute.lto_priv.119+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80067e4:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 80067e8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80067ec:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80067ee:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80067f2:	4790      	blx	r2
 80067f4:	e7f0      	b.n	80067d8 <evt1_execute.lto_priv.119+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80067f6:	4905      	ldr	r1, [pc, #20]	; (800680c <evt1_execute.lto_priv.119+0xdc>)
 80067f8:	2004      	movs	r0, #4
 80067fa:	f7fc fd51 	bl	80032a0 <_test_assert_sequence>
 80067fe:	e7c9      	b.n	8006794 <evt1_execute.lto_priv.119+0x64>
 8006800:	200009dc 	.word	0x200009dc
 8006804:	20002e30 	.word	0x20002e30
 8006808:	080081b0 	.word	0x080081b0
 800680c:	08007db0 	.word	0x08007db0

08006810 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8006810:	2043      	movs	r0, #67	; 0x43
 8006812:	f7fc bd85 	b.w	8003320 <test_emit_token>
 8006816:	bf00      	nop
	...

08006820 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8006820:	2042      	movs	r0, #66	; 0x42
 8006822:	f7fc bd7d 	b.w	8003320 <test_emit_token>
 8006826:	bf00      	nop
	...

08006830 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8006830:	2041      	movs	r0, #65	; 0x41
 8006832:	f7fc bd75 	b.w	8003320 <test_emit_token>
 8006836:	bf00      	nop
	...

08006840 <Receive.lto_priv.68>:
static THD_FUNCTION(Receive, arg) {

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 8006840:	2520      	movs	r5, #32
 8006842:	462e      	mov	r6, r5

/*
 * Receive from the WiFi and send to the RS232
 */
static THD_WORKING_AREA(waReceive, 128);
static THD_FUNCTION(Receive, arg) {
 8006844:	b500      	push	{lr}

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 8006846:	4c0a      	ldr	r4, [pc, #40]	; (8006870 <Receive.lto_priv.68+0x30>)

/*
 * Receive from the WiFi and send to the RS232
 */
static THD_WORKING_AREA(waReceive, 128);
static THD_FUNCTION(Receive, arg) {
 8006848:	b083      	sub	sp, #12
  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
      char c;
      sdRead(&SD1, &c, 1);
 800684a:	f10d 0107 	add.w	r1, sp, #7
static THD_FUNCTION(Receive, arg) {

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 800684e:	6166      	str	r6, [r4, #20]
      char c;
      sdRead(&SD1, &c, 1);
 8006850:	2201      	movs	r2, #1
 8006852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006856:	4807      	ldr	r0, [pc, #28]	; (8006874 <Receive.lto_priv.68+0x34>)
 8006858:	f7fa fbc2 	bl	8000fe0 <chIQReadTimeout>
      palSetPad(GPIOB, GPIOB_LED1);
 800685c:	6125      	str	r5, [r4, #16]
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 800685e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006866:	4804      	ldr	r0, [pc, #16]	; (8006878 <Receive.lto_priv.68+0x38>)
 8006868:	f7fd fa32 	bl	8003cd0 <chOQPutTimeout>
 800686c:	e7ed      	b.n	800684a <Receive.lto_priv.68+0xa>
 800686e:	bf00      	nop
 8006870:	40010c00 	.word	0x40010c00
 8006874:	200028d8 	.word	0x200028d8
 8006878:	20002bac 	.word	0x20002bac
 800687c:	00000000 	.word	0x00000000

08006880 <Send.lto_priv.67>:
static THD_FUNCTION(Send, arg) {

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 8006880:	2520      	movs	r5, #32
 8006882:	462e      	mov	r6, r5

/*
 * Receive from the RS232 and send to the WiFi
 */
static THD_WORKING_AREA(waSend, 128);
static THD_FUNCTION(Send, arg) {
 8006884:	b500      	push	{lr}

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 8006886:	4c0a      	ldr	r4, [pc, #40]	; (80068b0 <Send.lto_priv.67+0x30>)

/*
 * Receive from the RS232 and send to the WiFi
 */
static THD_WORKING_AREA(waSend, 128);
static THD_FUNCTION(Send, arg) {
 8006888:	b083      	sub	sp, #12
  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
      char c;
      sdRead(&SD2, &c, 1);
 800688a:	f10d 0107 	add.w	r1, sp, #7
static THD_FUNCTION(Send, arg) {

  (void) arg; // Unused parameter
  while (1)
  {
      palClearPad(GPIOB, GPIOB_LED1);
 800688e:	6166      	str	r6, [r4, #20]
      char c;
      sdRead(&SD2, &c, 1);
 8006890:	2201      	movs	r2, #1
 8006892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006896:	4807      	ldr	r0, [pc, #28]	; (80068b4 <Send.lto_priv.67+0x34>)
 8006898:	f7fa fba2 	bl	8000fe0 <chIQReadTimeout>
      palSetPad(GPIOB, GPIOB_LED1);
 800689c:	6125      	str	r5, [r4, #16]
 800689e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80068a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068a6:	4804      	ldr	r0, [pc, #16]	; (80068b8 <Send.lto_priv.67+0x38>)
 80068a8:	f7fd fa12 	bl	8003cd0 <chOQPutTimeout>
 80068ac:	e7ed      	b.n	800688a <Send.lto_priv.67+0xa>
 80068ae:	bf00      	nop
 80068b0:	40010c00 	.word	0x40010c00
 80068b4:	20002b88 	.word	0x20002b88
 80068b8:	200028fc 	.word	0x200028fc
 80068bc:	00000000 	.word	0x00000000

080068c0 <cmd_test.lto_priv.74>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80068c0:	2900      	cmp	r1, #0
 80068c2:	dd02      	ble.n	80068ca <cmd_test.lto_priv.74+0xa>
    chprintf(chp, "Usage: test\r\n");
 80068c4:	490e      	ldr	r1, [pc, #56]	; (8006900 <cmd_test.lto_priv.74+0x40>)
 80068c6:	f7fc b9c3 	b.w	8002c50 <chprintf>
             states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <cmd_test.lto_priv.74+0x44>)
 80068d0:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80068d2:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 80068d4:	2000      	movs	r0, #0
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <cmd_test.lto_priv.74+0x48>)
 80068de:	9400      	str	r4, [sp, #0]
 80068e0:	f7f9 ff4e 	bl	8000780 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 80068e4:	b120      	cbz	r0, 80068f0 <cmd_test.lto_priv.74+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 80068e6:	b002      	add	sp, #8
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 80068ec:	f7fa b830 	b.w	8000950 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80068f0:	4620      	mov	r0, r4
 80068f2:	4906      	ldr	r1, [pc, #24]	; (800690c <cmd_test.lto_priv.74+0x4c>)
    return;
  }
  chThdWait(tp);
}
 80068f4:	b002      	add	sp, #8
 80068f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80068fa:	f7fc b9a9 	b.w	8002c50 <chprintf>
 80068fe:	bf00      	nop
 8006900:	08008200 	.word	0x08008200
 8006904:	20002e30 	.word	0x20002e30
 8006908:	08003411 	.word	0x08003411
 800690c:	08008210 	.word	0x08008210

08006910 <cmd_threads.lto_priv.73>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8006910:	2900      	cmp	r1, #0
 8006912:	dd02      	ble.n	800691a <cmd_threads.lto_priv.73+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8006914:	4915      	ldr	r1, [pc, #84]	; (800696c <cmd_threads.lto_priv.73+0x5c>)
 8006916:	f7fc b99b 	b.w	8002c50 <chprintf>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800691a:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 800691c:	4914      	ldr	r1, [pc, #80]	; (8006970 <cmd_threads.lto_priv.73+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800691e:	b084      	sub	sp, #16
 8006920:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8006922:	f7fc f995 	bl	8002c50 <chprintf>
 8006926:	2320      	movs	r3, #32
 8006928:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <cmd_threads.lto_priv.73+0x64>)
 800692e:	2200      	movs	r2, #0
 8006930:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8006932:	7fa3      	ldrb	r3, [r4, #30]
 8006934:	3301      	adds	r3, #1
 8006936:	77a3      	strb	r3, [r4, #30]
 8006938:	f382 8811 	msr	BASEPRI, r2
 800693c:	4e0e      	ldr	r6, [pc, #56]	; (8006978 <cmd_threads.lto_priv.73+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800693e:	68a2      	ldr	r2, [r4, #8]
 8006940:	68e3      	ldr	r3, [r4, #12]
 8006942:	9200      	str	r2, [sp, #0]
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006944:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 8006946:	490d      	ldr	r1, [pc, #52]	; (800697c <cmd_threads.lto_priv.73+0x6c>)
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006948:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s %lu\r\n",
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	7f22      	ldrb	r2, [r4, #28]
 800694e:	4628      	mov	r0, r5
 8006950:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006954:	9202      	str	r2, [sp, #8]
 8006956:	4622      	mov	r2, r4
 8006958:	f7fc f97a 	bl	8002c50 <chprintf>
             (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
             (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
             states[tp->p_state]);
    tp = chRegNextThread(tp);
 800695c:	4620      	mov	r0, r4
 800695e:	f7f9 fe1f 	bl	80005a0 <chRegNextThread>
  } while (tp != NULL);
 8006962:	4604      	mov	r4, r0
 8006964:	2800      	cmp	r0, #0
 8006966:	d1ea      	bne.n	800693e <cmd_threads.lto_priv.73+0x2e>
}
 8006968:	b004      	add	sp, #16
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	08008220 	.word	0x08008220
 8006970:	08008234 	.word	0x08008234
 8006974:	20002e30 	.word	0x20002e30
 8006978:	080081c0 	.word	0x080081c0
 800697c:	0800825c 	.word	0x0800825c

08006980 <cmd_mem.lto_priv.72>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006980:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006982:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006984:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006986:	dd04      	ble.n	8006992 <cmd_mem.lto_priv.72+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8006988:	490f      	ldr	r1, [pc, #60]	; (80069c8 <cmd_mem.lto_priv.72+0x48>)
 800698a:	f7fc f961 	bl	8002c50 <chprintf>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 800698e:	b003      	add	sp, #12
 8006990:	bd30      	pop	{r4, r5, pc}
 8006992:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8006994:	a901      	add	r1, sp, #4
 8006996:	2000      	movs	r0, #0
 8006998:	f7fc ffaa 	bl	80038f0 <chHeapStatus>
 800699c:	4605      	mov	r5, r0
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
 800699e:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <cmd_mem.lto_priv.72+0x4c>)
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <cmd_mem.lto_priv.72+0x50>)
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 80069a6:	4620      	mov	r0, r4
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	490a      	ldr	r1, [pc, #40]	; (80069d4 <cmd_mem.lto_priv.72+0x54>)
 80069ac:	f7fc f950 	bl	8002c50 <chprintf>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 80069b0:	462a      	mov	r2, r5
 80069b2:	4620      	mov	r0, r4
 80069b4:	4908      	ldr	r1, [pc, #32]	; (80069d8 <cmd_mem.lto_priv.72+0x58>)
 80069b6:	f7fc f94b 	bl	8002c50 <chprintf>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 80069ba:	4620      	mov	r0, r4
 80069bc:	4907      	ldr	r1, [pc, #28]	; (80069dc <cmd_mem.lto_priv.72+0x5c>)
 80069be:	9a01      	ldr	r2, [sp, #4]
 80069c0:	f7fc f946 	bl	8002c50 <chprintf>
}
 80069c4:	b003      	add	sp, #12
 80069c6:	bd30      	pop	{r4, r5, pc}
 80069c8:	0800827c 	.word	0x0800827c
 80069cc:	20002fa4 	.word	0x20002fa4
 80069d0:	20002fa0 	.word	0x20002fa0
 80069d4:	0800828c 	.word	0x0800828c
 80069d8:	080082ac 	.word	0x080082ac
 80069dc:	080082c4 	.word	0x080082c4

080069e0 <chTMStartMeasurementX.constprop.53>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80069e0:	4b01      	ldr	r3, [pc, #4]	; (80069e8 <chTMStartMeasurementX.constprop.53+0x8>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80069e4:	6083      	str	r3, [r0, #8]
 80069e6:	4770      	bx	lr
 80069e8:	e0001000 	.word	0xe0001000
 80069ec:	00000000 	.word	0x00000000

080069f0 <chThdCreateFromMemoryPool.constprop.50>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069f4:	4e21      	ldr	r6, [pc, #132]	; (8006a7c <chThdCreateFromMemoryPool.constprop.50+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069f6:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069f8:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 80069fa:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80069fc:	f7fc ff60 	bl	80038c0 <chPoolAlloc>
  if (wsp == NULL) {
 8006a00:	4604      	mov	r4, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d037      	beq.n	8006a76 <chThdCreateFromMemoryPool.constprop.50+0x86>
 8006a06:	2320      	movs	r3, #32
 8006a08:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a0c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <chThdCreateFromMemoryPool.constprop.50+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a10:	3b24      	subs	r3, #36	; 0x24
 8006a12:	4d1c      	ldr	r5, [pc, #112]	; (8006a84 <chThdCreateFromMemoryPool.constprop.50+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006a14:	f8d2 a014 	ldr.w	sl, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a18:	eb00 0e03 	add.w	lr, r0, r3
 8006a1c:	491a      	ldr	r1, [pc, #104]	; (8006a88 <chThdCreateFromMemoryPool.constprop.50+0x98>)
 8006a1e:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006a22:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a26:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8006a28:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006a2c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8006a2e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006a32:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006a36:	f8ce 9004 	str.w	r9, [lr, #4]
 8006a3a:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006a3e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006a42:	6102      	str	r2, [r0, #16]
 8006a44:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8006a48:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006a4c:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006a50:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006a54:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8006a56:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006a58:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8006a5a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8006a5c:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006a60:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8006a62:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8006a66:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006a68:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8006a6a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006a6c:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8006a6e:	f7f9 fe37 	bl	80006e0 <chSchWakeupS>
 8006a72:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8006a76:	4620      	mov	r0, r4
 8006a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	20002f94 	.word	0x20002f94
 8006a80:	20002e30 	.word	0x20002e30
 8006a84:	08003f41 	.word	0x08003f41
 8006a88:	08000241 	.word	0x08000241
 8006a8c:	00000000 	.word	0x00000000

08006a90 <chSemSignalWait.constprop.46>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8006a90:	b510      	push	{r4, lr}
 8006a92:	2320      	movs	r3, #32
 8006a94:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8006a98:	4c15      	ldr	r4, [pc, #84]	; (8006af0 <chSemSignalWait.constprop.46+0x60>)
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	dd1b      	ble.n	8006adc <chSemSignalWait.constprop.46+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	4a11      	ldr	r2, [pc, #68]	; (8006af0 <chSemSignalWait.constprop.46+0x60>)
 8006aac:	db06      	blt.n	8006abc <chSemSignalWait.constprop.46+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8006aae:	f7f9 fdef 	bl	8000690 <chSchRescheduleS>
    msg = MSG_OK;
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8006aba:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8006abc:	490d      	ldr	r1, [pc, #52]	; (8006af4 <chSemSignalWait.constprop.46+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006abe:	6853      	ldr	r3, [r2, #4]
 8006ac0:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8006ac2:	2005      	movs	r0, #5
 8006ac4:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8006ac8:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 8006aca:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 8006acc:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8006ace:	f7f9 fedf 	bl	8000890 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8006ad2:	6a20      	ldr	r0, [r4, #32]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8006ada:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006adc:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 8006ade:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006ae0:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006ae2:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8006ae4:	f7f9 ff54 	bl	8000990 <chSchReadyI>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	6202      	str	r2, [r0, #32]
 8006aee:	e7d9      	b.n	8006aa4 <chSemSignalWait.constprop.46+0x14>
 8006af0:	20000a14 	.word	0x20000a14
 8006af4:	20002e30 	.word	0x20002e30
	...

08006b00 <chCondSignal.constprop.44>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8006b00:	b508      	push	{r3, lr}
 8006b02:	2320      	movs	r3, #32
 8006b04:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <chCondSignal.constprop.44+0x24>)
 8006b0a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	d005      	beq.n	8006b1c <chCondSignal.constprop.44+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b10:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8006b12:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006b14:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f7f9 fde2 	bl	80006e0 <chSchWakeupS>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	bd08      	pop	{r3, pc}
 8006b24:	20000a0c 	.word	0x20000a0c
	...

08006b30 <chCondSignalI.constprop.43>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <chCondSignalI.constprop.43+0x20>)
 8006b32:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d00a      	beq.n	8006b4e <chCondSignalI.constprop.43+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b38:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8006b3a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8006b3c:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8006b3e:	604b      	str	r3, [r1, #4]
 8006b40:	6214      	str	r4, [r2, #32]
    (void) chSchReadyI(tp);
 8006b42:	4610      	mov	r0, r2
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006b44:	6019      	str	r1, [r3, #0]
  }
}
 8006b46:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8006b4a:	f7f9 bf21 	b.w	8000990 <chSchReadyI>
 8006b4e:	4770      	bx	lr
 8006b50:	20000a0c 	.word	0x20000a0c
	...

08006b60 <chEvtGetAndClearEvents.constprop.35>:
 8006b60:	2320      	movs	r3, #32
 8006b62:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8006b66:	4a04      	ldr	r2, [pc, #16]	; (8006b78 <chEvtGetAndClearEvents.constprop.35+0x18>)
  currp->p_epending &= ~events;
 8006b68:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8006b6a:	6992      	ldr	r2, [r2, #24]
 8006b6c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8006b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8006b70:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20002e30 	.word	0x20002e30
 8006b7c:	00000000 	.word	0x00000000

08006b80 <chEvtWaitOne.constprop.31>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8006b80:	4a0b      	ldr	r2, [pc, #44]	; (8006bb0 <chEvtWaitOne.constprop.31+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8006b82:	b510      	push	{r4, lr}
 8006b84:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006b86:	6994      	ldr	r4, [r2, #24]
 8006b88:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006b8e:	b933      	cbnz	r3, 8006b9e <chEvtWaitOne.constprop.31+0x1e>
    ctp->p_u.ewmask = events;
 8006b90:	f04f 33ff 	mov.w	r3, #4294967295
 8006b94:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006b96:	200a      	movs	r0, #10
 8006b98:	f7f9 fe7a 	bl	8000890 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8006b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8006b9e:	4258      	negs	r0, r3
 8006ba0:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8006ba2:	ea23 0300 	bic.w	r3, r3, r0
 8006ba6:	6363      	str	r3, [r4, #52]	; 0x34
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8006bae:	bd10      	pop	{r4, pc}
 8006bb0:	20002e30 	.word	0x20002e30
	...

08006bc0 <chEvtWaitAny.constprop.30>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8006bc0:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <chEvtWaitAny.constprop.30+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006bc6:	6994      	ldr	r4, [r2, #24]
 8006bc8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8006bcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8006bce:	b930      	cbnz	r0, 8006bde <chEvtWaitAny.constprop.30+0x1e>
    ctp->p_u.ewmask = events;
 8006bd0:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006bd4:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8006bd6:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006bd8:	f7f9 fe5a 	bl	8000890 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8006bdc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8006bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006be0:	2200      	movs	r2, #0
 8006be2:	ea23 0300 	bic.w	r3, r3, r0
 8006be6:	6363      	str	r3, [r4, #52]	; 0x34
 8006be8:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	bf00      	nop
 8006bf0:	20002e30 	.word	0x20002e30
	...

08006c00 <chMBPostI.constprop.21>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <chMBPostI.constprop.21+0x34>)
 8006c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	dd10      	ble.n	8006c2c <chMBPostI.constprop.21+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c0a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8006c0c:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c0e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8006c10:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8006c12:	42a9      	cmp	r1, r5
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
     mbp->mb_wrptr = mbp->mb_buffer;
 8006c16:	bf28      	it	cs
 8006c18:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006c1a:	6099      	str	r1, [r3, #8]
 8006c1c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 8006c1e:	4806      	ldr	r0, [pc, #24]	; (8006c38 <chMBPostI.constprop.21+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8006c20:	bf28      	it	cs
 8006c22:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8006c24:	f7fa f854 	bl	8000cd0 <chSemSignalI>

  return MSG_OK;
 8006c28:	2000      	movs	r0, #0
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	200009e4 	.word	0x200009e4
 8006c38:	200009f4 	.word	0x200009f4
 8006c3c:	00000000 	.word	0x00000000

08006c40 <chMBPostAhead.constprop.20>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	2320      	movs	r3, #32
 8006c44:	4606      	mov	r6, r0
 8006c46:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8006c4a:	4c0e      	ldr	r4, [pc, #56]	; (8006c84 <chMBPostAhead.constprop.20+0x44>)
 8006c4c:	f104 001c 	add.w	r0, r4, #28
 8006c50:	f7fa f93e 	bl	8000ed0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006c54:	4605      	mov	r5, r0
 8006c56:	b958      	cbnz	r0, 8006c70 <chMBPostAhead.constprop.20+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006c58:	68e3      	ldr	r3, [r4, #12]
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	60e3      	str	r3, [r4, #12]
 8006c62:	d30a      	bcc.n	8006c7a <chMBPostAhead.constprop.20+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8006c64:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8006c66:	4808      	ldr	r0, [pc, #32]	; (8006c88 <chMBPostAhead.constprop.20+0x48>)
 8006c68:	f7fa f832 	bl	8000cd0 <chSemSignalI>
    chSchRescheduleS();
 8006c6c:	f7f9 fd10 	bl	8000690 <chSchRescheduleS>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8006c76:	4628      	mov	r0, r5
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	60e3      	str	r3, [r4, #12]
 8006c80:	e7f0      	b.n	8006c64 <chMBPostAhead.constprop.20+0x24>
 8006c82:	bf00      	nop
 8006c84:	200009e4 	.word	0x200009e4
 8006c88:	200009f4 	.word	0x200009f4
 8006c8c:	00000000 	.word	0x00000000

08006c90 <chMBPostAheadI.constprop.19>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006c90:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <chMBPostAheadI.constprop.19+0x34>)
 8006c92:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8006c94:	2900      	cmp	r1, #0
 8006c96:	dd11      	ble.n	8006cbc <chMBPostAheadI.constprop.19+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006c98:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006c9a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8006c9c:	6814      	ldr	r4, [r2, #0]
 8006c9e:	3b04      	subs	r3, #4
 8006ca0:	3901      	subs	r1, #1
 8006ca2:	42a3      	cmp	r3, r4
 8006ca4:	6251      	str	r1, [r2, #36]	; 0x24
 8006ca6:	60d3      	str	r3, [r2, #12]
 8006ca8:	d202      	bcs.n	8006cb0 <chMBPostAheadI.constprop.19+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8006caa:	6853      	ldr	r3, [r2, #4]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 8006cb0:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8006cb2:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <chMBPostAheadI.constprop.19+0x38>)
 8006cb4:	f7fa f80c 	bl	8000cd0 <chSemSignalI>

  return MSG_OK;
 8006cb8:	2000      	movs	r0, #0
 8006cba:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	200009e4 	.word	0x200009e4
 8006cc8:	200009f4 	.word	0x200009f4
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <chMBFetchI.constprop.18>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <chMBFetchI.constprop.18+0x34>)
 8006cd2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	dd12      	ble.n	8006cfe <chMBFetchI.constprop.18+0x2e>
 8006cd8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006cda:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	6199      	str	r1, [r3, #24]
  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006ce0:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006ce2:	6814      	ldr	r4, [r2, #0]
 8006ce4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8006ce6:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006ce8:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8006cea:	bf28      	it	cs
 8006cec:	681a      	ldrcs	r2, [r3, #0]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8006cee:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006cf0:	4805      	ldr	r0, [pc, #20]	; (8006d08 <chMBFetchI.constprop.18+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8006cf2:	bf28      	it	cs
 8006cf4:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8006cf6:	f7f9 ffeb 	bl	8000cd0 <chSemSignalI>

  return MSG_OK;
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	4770      	bx	lr
 8006d04:	200009e4 	.word	0x200009e4
 8006d08:	20000a00 	.word	0x20000a00
 8006d0c:	00000000 	.word	0x00000000

08006d10 <sdObjectInit.constprop.14>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  sdp->vmt = &vmt;
 8006d14:	4604      	mov	r4, r0
 8006d16:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <sdObjectInit.constprop.14+0x5c>)
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8006d18:	f100 0254 	add.w	r2, r0, #84	; 0x54
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006d1c:	f844 3b04 	str.w	r3, [r4], #4
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006d20:	2700      	movs	r7, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8006d22:	f500 73c0 	add.w	r3, r0, #384	; 0x180
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
 8006d26:	f100 060c 	add.w	r6, r0, #12
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
 8006d2a:	f100 0530 	add.w	r5, r0, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006d2e:	f04f 0801 	mov.w	r8, #1
  oqp->q_counter = size;
 8006d32:	f44f 7c96 	mov.w	ip, #300	; 0x12c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006d36:	f500 7e2b 	add.w	lr, r0, #684	; 0x2ac
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006d3a:	6147      	str	r7, [r0, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8006d3c:	6044      	str	r4, [r0, #4]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8006d3e:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8006d40:	64c1      	str	r1, [r0, #76]	; 0x4c
  oqp->q_link    = link;
 8006d42:	6500      	str	r0, [r0, #80]	; 0x50
 8006d44:	f880 8008 	strb.w	r8, [r0, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8006d48:	6287      	str	r7, [r0, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006d4a:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006d4e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8006d52:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8006d54:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8006d56:	6202      	str	r2, [r0, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006d58:	60c6      	str	r6, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8006d5a:	6106      	str	r6, [r0, #16]
  iqp->q_top     = bp + size;
 8006d5c:	61c3      	str	r3, [r0, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8006d5e:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8006d60:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8006d62:	6443      	str	r3, [r0, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006d64:	6305      	str	r5, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8006d66:	6345      	str	r5, [r0, #52]	; 0x34
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d6c:	08008380 	.word	0x08008380

08006d70 <test_start_timer.constprop.11>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8006d70:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8006d72:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <test_start_timer.constprop.11+0x30>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	4809      	ldr	r0, [pc, #36]	; (8006da4 <test_start_timer.constprop.11+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8006d80:	68c3      	ldr	r3, [r0, #12]
 8006d82:	b10b      	cbz	r3, 8006d88 <test_start_timer.constprop.11+0x18>
    chVTDoResetI(vtp);
 8006d84:	f7f9 fffc 	bl	8000d80 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8006d88:	4806      	ldr	r0, [pc, #24]	; (8006da4 <test_start_timer.constprop.11+0x34>)
 8006d8a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d8e:	4a06      	ldr	r2, [pc, #24]	; (8006da8 <test_start_timer.constprop.11+0x38>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	f7fa f835 	bl	8000e00 <chVTDoSetI>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	bd08      	pop	{r3, pc}
 8006d9e:	bf00      	nop
 8006da0:	20002e2c 	.word	0x20002e2c
 8006da4:	20002f80 	.word	0x20002f80
 8006da8:	08003001 	.word	0x08003001
 8006dac:	00000000 	.word	0x00000000

08006db0 <wifiSendUDP.constprop.7>:
 * @param[in] wifip    pointer to the @p WIFIDriver variable
 * @param[in] packet   pointer to the @p PacketStruct variable
 * @param[in] ipaddr   IPAddress struct which contains the ip address of the packet
 * @param[in] portnum  Port number of the packet
 */
void NWLSendPacketUDP(WIFIDriver *wifip, PacketStruct *Packet, IPAddress ipaddr, int portnum){
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief  Increase and return with the next FrameNumber
 *
 * @param[in] wifip   pointer to the @p WIFIDriver object
 */
char NWLGetNextFrameNumber(WIFIDriver *wifip){
  char next = wifip->NWLStats.FrameNumber;
 8006db4:	4e20      	ldr	r6, [pc, #128]	; (8006e38 <wifiSendUDP.constprop.7+0x88>)
 * @param[in] wifip    pointer to the @p WIFIDriver variable
 * @param[in] packet   pointer to the @p PacketStruct variable
 * @param[in] ipaddr   IPAddress struct which contains the ip address of the packet
 * @param[in] portnum  Port number of the packet
 */
void NWLSendPacketUDP(WIFIDriver *wifip, PacketStruct *Packet, IPAddress ipaddr, int portnum){
 8006db6:	b086      	sub	sp, #24
 8006db8:	9101      	str	r1, [sp, #4]
 * @brief  Increase and return with the next FrameNumber
 *
 * @param[in] wifip   pointer to the @p WIFIDriver object
 */
char NWLGetNextFrameNumber(WIFIDriver *wifip){
  char next = wifip->NWLStats.FrameNumber;
 8006dba:	7931      	ldrb	r1, [r6, #4]
 * @param[in] wifip    pointer to the @p WIFIDriver variable
 * @param[in] packet   pointer to the @p PacketStruct variable
 * @param[in] ipaddr   IPAddress struct which contains the ip address of the packet
 * @param[in] portnum  Port number of the packet
 */
void NWLSendPacketUDP(WIFIDriver *wifip, PacketStruct *Packet, IPAddress ipaddr, int portnum){
 8006dbc:	4607      	mov	r7, r0
 *
 * @param[in] wifip   pointer to the @p WIFIDriver object
 */
char NWLGetNextFrameNumber(WIFIDriver *wifip){
  char next = wifip->NWLStats.FrameNumber;
  wifip->NWLStats.FrameNumber++;
 8006dbe:	1c4b      	adds	r3, r1, #1
 8006dc0:	7133      	strb	r3, [r6, #4]
 */
void NWLAssignFNtoPacket(WIFIDriver *wifip, PacketStruct *Packet){
  char FN = NWLGetNextFrameNumber(wifip);
  int i;

  for(i = 0; i < Packet->length; i++)
 8006dc2:	7802      	ldrb	r2, [r0, #0]
 8006dc4:	b1b2      	cbz	r2, 8006df4 <wifiSendUDP.constprop.7+0x44>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8006dcc:	4402      	add	r2, r0
    Packet->FrameSlot[i].FrameNumber = FN;
 8006dce:	7099      	strb	r1, [r3, #2]
 8006dd0:	330f      	adds	r3, #15
 */
void NWLAssignFNtoPacket(WIFIDriver *wifip, PacketStruct *Packet){
  char FN = NWLGetNextFrameNumber(wifip);
  int i;

  for(i = 0; i < Packet->length; i++)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d1fb      	bne.n	8006dce <wifiSendUDP.constprop.7+0x1e>
 8006dd6:	2500      	movs	r5, #0
  NWLAssignFNtoPacket(wifip, Packet);

  int i;
  for(i=0; i < Packet->length; i++)
  {
    Packet->FrameSlot[i].Id = FTYPE_USERDATA;
 8006dd8:	46a8      	mov	r8, r5
 8006dda:	1c7c      	adds	r4, r7, #1
 8006ddc:	f884 8000 	strb.w	r8, [r4]
    DLLPutFrameInQueue(wifip->DLLObject, &Packet->FrameSlot[i]);
 8006de0:	4621      	mov	r1, r4
 8006de2:	68f0      	ldr	r0, [r6, #12]
 8006de4:	f7fc f8c4 	bl	8002f70 <DLLPutFrameInQueue>
              "NWLSendPacket(), invalid state");

  NWLAssignFNtoPacket(wifip, Packet);

  int i;
  for(i=0; i < Packet->length; i++)
 8006de8:	783b      	ldrb	r3, [r7, #0]
 8006dea:	3501      	adds	r5, #1
 8006dec:	429d      	cmp	r5, r3
 8006dee:	f104 040f 	add.w	r4, r4, #15
 8006df2:	dbf3      	blt.n	8006ddc <wifiSendUDP.constprop.7+0x2c>
 * @param[in] ipaddr    pointer to the @p IPAddress object
 * @param[in] portnum   pointer to the @p portnum variable
 */
void NWLCreateControlFrameUDP(FrameStruct *frame, IPAddress *ipaddr, int *portnum){
  frame->Id = FTYPE_UDPSEND;
  memcpy(frame->data, ipaddr, sizeof(IPAddress));
 8006df4:	9801      	ldr	r0, [sp, #4]

  frame->data[4] = (char)*portnum;
 8006df6:	22a0      	movs	r2, #160	; 0xa0
 * @param[in] ipaddr    pointer to the @p IPAddress object
 * @param[in] portnum   pointer to the @p portnum variable
 */
void NWLCreateControlFrameUDP(FrameStruct *frame, IPAddress *ipaddr, int *portnum){
  frame->Id = FTYPE_UDPSEND;
  memcpy(frame->data, ipaddr, sizeof(IPAddress));
 8006df8:	f8cd 000a 	str.w	r0, [sp, #10]

  frame->data[4] = (char)*portnum;
  frame->data[5] = (char)(*portnum >> 8);
 8006dfc:	230f      	movs	r3, #15
  frame->data[6] = (char)(*portnum >> 16);
 8006dfe:	2400      	movs	r4, #0
 * @param[in] frame     pointer to the @p FrameStruct object
 * @param[in] ipaddr    pointer to the @p IPAddress object
 * @param[in] portnum   pointer to the @p portnum variable
 */
void NWLCreateControlFrameUDP(FrameStruct *frame, IPAddress *ipaddr, int *portnum){
  frame->Id = FTYPE_UDPSEND;
 8006e00:	2520      	movs	r5, #32
    DLLPutFrameInQueue(wifip->DLLObject, &Packet->FrameSlot[i]);
  }

  FrameStruct ControlFrame;
  NWLCreateControlFrameUDP(&ControlFrame, &ipaddr, &portnum);
  DLLPutFrameInQueue(wifip->DLLObject, &ControlFrame);
 8006e02:	68f0      	ldr	r0, [r6, #12]
 8006e04:	a902      	add	r1, sp, #8
 * @param[in] frame     pointer to the @p FrameStruct object
 * @param[in] ipaddr    pointer to the @p IPAddress object
 * @param[in] portnum   pointer to the @p portnum variable
 */
void NWLCreateControlFrameUDP(FrameStruct *frame, IPAddress *ipaddr, int *portnum){
  frame->Id = FTYPE_UDPSEND;
 8006e06:	f88d 5008 	strb.w	r5, [sp, #8]
  memcpy(frame->data, ipaddr, sizeof(IPAddress));

  frame->data[4] = (char)*portnum;
 8006e0a:	f88d 200e 	strb.w	r2, [sp, #14]
  frame->data[5] = (char)(*portnum >> 8);
 8006e0e:	f88d 300f 	strb.w	r3, [sp, #15]
  frame->data[6] = (char)(*portnum >> 16);
 8006e12:	f88d 4010 	strb.w	r4, [sp, #16]
  frame->data[7] = (char)(*portnum >> 24);
 8006e16:	f88d 4011 	strb.w	r4, [sp, #17]
    DLLPutFrameInQueue(wifip->DLLObject, &Packet->FrameSlot[i]);
  }

  FrameStruct ControlFrame;
  NWLCreateControlFrameUDP(&ControlFrame, &ipaddr, &portnum);
  DLLPutFrameInQueue(wifip->DLLObject, &ControlFrame);
 8006e1a:	f7fc f8a9 	bl	8002f70 <DLLPutFrameInQueue>
 8006e1e:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006e22:	6933      	ldr	r3, [r6, #16]
 8006e24:	603b      	str	r3, [r7, #0]
  mp->mp_next = php;
 8006e26:	6137      	str	r7, [r6, #16]
 8006e28:	f384 8811 	msr	BASEPRI, r4

  chPoolFree(&wifip->PacketPool, (void*)Packet);
  wifip->NWLStats.SentPacket++;
 8006e2c:	68b3      	ldr	r3, [r6, #8]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60b3      	str	r3, [r6, #8]
}
 8006e32:	b006      	add	sp, #24
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	200028b0 	.word	0x200028b0
 8006e3c:	00000000 	.word	0x00000000

08006e40 <long_to_string_with_divisor.constprop.4>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8006e40:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8006e42:	f100 070b 	add.w	r7, r0, #11
 8006e46:	463c      	mov	r4, r7
 8006e48:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8006e4a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8006e4e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8006e52:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8006e56:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8006e5a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8006e5c:	bfc8      	it	gt
 8006e5e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8006e68:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	d1ed      	bne.n	8006e4a <long_to_string_with_divisor.constprop.4+0xa>

  i = (int)(p + MAX_FILLER - q);
 8006e6e:	1b3a      	subs	r2, r7, r4
 8006e70:	4402      	add	r2, r0
 8006e72:	e001      	b.n	8006e78 <long_to_string_with_divisor.constprop.4+0x38>
 8006e74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8006e78:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8006e7c:	4290      	cmp	r0, r2
 8006e7e:	d1f9      	bne.n	8006e74 <long_to_string_with_divisor.constprop.4+0x34>

  return p;
}
 8006e80:	bcf0      	pop	{r4, r5, r6, r7}
 8006e82:	4770      	bx	lr
	...

08006e90 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	460d      	mov	r5, r1
  char *token;
  if (str)
 8006e94:	4604      	mov	r4, r0
 8006e96:	b190      	cbz	r0, 8006ebe <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8006e98:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	490b      	ldr	r1, [pc, #44]	; (8006ecc <_strtok.constprop.3+0x3c>)
 8006e9e:	f000 f83f 	bl	8006f20 <strspn>
 8006ea2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4909      	ldr	r1, [pc, #36]	; (8006ecc <_strtok.constprop.3+0x3c>)
 8006ea8:	f000 f812 	bl	8006ed0 <strpbrk>
  if (*saveptr)
 8006eac:	b160      	cbz	r0, 8006ec8 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 8006eae:	1c42      	adds	r2, r0, #1
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	602a      	str	r2, [r5, #0]
 8006eb4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8006eb6:	7823      	ldrb	r3, [r4, #0]
 8006eb8:	b123      	cbz	r3, 8006ec4 <_strtok.constprop.3+0x34>
 8006eba:	4620      	mov	r0, r4
}
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8006ebe:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	d1ea      	bne.n	8006e9a <_strtok.constprop.3+0xa>
    return NULL;
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8006ec8:	6028      	str	r0, [r5, #0]
 8006eca:	e7f4      	b.n	8006eb6 <_strtok.constprop.3+0x26>
 8006ecc:	080082e4 	.word	0x080082e4

08006ed0 <strpbrk>:
 8006ed0:	b430      	push	{r4, r5}
 8006ed2:	7804      	ldrb	r4, [r0, #0]
 8006ed4:	b1ec      	cbz	r4, 8006f12 <strpbrk+0x42>
 8006ed6:	780d      	ldrb	r5, [r1, #0]
 8006ed8:	b1ad      	cbz	r5, 8006f06 <strpbrk+0x36>
 8006eda:	42ac      	cmp	r4, r5
 8006edc:	d00e      	beq.n	8006efc <strpbrk+0x2c>
 8006ede:	460a      	mov	r2, r1
 8006ee0:	e001      	b.n	8006ee6 <strpbrk+0x16>
 8006ee2:	429c      	cmp	r4, r3
 8006ee4:	d009      	beq.n	8006efa <strpbrk+0x2a>
 8006ee6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f9      	bne.n	8006ee2 <strpbrk+0x12>
 8006eee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006ef2:	2c00      	cmp	r4, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <strpbrk+0x8>
 8006ef6:	7815      	ldrb	r5, [r2, #0]
 8006ef8:	e000      	b.n	8006efc <strpbrk+0x2c>
 8006efa:	4625      	mov	r5, r4
 8006efc:	2d00      	cmp	r5, #0
 8006efe:	bf08      	it	eq
 8006f00:	2000      	moveq	r0, #0
 8006f02:	bc30      	pop	{r4, r5}
 8006f04:	4770      	bx	lr
 8006f06:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d1e3      	bne.n	8006ed8 <strpbrk+0x8>
 8006f10:	e7f1      	b.n	8006ef6 <strpbrk+0x26>
 8006f12:	4620      	mov	r0, r4
 8006f14:	bc30      	pop	{r4, r5}
 8006f16:	4770      	bx	lr
	...

08006f20 <strspn>:
 8006f20:	b470      	push	{r4, r5, r6}
 8006f22:	7804      	ldrb	r4, [r0, #0]
 8006f24:	b1a4      	cbz	r4, 8006f50 <strspn+0x30>
 8006f26:	4605      	mov	r5, r0
 8006f28:	780e      	ldrb	r6, [r1, #0]
 8006f2a:	b14e      	cbz	r6, 8006f40 <strspn+0x20>
 8006f2c:	42b4      	cmp	r4, r6
 8006f2e:	d00a      	beq.n	8006f46 <strspn+0x26>
 8006f30:	460a      	mov	r2, r1
 8006f32:	e001      	b.n	8006f38 <strspn+0x18>
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d006      	beq.n	8006f46 <strspn+0x26>
 8006f38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f9      	bne.n	8006f34 <strspn+0x14>
 8006f40:	1a28      	subs	r0, r5, r0
 8006f42:	bc70      	pop	{r4, r5, r6}
 8006f44:	4770      	bx	lr
 8006f46:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8006f4a:	2c00      	cmp	r4, #0
 8006f4c:	d1ed      	bne.n	8006f2a <strspn+0xa>
 8006f4e:	e7f7      	b.n	8006f40 <strspn+0x20>
 8006f50:	4620      	mov	r0, r4
 8006f52:	e7f6      	b.n	8006f42 <strspn+0x22>
	...

08006f60 <atoi>:
 8006f60:	2100      	movs	r1, #0
 8006f62:	220a      	movs	r2, #10
 8006f64:	f000 b894 	b.w	8007090 <strtol>
	...

08006f70 <_strtol_r>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4c44      	ldr	r4, [pc, #272]	; (8007088 <_strtol_r+0x118>)
 8006f76:	4683      	mov	fp, r0
 8006f78:	460e      	mov	r6, r1
 8006f7a:	f8d4 e000 	ldr.w	lr, [r4]
 8006f7e:	e000      	b.n	8006f82 <_strtol_r+0x12>
 8006f80:	4626      	mov	r6, r4
 8006f82:	4634      	mov	r4, r6
 8006f84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006f88:	eb0e 0005 	add.w	r0, lr, r5
 8006f8c:	7840      	ldrb	r0, [r0, #1]
 8006f8e:	f000 0008 	and.w	r0, r0, #8
 8006f92:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d1f2      	bne.n	8006f80 <_strtol_r+0x10>
 8006f9a:	2d2d      	cmp	r5, #45	; 0x2d
 8006f9c:	d04b      	beq.n	8007036 <_strtol_r+0xc6>
 8006f9e:	2d2b      	cmp	r5, #43	; 0x2b
 8006fa0:	bf04      	itt	eq
 8006fa2:	7875      	ldrbeq	r5, [r6, #1]
 8006fa4:	1cb4      	addeq	r4, r6, #2
 8006fa6:	b11b      	cbz	r3, 8006fb0 <_strtol_r+0x40>
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d060      	beq.n	800706e <_strtol_r+0xfe>
 8006fac:	469a      	mov	sl, r3
 8006fae:	e003      	b.n	8006fb8 <_strtol_r+0x48>
 8006fb0:	2d30      	cmp	r5, #48	; 0x30
 8006fb2:	d054      	beq.n	800705e <_strtol_r+0xee>
 8006fb4:	230a      	movs	r3, #10
 8006fb6:	469a      	mov	sl, r3
 8006fb8:	f1b8 0f00 	cmp.w	r8, #0
 8006fbc:	bf14      	ite	ne
 8006fbe:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8006fc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006fc6:	fbb0 f9fa 	udiv	r9, r0, sl
 8006fca:	2700      	movs	r7, #0
 8006fcc:	46bc      	mov	ip, r7
 8006fce:	fb0a 0019 	mls	r0, sl, r9, r0
 8006fd2:	e00c      	b.n	8006fee <_strtol_r+0x7e>
 8006fd4:	3d30      	subs	r5, #48	; 0x30
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	dd19      	ble.n	800700e <_strtol_r+0x9e>
 8006fda:	1c7e      	adds	r6, r7, #1
 8006fdc:	d005      	beq.n	8006fea <_strtol_r+0x7a>
 8006fde:	45cc      	cmp	ip, r9
 8006fe0:	d824      	bhi.n	800702c <_strtol_r+0xbc>
 8006fe2:	d021      	beq.n	8007028 <_strtol_r+0xb8>
 8006fe4:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8006fe8:	2701      	movs	r7, #1
 8006fea:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fee:	eb0e 0605 	add.w	r6, lr, r5
 8006ff2:	7876      	ldrb	r6, [r6, #1]
 8006ff4:	f016 0f04 	tst.w	r6, #4
 8006ff8:	d1ec      	bne.n	8006fd4 <_strtol_r+0x64>
 8006ffa:	f016 0603 	ands.w	r6, r6, #3
 8006ffe:	d006      	beq.n	800700e <_strtol_r+0x9e>
 8007000:	2e01      	cmp	r6, #1
 8007002:	bf0c      	ite	eq
 8007004:	2637      	moveq	r6, #55	; 0x37
 8007006:	2657      	movne	r6, #87	; 0x57
 8007008:	1bad      	subs	r5, r5, r6
 800700a:	42ab      	cmp	r3, r5
 800700c:	dce5      	bgt.n	8006fda <_strtol_r+0x6a>
 800700e:	1c7b      	adds	r3, r7, #1
 8007010:	d016      	beq.n	8007040 <_strtol_r+0xd0>
 8007012:	f1c8 0000 	rsb	r0, r8, #0
 8007016:	ea8c 0000 	eor.w	r0, ip, r0
 800701a:	4440      	add	r0, r8
 800701c:	b14a      	cbz	r2, 8007032 <_strtol_r+0xc2>
 800701e:	b107      	cbz	r7, 8007022 <_strtol_r+0xb2>
 8007020:	1e61      	subs	r1, r4, #1
 8007022:	6011      	str	r1, [r2, #0]
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	4285      	cmp	r5, r0
 800702a:	dddb      	ble.n	8006fe4 <_strtol_r+0x74>
 800702c:	f04f 37ff 	mov.w	r7, #4294967295
 8007030:	e7db      	b.n	8006fea <_strtol_r+0x7a>
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007036:	1cb4      	adds	r4, r6, #2
 8007038:	7875      	ldrb	r5, [r6, #1]
 800703a:	f04f 0801 	mov.w	r8, #1
 800703e:	e7b2      	b.n	8006fa6 <_strtol_r+0x36>
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	f04f 0322 	mov.w	r3, #34	; 0x22
 8007048:	bf14      	ite	ne
 800704a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800704e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007052:	f8cb 3000 	str.w	r3, [fp]
 8007056:	2a00      	cmp	r2, #0
 8007058:	d1e2      	bne.n	8007020 <_strtol_r+0xb0>
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	7823      	ldrb	r3, [r4, #0]
 8007060:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007064:	2b58      	cmp	r3, #88	; 0x58
 8007066:	d009      	beq.n	800707c <_strtol_r+0x10c>
 8007068:	2308      	movs	r3, #8
 800706a:	469a      	mov	sl, r3
 800706c:	e7a4      	b.n	8006fb8 <_strtol_r+0x48>
 800706e:	2d30      	cmp	r5, #48	; 0x30
 8007070:	d19c      	bne.n	8006fac <_strtol_r+0x3c>
 8007072:	7820      	ldrb	r0, [r4, #0]
 8007074:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007078:	2858      	cmp	r0, #88	; 0x58
 800707a:	d197      	bne.n	8006fac <_strtol_r+0x3c>
 800707c:	f04f 0a10 	mov.w	sl, #16
 8007080:	7865      	ldrb	r5, [r4, #1]
 8007082:	4653      	mov	r3, sl
 8007084:	3402      	adds	r4, #2
 8007086:	e797      	b.n	8006fb8 <_strtol_r+0x48>
 8007088:	20000a20 	.word	0x20000a20
 800708c:	00000000 	.word	0x00000000

08007090 <strtol>:
 8007090:	b430      	push	{r4, r5}
 8007092:	460d      	mov	r5, r1
 8007094:	4c03      	ldr	r4, [pc, #12]	; (80070a4 <strtol+0x14>)
 8007096:	4613      	mov	r3, r2
 8007098:	4601      	mov	r1, r0
 800709a:	462a      	mov	r2, r5
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	bc30      	pop	{r4, r5}
 80070a0:	f7ff bf66 	b.w	8006f70 <_strtol_r>
 80070a4:	20000e50 	.word	0x20000e50
	...
 80070b0:	ff04a8c0 	.word	0xff04a8c0
	...

080070c0 <ram_areas>:
 80070c0:	08008b0c 20003610 20003610 20003610     .....6. .6. .6. 
 80070d0:	08008b0c 00000000 00000000 00000000     ................
 80070e0:	08008b0c 00000000 00000000 00000000     ................
 80070f0:	08008b0c 00000000 00000000 00000000     ................
 8007100:	08008b0c 00000000 00000000 00000000     ................
 8007110:	08008b0c 00000000 00000000 00000000     ................
 8007120:	08008b0c 00000000 00000000 00000000     ................
 8007130:	08008b0c 00000000 00000000 00000000     ................
 8007140:	00000042 00000041 44434241 00000045     B...A...ABCDE...

08007150 <wa>:
 8007150:	20002fa8 200030f0 20003238 20003380     ./. .0. 82. .3. 
 8007160:	200034c8 00000000 00000000 00000000     .4. ............
 8007170:	646e6553 20676e69 65726854 00006461     Sending Thread..
 8007180:	6e69614d 63655220 69766965 4620676e     Main Receiving F
 8007190:	00636e75 202d2d2d 74737953 203a6d65     unc.--- System: 
 80071a0:	00000000 74796220 00007365 202d2d2d     .... bytes..--- 
 80071b0:	65726854 203a6461 00000000 202d2d2d     Thread: ....--- 
 80071c0:	656d6954 203a2072 00000000 202d2d2d     Timer : ....--- 
 80071d0:	616d6553 203a6870 00000000 202d2d2d     Semaph: ....--- 
 80071e0:	6e657645 203a5374 00000000 202d2d2d     EventS: ....--- 
 80071f0:	6e657645 203a4c74 00000000 202d2d2d     EventL: ....--- 
 8007200:	6574754d 203a2078 00000000 202d2d2d     Mutex : ....--- 
 8007210:	646e6f43 203a2e56 00000000 202d2d2d     CondV.: ....--- 
 8007220:	75657551 203a2065 00000000 202d2d2d     Queue : ....--- 
 8007230:	6c69614d 203a2e42 00000000 202d2d2d     MailB.: ....--- 
 8007240:	726f6353 203a2065 00000000 636f6c20     Score : .... loc
 8007250:	6e752b6b 6b636f6c 0000532f 69617720     k+unlock/S.. wai
 8007260:	69732b74 6c616e67 0000532f 6d697420     t+signal/S.. tim
 8007270:	2f737265 00000053 74796220 532f7365     ers/S... bytes/S
 8007280:	00000000 78746320 2f637773 00000053     .... ctxswc/S...
 8007290:	72687420 73646165 0000532f 73657220      threads/S.. res
 80072a0:	64656863 73656c75 202c532f 00000000     chedules/S, ....
 80072b0:	67736d20 2c532f73 00000020 6c756e28      msgs/S, ...(nul
 80072c0:	0000296c 00000000 00000000 00000000     l)..............

080072d0 <testmtx4>:
 80072d0:	08007c1c 080012a1 00000000 08001301     .|..............

080072e0 <testmtx5>:
 80072e0:	08007c0c 08001291 00000000 08005371     .|..........qS..

080072f0 <testmtx6>:
 80072f0:	08007bf4 08004931 00000000 08005291     .{..1I.......R..

08007300 <testmtx7>:
 8007300:	08007bdc 08004911 00000000 080051a1     .{...I.......Q..

08007310 <testmtx8>:
 8007310:	08007bc8 080048e1 00000000 08004ff1     .{...H.......O..

08007320 <patternmsg>:
 8007320:	08007590 00000000 00000000 00000000     .u..............

08007330 <testbmk11>:
 8007330:	080078e8 080020b1 00000000 080023d1     .x... .......#..

08007340 <testbmk13>:
 8007340:	080078ac 00000000 00000000 08002271     .x..........q"..

08007350 <testevt2>:
 8007350:	08007b58 080063b1 00000000 080063d1     X{...c.......c..

08007360 <patterndyn>:
 8007360:	08007540 08007550 08007560 00000000     @u..Pu..`u......

08007370 <testsys1>:
 8007370:	08007d60 00000000 00000000 08003e41     `}..........A>..

08007380 <testsem1>:
 8007380:	08007cb4 080012f1 00000000 08001b91     .|..............

08007390 <testsem2>:
 8007390:	08007ca0 080012e1 00000000 08001a11     .|..............

080073a0 <testsem3>:
 80073a0:	08007c80 080012d1 00000000 08001961     .|..........a...

080073b0 <testsem4>:
 80073b0:	08007c5c 00000000 00000000 08001801     \|..............

080073c0 <testsys2>:
 80073c0:	08007d44 00000000 00000000 080020e1     D}........... ..

080073d0 <default_config>:
 80073d0:	00009600 40000000 00000000 00000000     .......@........

080073e0 <testsys3>:
 80073e0:	08007d30 00000000 00000000 08002bc1     0}...........+..

080073f0 <testbmk10>:
 80073f0:	0800790c 00000000 00000000 08002471     .y..........q$..

08007400 <testbmk7>:
 8007400:	08007980 080020d1 00000000 08002721     .y... ......!'..

08007410 <testbmk12>:
 8007410:	080078c8 080020a1 00000000 08002361     .x... ......a#..

08007420 <testbmk8>:
 8007420:	08007954 00000000 00000000 080025a1     Ty...........%..

08007430 <testbmk1>:
 8007430:	08007a34 00000000 00000000 08002b51     4z..........Q+..

08007440 <testbmk2>:
 8007440:	08007a1c 00000000 00000000 08002ae1     .z...........*..

08007450 <testbmk3>:
 8007450:	08007a04 00000000 00000000 08002a01     .z...........*..

08007460 <testbmk4>:
 8007460:	080079e8 00000000 00000000 080028c1     .y...........(..

08007470 <testbmk5>:
 8007470:	080079c8 00000000 00000000 08002851     .y..........Q(..

08007480 <testbmk6>:
 8007480:	080079a8 00000000 00000000 08002681     .y...........&..

08007490 <patternsys>:
 8007490:	08007370 080073c0 080073e0 00000000     ps...s...s......

080074a0 <testpools1>:
 80074a0:	08007b00 08005fa1 00000000 080045e1     .{..._.......E..

080074b0 <testbmk9>:
 80074b0:	08007930 00000000 00000000 080024f1     0y...........$..

080074c0 <patternbmk>:
 80074c0:	08007430 08007440 08007450 08007460     0t..@t..Pt..`t..
 80074d0:	08007470 08007480 08007400 08007420     pt...t...t.. t..
 80074e0:	080074b0 080073f0 08007330 08007410     .t...s..0s...t..
 80074f0:	08007340 00000000 00000000 00000000     @s..............

08007500 <patterns>:
 8007500:	08007490 080075a0 08007630 080076a0     .t...u..0v...v..
 8007510:	08007320 080075e0 08007660 08007580      s...u..`v...u..
 8007520:	08007d90 08007360 08007650 080074c0     .}..`s..Pv...t..
	...

08007540 <testdyn1>:
 8007540:	08007ad4 08003e11 00000000 080047a1     .z...>.......G..

08007550 <testdyn2>:
 8007550:	08007aa4 08003df1 00000000 080046b1     .z...=.......F..

08007560 <testdyn3>:
 8007560:	08007a7c 08003dc1 00000000 080044a1     |z...=.......D..

08007570 <testmbox1>:
 8007570:	08007b98 080048a1 00000000 08004951     .{...H......QI..

08007580 <patternheap>:
 8007580:	08007680 00000000 00000000 00000000     .v..............

08007590 <testmsg1>:
 8007590:	08007bb8 00000000 00000000 08004f51     .{..........QO..

080075a0 <patternthd>:
 80075a0:	080075f0 08007600 08007610 08007620     .u...v...v.. v..
	...

080075c0 <testqueues1>:
 80075c0:	08007a64 08003d91 00000000 080041d1     dz...=.......A..

080075d0 <testqueues2>:
 80075d0:	08007a4c 08003d61 00000000 08003f51     Lz..a=......Q?..

080075e0 <patternmbox>:
 80075e0:	08007570 00000000 00000000 00000000     pu..............

080075f0 <testthd1>:
 80075f0:	08007d14 00000000 00000000 08001681     .}..............

08007600 <testthd2>:
 8007600:	08007cf8 00000000 00000000 08001d01     .|..............

08007610 <testthd3>:
 8007610:	08007cdc 00000000 00000000 08001f11     .|..............

08007620 <testthd4>:
 8007620:	08007ccc 00000000 00000000 08001e51     .|..........Q...

08007630 <patternsem>:
 8007630:	08007380 08007390 080073a0 080073b0     .s...s...s...s..
	...

08007650 <patternqueues>:
 8007650:	080075c0 080075d0 00000000 00000000     .u...u..........

08007660 <patternevt>:
 8007660:	08007670 08007350 08007690 00000000     pv..Ps...v......

08007670 <testevt1>:
 8007670:	08007b74 080063c1 00000000 08006731     t{...c......1g..

08007680 <testheap1>:
 8007680:	08007b1c 08005fd1 00000000 08006001     .{..._.......`..

08007690 <testevt3>:
 8007690:	08007b44 080063a1 00000000 08006241     D{...c......Ab..

080076a0 <patternmtx>:
 80076a0:	08007d80 080072d0 080072e0 080072f0     .}...r...r...r..
 80076b0:	08007300 08007310 00000000 00000000     .s...s..........
 80076c0:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 80076d0:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 80076e0:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 80076f0:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 8007700:	68637241 63657469 65727574 0000203a     Architecture: ..
 8007710:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 8007720:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 8007730:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 8007740:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 8007750:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 8007760:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 8007770:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 8007780:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 8007790:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 80077a0:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 80077b0:	20747365 74697573 00000065 002a2a2a     est suite...***.
 80077c0:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 80077d0:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 80077e0:	00455255 2e312e33 00000031 2079614d     URE.3.1.1...May 
 80077f0:	32203420 20363130 3131202d 3a32313a      4 2016 - 11:12:
 8007800:	00003734 20434347 2e392e34 30322033     47..GCC 4.9.3 20
 8007810:	35303531 28203932 656c6572 29657361     150529 (release)
 8007820:	52415b20 6d652f4d 64646562 342d6465      [ARM/embedded-4
 8007830:	622d395f 636e6172 65722068 69736976     _9-branch revisi
 8007840:	32206e6f 37393732 00005d37 764d5241     on 227977]..ARMv
 8007850:	004d2d37 74726f43 4d2d7865 00000033     7-M.Cortex-M3...
 8007860:	61766441 6465636e 72656b20 206c656e     Advanced kernel 
 8007870:	65646f6d 00000000 334d5453 30314632     mode....STM32F10
 8007880:	65502078 726f6672 636e616d 694c2065     x Performance Li
 8007890:	4d20656e 75696465 6544206d 7469736e     ne Medium Densit
 80078a0:	00000079 6c617544 006d6f43 636e6542     y...DualCom.Benc
 80078b0:	72616d68 52202c6b 66204d41 70746f6f     hmark, RAM footp
 80078c0:	746e6972 00000000 636e6542 72616d68     rint....Benchmar
 80078d0:	6d202c6b 78657475 6c207365 2f6b636f     k, mutexes lock/
 80078e0:	6f6c6e75 00006b63 636e6542 72616d68     unlock..Benchmar
 80078f0:	73202c6b 70616d65 65726f68 61772073     k, semaphores wa
 8007900:	732f7469 616e6769 0000006c 636e6542     it/signal...Benc
 8007910:	72616d68 76202c6b 75747269 74206c61     hmark, virtual t
 8007920:	72656d69 65732073 65722f74 00746573     imers set/reset.
 8007930:	636e6542 72616d68 49202c6b 51204f2f     Benchmark, I/O Q
 8007940:	65756575 68742073 67756f72 74757068     ueues throughput
 8007950:	00000000 636e6542 72616d68 72202c6b     ....Benchmark, r
 8007960:	646e756f 626f7220 63206e69 65746e6f     ound robin conte
 8007970:	73207478 63746977 676e6968 00000000     xt switching....
 8007980:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 8007990:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 80079a0:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 80079b0:	74202c6b 61657268 202c7364 61657263     k, threads, crea
 80079c0:	6f206574 00796c6e 636e6542 72616d68     te only.Benchmar
 80079d0:	74202c6b 61657268 202c7364 6c6c7566     k, threads, full
 80079e0:	63796320 0000656c 636e6542 72616d68      cycle..Benchmar
 80079f0:	63202c6b 65746e6f 73207478 63746977     k, context switc
 8007a00:	00000068 636e6542 72616d68 6d202c6b     h...Benchmark, m
 8007a10:	61737365 20736567 00003323 636e6542     essages #3..Benc
 8007a20:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 8007a30:	00003223 636e6542 72616d68 6d202c6b     #2..Benchmark, m
 8007a40:	61737365 20736567 00003123 75657551     essages #1..Queu
 8007a50:	202c7365 7074756f 71207475 65756575     es, output queue
 8007a60:	00000073 75657551 202c7365 75706e69     s...Queues, inpu
 8007a70:	75712074 73657565 00000000 616e7944     t queues....Dyna
 8007a80:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 8007a90:	61207972 7220646e 72656665 65636e65     ry and reference
 8007aa0:	00000073 616e7944 2063696d 73495041     s...Dynamic APIs
 8007ab0:	6874202c 64616572 72632073 69746165     , threads creati
 8007ac0:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 8007ad0:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 8007ae0:	6874202c 64616572 72632073 69746165     , threads creati
 8007af0:	66206e6f 206d6f72 70616568 00000000     on from heap....
 8007b00:	6f6d654d 50207972 736c6f6f 7571202c     Memory Pools, qu
 8007b10:	2f657565 75716564 00657565 70616548     eue/dequeue.Heap
 8007b20:	6c61202c 61636f6c 6e6f6974 646e6120     , allocation and
 8007b30:	61726620 6e656d67 69746174 74206e6f      fragmentation t
 8007b40:	00747365 6e657645 202c7374 656d6974     est.Events, time
 8007b50:	7374756f 00000000 6e657645 202c7374     outs....Events, 
 8007b60:	74696177 646e6120 6f726220 61636461     wait and broadca
 8007b70:	00007473 6e657645 202c7374 69676572     st..Events, regi
 8007b80:	61727473 6e6f6974 646e6120 73696420     stration and dis
 8007b90:	63746170 00000068 6c69614d 65786f62     patch...Mailboxe
 8007ba0:	71202c73 69756575 6120676e 7420646e     s, queuing and t
 8007bb0:	6f656d69 00737475 7373654d 73656761     imeouts.Messages
 8007bc0:	6f6c202c 0000706f 646e6f43 2c726156     , loop..CondVar,
 8007bd0:	6f6f6220 74207473 00747365 646e6f43      boost test.Cond
 8007be0:	2c726156 6f726220 61636461 74207473     Var, broadcast t
 8007bf0:	00747365 646e6f43 2c726156 67697320     est.CondVar, sig
 8007c00:	206c616e 74736574 00000000 6574754d     nal test....Mute
 8007c10:	2c736578 61747320 00737574 6574754d     xes, status.Mute
 8007c20:	2c736578 69727020 7469726f 65722079     xes, priority re
 8007c30:	6e727574 00000000 6574754d 2c736578     turn....Mutexes,
 8007c40:	69727020 7469726f 6e652079 75657571      priority enqueu
 8007c50:	20676e69 74736574 00000000 616e6942     ing test....Bina
 8007c60:	53207972 70616d65 65726f68 66202c73     ry Semaphores, f
 8007c70:	74636e75 616e6f69 7974696c 00000000     unctionality....
 8007c80:	616d6553 726f6870 202c7365 6d6f7461     Semaphores, atom
 8007c90:	73206369 616e6769 61772d6c 00007469     ic signal-wait..
 8007ca0:	616d6553 726f6870 202c7365 656d6974     Semaphores, time
 8007cb0:	0074756f 616d6553 726f6870 202c7365     out.Semaphores, 
 8007cc0:	75716e65 6e697565 00000067 65726854     enqueuing...Thre
 8007cd0:	2c736461 6c656420 00737961 65726854     ads, delays.Thre
 8007ce0:	2c736461 69727020 7469726f 68632079     ads, priority ch
 8007cf0:	65676e61 00000000 65726854 2c736461     ange....Threads,
 8007d00:	716e6520 69756575 7420676e 20747365      enqueuing test 
 8007d10:	00003223 65726854 2c736461 716e6520     #2..Threads, enq
 8007d20:	69756575 7420676e 20747365 00003123     ueuing test #1..
 8007d30:	74737953 202c6d65 65746e69 74697267     System, integrit
 8007d40:	00000079 74737953 202c6d65 65746e69     y...System, inte
 8007d50:	70757272 68207374 6c646e61 00676e69     rrupts handling.
 8007d60:	74737953 202c6d65 74697263 6c616369     System, critical
 8007d70:	6e6f7a20 00007365 00000000 00000000      zones..........

08007d80 <testmtx1>:
 8007d80:	08007c38 080012c1 00000000 08001591     8|..............

08007d90 <patternpools>:
 8007d90:	080074a0 00000000 00000000 00000000     .t..............
 8007da0:	44434241 00000000 00004241 00000000     ABCD....AB......
 8007db0:	00434241 00000000 00000000 00000000     ABC.............

08007dc0 <ch_debug>:
 8007dc0:	6e69616d 18411600 08440204 1814100c     main..A...D.....
 8007dd0:	1e1d1c00 00000000 00000000 00000000     ................

08007de0 <commands>:
 8007de0:	08008170 08006981 08008174 08006911     p....i..t....i..
 8007df0:	08007c54 080068c1 0800817c 08005711     T|...h..|....W..
 8007e00:	08008188 080055c1 0800819c 08005431     .....U......1T..
	...

08007e20 <shCfg>:
 8007e20:	20002b7c 08007de0 00000000 00000000     |+. .}..........
 8007e30:	61746144 6b6e694c 6579614c 74532072     DataLinkLayer St
 8007e40:	73697461 73636974 00000a0d 746e6553     atistics....Sent
 8007e50:	6425203a 00000a0d 65636552 64657669     : %d....Received
 8007e60:	6425203a 00000a0d 74736f4c 6d617246     : %d....LostFram
 8007e70:	203a7365 0a0d6425 00000000 636e7953     es: %d......Sync
 8007e80:	6425203a 00000a0d 636e7953 6d617246     : %d....SyncFram
 8007e90:	6e655365 756f4374 7265746e 6425203a     eSentCounter: %d
 8007ea0:	00000a0d 636e7953 656d6954 3a74756f     ....SyncTimeout:
 8007eb0:	0d642520 0000000a 65657246 6c6c6946      %d.....FreeFill
 8007ec0:	75426465 72656666 6425203a 00000a0d     edBuffer: %d....
 8007ed0:	65657246 65657246 66667542 203a7265     FreeFreeBuffer: 
 8007ee0:	0a0d6425 00000000 67617355 25203a65     %d......Usage: %
 8007ef0:	000a0d73 74737973 00656d69 0d756c25     s...systime.%lu.
 8007f00:	0000000a 6f666e69 00000000 6e72654b     ....info....Kern
 8007f10:	203a6c65 20202020 73252020 00000a0d     el:       %s....
 8007f20:	706d6f43 72656c69 2020203a 73252020     Compiler:     %s
 8007f30:	00000a0d 68637241 63657469 65727574     ....Architecture
 8007f40:	7325203a 00000a0d 65726f43 72615620     : %s....Core Var
 8007f50:	746e6169 7325203a 00000a0d 74726f50     iant: %s....Port
 8007f60:	666e4920 20203a6f 73252020 00000a0d      Info:    %s....
 8007f70:	74616c50 6d726f66 2020203a 73252020     Platform:     %s
 8007f80:	00000a0d 72616f42 20203a64 20202020     ....Board:      
 8007f90:	73252020 00000a0d 6c697542 69742064       %s....Build ti
 8007fa0:	203a656d 73252020 73257325 00000a0d     me:   %s%s%s....
 8007fb0:	2079614d 32203420 00363130 00202d20     May  4 2016. - .
 8007fc0:	313a3131 39343a32 00000000 0000631b     11:12:49.....c..
 8007fd0:	4a325b1b 00000000 56495244 53205245     .[2J....DRIVER S
 8007fe0:	53455254 45542053 0a0d5453 00000000     TRESS TEST......
 8007ff0:	636c6143 74616c75 6f4c6465 72467473     CalculatedLostFr
 8008000:	73656d61 6425203a 00000a0d 746e6553     ames: %d....Sent
 8008010:	6b636150 203a7465 0a0d6425 00000000     Packet: %d......
 8008020:	6d617246 6d754e65 3a726562 0d642520     FrameNumber: %d.
 8008030:	0000000a 746e6553 6d617246 203a7365     ....SentFrames: 
 8008040:	0a0d6425 00000000 6c6c756e 00000a0d     %d......null....
 8008050:	76697244 54207265 00747365 6c656873     Driver Test.shel
 8008060:	0000006c 68430a0d 4f696269 54522f53     l.....ChibiOS/RT
 8008070:	65685320 0a0d6c6c 00000000 203e6863      Shell......ch> 
 8008080:	00000000 0000445e 206f6f74 796e616d     ....^D..too many
 8008090:	67726120 6e656d75 0a0d7374 00000000      arguments......
 80080a0:	74697865 00000000 706c6568 00000000     exit....help....
 80080b0:	6d6d6f43 73646e61 6568203a 6520706c     Commands: help e
 80080c0:	20746978 00000000 00207325 00007325     xit ....%s .%s..
 80080d0:	0a0d3f20 00000000 6f6c0a0d 74756f67      ?........logout
 80080e0:	00000000 656c6469 00000000 6c617544     ....idle....Dual
 80080f0:	6d617246 726f7765 53203a6b 74726174     Framework: Start
 8008100:	20676e69 6e655327 676e6964 65726854     ing 'SendingThre
 8008110:	20276461 6c696166 2d206465 74756f20     ad' failed - out
 8008120:	20666f20 6f6d656d 00007972 6c617544      of memory..Dual
 8008130:	6d617246 726f7765 53203a6b 74726174     Framework: Start
 8008140:	20676e69 63655227 69766965 6854676e     ing 'ReceivingTh
 8008150:	64616572 61662027 64656c69 6f202d20     read' failed - o
 8008160:	6f207475 656d2066 79726f6d 00000000     ut of memory....
 8008170:	006d656d 65726874 00736461 5f707365     mem.threads.esp_
 8008180:	646e6573 00000000 72617473 72645f74     send....start_dr
 8008190:	72657669 7365745f 00000074 64746567     iver_test...getd
 80081a0:	74736c6c 00737461 00000000 00000000     llstats.........

080081b0 <evhndl>:
 80081b0:	08006831 08006821 08006811 00000000     1h..!h...h......

080081c0 <states.7428>:
 80081c0:	080082e8 080082f0 080082f8 08008300     ................
 80081d0:	0800830c 08008314 0800831c 08008324     ............$...
 80081e0:	0800832c 08008338 08008340 08008348     ,...8...@...H...
 80081f0:	08008354 0800835c 08008364 0800836c     T...\...d...l...
 8008200:	67617355 74203a65 0d747365 0000000a     Usage: test.....
 8008210:	2074756f 6d20666f 726f6d65 000a0d79     out of memory...
 8008220:	67617355 74203a65 61657268 0a0d7364     Usage: threads..
 8008230:	00000000 20202020 72646461 20202020     ....    addr    
 8008240:	63617473 7270206b 72206f69 20736665     stack prio refs 
 8008250:	20202020 74617473 000a0d65 6c383025         state...%08l
 8008260:	30252078 20786c38 756c3425 6c342520     x %08lx %4lu %4l
 8008270:	39252075 6c252073 000a0d75 67617355     u %9s %lu...Usag
 8008280:	6d203a65 0a0d6d65 00000000 65726f63     e: mem......core
 8008290:	65726620 656d2065 79726f6d 25203a20      free memory : %
 80082a0:	79622075 0d736574 0000000a 70616568     u bytes.....heap
 80082b0:	61726620 6e656d67 20207374 25203a20      fragments   : %
 80082c0:	000a0d75 70616568 65726620 6f742065     u...heap free to
 80082d0:	206c6174 25203a20 79622075 0d736574     tal  : %u bytes.
 80082e0:	0000000a 00000920 44414552 00000059     .... ...READY...
 80082f0:	52525543 00544e45 54535457 00545241     CURRENT.WTSTART.
 8008300:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 8008310:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 8008320:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 8008330:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 8008340:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 8008350:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 8008360:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 8008370:	0000004c 00000000 00000000 00000000     L...............

08008380 <vmt>:
 8008380:	08003af1 080031a1 08003d41 080031c1     .:...1..A=...1..
 8008390:	08003d31 080031b1 08003ae1 08003191     1=...1...:...1..

080083a0 <_ctype_>:
 80083a0:	20202000 20202020 28282020 20282828     .         ((((( 
 80083b0:	20202020 20202020 20202020 20202020                     
 80083c0:	10108820 10101010 10101010 10101010      ...............
 80083d0:	04040410 04040404 10040404 10101010     ................
 80083e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80083f0:	01010101 01010101 01010101 10101010     ................
 8008400:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8008410:	02020202 02020202 02020202 10101010     ................
 8008420:	00000020 00000000 00000000 00000000      ...............
	...
 80084b0:	00000043                                         C.
